{
  "summary": {
    "timestamp": "2025-07-20T04:29:30.918Z",
    "duration": "6682ms",
    "totalTests": 5,
    "passedSuites": 0,
    "failedSuites": 4
  },
  "results": {
    "crossBrowser": {
      "status": "failed",
      "error": "Command failed: npm test -- --testPathPattern=cross-browser.test.js --verbose\nFAIL tests/cross-browser.test.js\n  Cross-browser Compatibility Tests\n    CSS Feature Support\n      ✓ CSS Grid support across browsers (6 ms)\n      ✓ CSS Flexbox support across browsers (2 ms)\n      ✓ CSS Custom Properties support (1 ms)\n      ✓ CSS Transitions support (1 ms)\n    JavaScript API Support\n      ✕ localStorage support across browsers (2 ms)\n      ✓ Promise support across browsers (1 ms)\n      ✕ Fetch API support (2 ms)\n      ✓ Array methods support (1 ms)\n    Form Input Support\n      ✓ Number input type support (1 ms)\n      ✓ Input validation support (1 ms)\n      ✓ Form submission handling (1 ms)\n    Event Handling\n      ✓ Click event handling (10 ms)\n      ✓ Keyboard event handling\n      ✓ Focus and blur events (1 ms)\n    Browser-specific Tests\n      ✓ Chrome compatibility (1 ms)\n      ✓ Firefox compatibility\n      ✓ Safari compatibility (1 ms)\n      ✓ Edge compatibility\n    Responsive Design Tests\n      ✓ Viewport meta tag handling (1 ms)\n      ✓ Media query support (1 ms)\n      ✓ Touch event support\n    Performance Tests\n      ✓ Performance API availability (1 ms)\n      ✓ RequestAnimationFrame support (1 ms)\n      ✕ Intersection Observer support (1 ms)\n    Accessibility Features\n      ✓ ARIA attributes support (1 ms)\n      ✓ Focus management\n      ✓ Screen reader support attributes (1 ms)\n\n  ● Cross-browser Compatibility Tests › JavaScript API Support › localStorage support across browsers\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"value\"\n    Received: undefined\n\n      91 |       // Test basic operations\n      92 |       localStorage.setItem('test', 'value');\n    > 93 |       expect(localStorage.getItem('test')).toBe('value');\n         |                                            ^\n      94 |       localStorage.removeItem('test');\n      95 |     });\n      96 |\n\n      at Object.toBe (tests/cross-browser.test.js:93:44)\n\n  ● Cross-browser Compatibility Tests › JavaScript API Support › Fetch API support\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"function\"\n    Received: \"undefined\"\n\n      106 |\n      107 |     test('Fetch API support', () => {\n    > 108 |       expect(typeof fetch).toBe('function');\n          |                            ^\n      109 |     });\n      110 |\n      111 |     test('Array methods support', () => {\n\n      at Object.toBe (tests/cross-browser.test.js:108:28)\n\n  ● Cross-browser Compatibility Tests › Performance Tests › Intersection Observer support\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"function\"\n    Received: \"undefined\"\n\n      277 |\n      278 |     test('Intersection Observer support', () => {\n    > 279 |       expect(typeof IntersectionObserver).toBe('function');\n          |                                           ^\n      280 |     });\n      281 |   });\n      282 |\n\n      at Object.toBe (tests/cross-browser.test.js:279:43)\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 24 passed, 27 total\nSnapshots:   0 total\nTime:        1.392 s\nRan all test suites matching /cross-browser.test.js/i.\n",
      "timestamp": "2025-07-20T04:29:25.915Z"
    },
    "userExperience": {
      "status": "failed",
      "error": "Command failed: npm test -- --testPathPattern=user-experience.test.js --verbose\nFAIL tests/user-experience.test.js\n  User Experience Validation Tests\n    Complete User Flow Tests\n      ✕ successful calculation flow from start to finish (8 ms)\n      ✕ user can modify inputs and recalculate (3 ms)\n      ✕ user can save and load calculations (2 ms)\n    Error Handling Tests\n      ✕ handles invalid input gracefully (2 ms)\n      ✕ displays user-friendly error messages (1 ms)\n      ✕ provides retry mechanism for failed operations (1 ms)\n      ✕ handles storage quota exceeded errors (3 ms)\n    Loading State Tests\n      ✕ shows appropriate loading indicators during calculation (2 ms)\n      ✕ provides progress feedback for long calculations (2 ms)\n      ✕ handles calculation timeout gracefully (1 ms)\n    Accessibility and Usability Tests\n      ✕ provides keyboard navigation support (1 ms)\n      ✕ provides screen reader announcements (1 ms)\n      ✕ maintains focus management during state changes (1 ms)\n    Performance and Responsiveness Tests\n      ✕ calculations complete within acceptable time limits (1 ms)\n      ✕ UI remains responsive during calculations (1 ms)\n\n  ● User Experience Validation Tests › Complete User Flow Tests › successful calculation flow from start to finish\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Complete User Flow Tests › user can modify inputs and recalculate\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Complete User Flow Tests › user can save and load calculations\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Error Handling Tests › handles invalid input gracefully\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Error Handling Tests › displays user-friendly error messages\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Error Handling Tests › provides retry mechanism for failed operations\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Error Handling Tests › handles storage quota exceeded errors\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Loading State Tests › shows appropriate loading indicators during calculation\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Loading State Tests › provides progress feedback for long calculations\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Loading State Tests › handles calculation timeout gracefully\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Accessibility and Usability Tests › provides keyboard navigation support\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Accessibility and Usability Tests › provides screen reader announcements\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Accessibility and Usability Tests › maintains focus management during state changes\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Performance and Responsiveness Tests › calculations complete within acceptable time limits\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\n  ● User Experience Validation Tests › Performance and Responsiveness Tests › UI remains responsive during calculations\n\n    TypeError: _calculatorService.CalculatorService is not a constructor\n\n      65 |\n      66 |     // Initialize services\n    > 67 |     calculatorService = new CalculatorService();\n         |                         ^\n      68 |     storageService = new StorageService();\n      69 |     loadingManager = new LoadingManager();\n      70 |\n\n      at Object.<anonymous> (tests/user-experience.test.js:67:25)\n\nTest Suites: 1 failed, 1 total\nTests:       15 failed, 15 total\nSnapshots:   0 total\nTime:        1.198 s\nRan all test suites matching /user-experience.test.js/i.\n",
      "timestamp": "2025-07-20T04:29:27.394Z"
    },
    "performance": {
      "status": "failed",
      "error": "Command failed: npm test -- --testPathPattern=\"(async-calculation|integration)\" --verbose\nFAIL tests/integration.test.js\n  Loan Calculator Integration\n    ✕ should update results when form values change (85 ms)\n    ✕ should update amortization table when form values change (24 ms)\n    ✕ should pass inflation-adjusted data when inflation rate is set (20 ms)\n    ✕ should not pass inflation-adjusted data when inflation rate is zero (19 ms)\n    ✕ should update loan parameters when loan type changes (48 ms)\n    ✕ should save and load calculations (26 ms)\n    ✕ should handle complete user workflow (41 ms)\n    ✕ should handle error conditions gracefully (15 ms)\n\n  ● Loan Calculator Integration › should update results when form values change\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      92 |\n      93 |     // Verify results were updated\n    > 94 |     expect(renderSpy).toHaveBeenCalled();\n         |                       ^\n      95 |\n      96 |     // Verify the loan object passed to render has the updated principal\n      97 |     const renderCall = renderSpy.mock.calls[0][0];\n\n      at Object.toHaveBeenCalled (tests/integration.test.js:94:23)\n\n  ● Loan Calculator Integration › should update amortization table when form values change\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      111 |\n      112 |     // Verify amortization table was updated\n    > 113 |     expect(renderSpy).toHaveBeenCalled();\n          |                       ^\n      114 |\n      115 |     // Verify the loan object passed to render has the updated term\n      116 |     const renderCall = renderSpy.mock.calls[0][0];\n\n      at Object.toHaveBeenCalled (tests/integration.test.js:113:23)\n\n  ● Loan Calculator Integration › should pass inflation-adjusted data when inflation rate is set\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      130 |\n      131 |     // Verify results were updated\n    > 132 |     expect(renderSpy).toHaveBeenCalled();\n          |                       ^\n      133 |\n      134 |     // Verify inflation-adjusted data was passed to render\n      135 |     const renderCall = renderSpy.mock.calls[0][0];\n\n      at Object.toHaveBeenCalled (tests/integration.test.js:132:23)\n\n  ● Loan Calculator Integration › should not pass inflation-adjusted data when inflation rate is zero\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      150 |\n      151 |     // Verify results were updated\n    > 152 |     expect(renderSpy).toHaveBeenCalled();\n          |                       ^\n      153 |\n      154 |     // Verify inflation-adjusted data was not passed to render\n      155 |     const renderCall = renderSpy.mock.calls[0][0];\n\n      at Object.toHaveBeenCalled (tests/integration.test.js:152:23)\n\n  ● Loan Calculator Integration › should update loan parameters when loan type changes\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      169 |\n      170 |     // Verify calculation was performed with updated loan type\n    > 171 |     expect(calculateSpy).toHaveBeenCalled();\n          |                          ^\n      172 |\n      173 |     // Verify the loan passed to calculate has the auto loan type\n      174 |     const loanArg = calculateSpy.mock.calls[0][0];\n\n      at Object.toHaveBeenCalled (tests/integration.test.js:171:26)\n\n  ● Loan Calculator Integration › should save and load calculations\n\n    TypeError: Cannot read properties of null (reading 'loan')\n\n      195 |\n      196 |     // Verify loaded calculation matches saved calculation\n    > 197 |     expect(loadedCalculation.loan.principal).toBe(loan.principal);\n          |                              ^\n      198 |     expect(loadedCalculation.loan.interestRate).toBe(loan.interestRate);\n      199 |     expect(loadedCalculation.loan.term).toBe(loan.term);\n      200 |     expect(loadedCalculation.amortizationSchedule.totalInterest).toBe(amortizationSchedule.totalInterest);\n\n      at Object.loan (tests/integration.test.js:197:30)\n\n  ● Loan Calculator Integration › should handle complete user workflow\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      246 |\n      247 |     // Verify results and amortization table were updated\n    > 248 |     expect(resultsRenderSpy).toHaveBeenCalled();\n          |                              ^\n      249 |     expect(tableRenderSpy).toHaveBeenCalled();\n      250 |\n      251 |     // Verify the final loan object has all the correct values\n\n      at Object.toHaveBeenCalled (tests/integration.test.js:248:30)\n\n  ● Loan Calculator Integration › should handle error conditions gracefully\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      279 |\n      280 |     // Verify error was logged\n    > 281 |     expect(consoleErrorSpy).toHaveBeenCalled();\n          |                             ^\n      282 |\n      283 |     // Verify application didn't crash (DOM still exists)\n      284 |     expect(document.querySelector('#calculator-form-container')).not.toBeNull();\n\n      at Object.toHaveBeenCalled (tests/integration.test.js:281:29)\n\nPASS tests/async-calculation.test.js\n  Async Calculation Functionality\n    ✓ should generate amortization schedule asynchronously (11 ms)\n    ✓ should handle timeout for long calculations (58 ms)\n    ✓ should validate loan parameters before calculation\n    ✓ should validate interest rate (1 ms)\n    ✓ should validate loan term\n    ✓ should handle calculation with additional payments (7 ms)\n    ✓ should process payments in batches (43 ms)\n    ✓ should maintain generation state during calculation (9 ms)\n    ✓ should reset state on error (9 ms)\n\nTest Suites: 1 failed, 1 passed, 2 total\nTests:       8 failed, 9 passed, 17 total\nSnapshots:   0 total\nTime:        1.488 s\nRan all test suites matching /(async-calculation|integration)/i.\n",
      "timestamp": "2025-07-20T04:29:29.151Z"
    },
    "accessibility": {
      "status": "failed",
      "error": "Command failed: npm test -- --testPathPattern=accessibility.test.js --verbose\nFAIL tests/accessibility.test.js\n  Accessibility Compliance\n    ✕ should have no accessibility violations in the main page (94 ms)\n    ✓ should have proper heading structure (8 ms)\n    ✓ should have alt text for all images (5 ms)\n    ✓ should have sufficient color contrast (10 ms)\n    ✓ should have proper form labels (5 ms)\n    ✓ should have proper ARIA attributes (6 ms)\n    ✓ should have keyboard navigable interactive elements (4 ms)\n    ✓ should have proper document language (4 ms)\n    ✓ should have proper page title (8 ms)\n\n  ● Accessibility Compliance › should have no accessibility violations in the main page\n\n    expect(received).toHaveNoViolations(expected)\n\n    Expected the HTML found at $('#calculator-form-container') to have no violations:\n\n    <section class=\"calculator-form-section\" id=\"calculator-form-container\" aria-labelledby=\"form-title\">\n              <!-- Calculator form will be rendered here -->\n            </section>\n\n    Received:\n\n    \"Elements must only use allowed ARIA attributes (aria-allowed-attr)\"\n\n    Fix all of the following:\n      aria-labelledby attribute cannot be used on a section with no valid role attribute.\n\n    You can find more information on this issue here: \n    https://dequeuniversity.com/rules/axe/4.7/aria-allowed-attr?application=axeAPI\n\n    Expected the HTML found at $('#results-display-container') to have no violations:\n\n    <section class=\"results-section\" id=\"results-display-container\" aria-labelledby=\"results-title\" aria-live=\"polite\">\n              <!-- Results will be rendered here -->\n            </section>\n\n    Received:\n\n    \"Elements must only use allowed ARIA attributes (aria-allowed-attr)\"\n\n    Fix all of the following:\n      aria-labelledby attribute cannot be used on a section with no valid role attribute.\n\n    You can find more information on this issue here: \n    https://dequeuniversity.com/rules/axe/4.7/aria-allowed-attr?application=axeAPI\n\n      41 |\n      42 |     // Check for violations\n    > 43 |     expect(results).toHaveNoViolations();\n         |                     ^\n      44 |   });\n      45 |\n      46 |   test('should have proper heading structure', () => {\n\n      at Object.toHaveNoViolations (tests/accessibility.test.js:43:21)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 8 passed, 9 total\nSnapshots:   0 total\nTime:        1.489 s\nRan all test suites matching /accessibility.test.js/i.\n",
      "timestamp": "2025-07-20T04:29:30.918Z"
    },
    "overall": {}
  },
  "recommendations": [
    {
      "category": "Cross-Browser Compatibility",
      "priority": "high",
      "message": "Fix cross-browser compatibility issues before deployment",
      "actions": [
        "Test in Chrome, Firefox, Safari, and Edge",
        "Verify CSS Grid and Flexbox support",
        "Check JavaScript API compatibility"
      ]
    },
    {
      "category": "User Experience",
      "priority": "high",
      "message": "Address user experience issues to improve usability",
      "actions": [
        "Fix error handling and user feedback",
        "Improve loading states and progress indicators",
        "Ensure smooth user flows"
      ]
    },
    {
      "category": "Performance",
      "priority": "medium",
      "message": "Optimize performance for better user experience",
      "actions": [
        "Reduce calculation time to under 3 seconds",
        "Implement async processing",
        "Add progress indicators for long operations"
      ]
    },
    {
      "category": "Accessibility",
      "priority": "high",
      "message": "Fix accessibility issues to ensure inclusive design",
      "actions": [
        "Add proper ARIA labels and roles",
        "Ensure keyboard navigation works",
        "Test with screen readers"
      ]
    }
  ]
}