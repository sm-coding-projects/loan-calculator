{"version":3,"file":"js/amortization-table.fa40fc676ce76d982a3c.chunk.js","mappings":"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","sources":["webpack://loan-calculator/./src/js/utils/virtual-scroller.js","webpack://loan-calculator/./src/js/components/amortization-table.js"],"sourcesContent":["/**\n * Virtual Scroller Utility\n * Implements virtual scrolling for large datasets to optimize rendering performance\n * Implements requirements 4.2, 4.4\n */\n\nclass VirtualScroller {\n  constructor(options = {}) {\n    this.container = options.container;\n    this.itemHeight = options.itemHeight || 50;\n    this.bufferSize = options.bufferSize || 10;\n    this.renderItem = options.renderItem || (() => document.createElement('div'));\n    this.onScroll = options.onScroll || (() => {});\n\n    // Data and state\n    this.data = [];\n    this.visibleItems = [];\n    this.startIndex = 0;\n    this.endIndex = 0;\n    this.containerHeight = 0;\n    this.visibleCount = 0;\n\n    // DOM elements\n    this.viewport = null;\n    this.content = null;\n    this.spacerTop = null;\n    this.spacerBottom = null;\n\n    // Performance tracking\n    this.lastScrollTime = 0;\n    this.scrollTimeout = null;\n    this.isScrolling = false;\n\n    this.init();\n  }\n\n  /**\n   * Initialize the virtual scroller\n   */\n  init() {\n    if (!this.container) {\n      throw new Error('Container element is required for virtual scroller');\n    }\n\n    this.createViewport();\n    this.bindEvents();\n    this.updateDimensions();\n  }\n\n  /**\n   * Create the viewport structure\n   */\n  createViewport() {\n    // Clear container\n    this.container.innerHTML = '';\n\n    // Create viewport\n    this.viewport = document.createElement('div');\n    this.viewport.className = 'virtual-scroller-viewport';\n    this.viewport.style.cssText = `\n      height: 100%;\n      overflow-y: auto;\n      overflow-x: hidden;\n      position: relative;\n    `;\n\n    // Create content container\n    this.content = document.createElement('div');\n    this.content.className = 'virtual-scroller-content';\n    this.content.style.cssText = `\n      position: relative;\n      min-height: 100%;\n    `;\n\n    // Create spacers for maintaining scroll position\n    this.spacerTop = document.createElement('div');\n    this.spacerTop.className = 'virtual-scroller-spacer-top';\n    this.spacerTop.style.cssText = `\n      height: 0px;\n      flex-shrink: 0;\n    `;\n\n    this.spacerBottom = document.createElement('div');\n    this.spacerBottom.className = 'virtual-scroller-spacer-bottom';\n    this.spacerBottom.style.cssText = `\n      height: 0px;\n      flex-shrink: 0;\n    `;\n\n    // Assemble structure\n    this.content.appendChild(this.spacerTop);\n    this.content.appendChild(this.spacerBottom);\n    this.viewport.appendChild(this.content);\n    this.container.appendChild(this.viewport);\n  }\n\n  /**\n   * Bind scroll events\n   */\n  bindEvents() {\n    // Throttled scroll handler for performance\n    this.viewport.addEventListener('scroll', this.handleScroll.bind(this), { passive: true });\n\n    // Resize observer for responsive updates\n    if (window.ResizeObserver) {\n      this.resizeObserver = new ResizeObserver(() => {\n        this.updateDimensions();\n        this.render();\n      });\n      this.resizeObserver.observe(this.container);\n    }\n\n    // Window resize fallback\n    window.addEventListener('resize', () => {\n      this.updateDimensions();\n      this.render();\n    });\n  }\n\n  /**\n   * Handle scroll events with throttling\n   */\n  handleScroll() {\n    const now = Date.now();\n\n    // Mark as scrolling\n    this.isScrolling = true;\n\n    // Clear existing timeout\n    if (this.scrollTimeout) {\n      clearTimeout(this.scrollTimeout);\n    }\n\n    // Throttle scroll updates for performance\n    if (now - this.lastScrollTime > 16) { // ~60fps\n      this.updateVisibleRange();\n      this.render();\n      this.lastScrollTime = now;\n    }\n\n    // Set timeout to mark scrolling as finished\n    this.scrollTimeout = setTimeout(() => {\n      this.isScrolling = false;\n      this.onScroll({\n        scrollTop: this.viewport.scrollTop,\n        isScrolling: false,\n      });\n    }, 150);\n\n    // Call scroll callback\n    this.onScroll({\n      scrollTop: this.viewport.scrollTop,\n      isScrolling: true,\n    });\n  }\n\n  /**\n   * Update container dimensions\n   */\n  updateDimensions() {\n    if (!this.viewport) return;\n\n    const rect = this.viewport.getBoundingClientRect();\n    this.containerHeight = rect.height;\n    this.visibleCount = Math.ceil(this.containerHeight / this.itemHeight) + this.bufferSize * 2;\n  }\n\n  /**\n   * Update the visible range based on scroll position\n   */\n  updateVisibleRange() {\n    if (!this.viewport || this.data.length === 0) return;\n\n    const { scrollTop } = this.viewport;\n    const startIndex = Math.floor(scrollTop / this.itemHeight);\n\n    // Apply buffer\n    this.startIndex = Math.max(0, startIndex - this.bufferSize);\n    this.endIndex = Math.min(this.data.length, startIndex + this.visibleCount + this.bufferSize);\n  }\n\n  /**\n   * Set data for the virtual scroller\n   * @param {Array} data - Array of data items\n   */\n  setData(data) {\n    this.data = data || [];\n    this.updateVisibleRange();\n    this.render();\n  }\n\n  /**\n   * Render visible items\n   */\n  render() {\n    if (!this.content || this.data.length === 0) return;\n\n    // Calculate spacer heights\n    const topSpacerHeight = this.startIndex * this.itemHeight;\n    const bottomSpacerHeight = (this.data.length - this.endIndex) * this.itemHeight;\n\n    // Update spacers\n    this.spacerTop.style.height = `${topSpacerHeight}px`;\n    this.spacerBottom.style.height = `${bottomSpacerHeight}px`;\n\n    // Clear existing visible items\n    this.clearVisibleItems();\n\n    // Render visible items\n    const fragment = document.createDocumentFragment();\n\n    for (let i = this.startIndex; i < this.endIndex; i++) {\n      const item = this.data[i];\n      const element = this.renderItem(item, i);\n\n      // Ensure proper styling for virtual scrolling\n      element.style.cssText = `\n        height: ${this.itemHeight}px;\n        box-sizing: border-box;\n        flex-shrink: 0;\n      `;\n\n      // Add data attributes for debugging\n      element.setAttribute('data-virtual-index', i);\n      element.className = `${element.className} virtual-item`.trim();\n\n      fragment.appendChild(element);\n    }\n\n    // Insert rendered items between spacers\n    this.content.insertBefore(fragment, this.spacerBottom);\n\n    // Store reference to visible items\n    this.visibleItems = Array.from(this.content.querySelectorAll('.virtual-item'));\n  }\n\n  /**\n   * Clear visible items from DOM\n   */\n  clearVisibleItems() {\n    const items = this.content.querySelectorAll('.virtual-item');\n    items.forEach((item) => item.remove());\n    this.visibleItems = [];\n  }\n\n  /**\n   * Scroll to a specific item index\n   * @param {number} index - Item index to scroll to\n   * @param {string} behavior - Scroll behavior ('auto', 'smooth')\n   */\n  scrollToIndex(index, behavior = 'auto') {\n    if (index < 0 || index >= this.data.length) return;\n\n    const scrollTop = index * this.itemHeight;\n    this.viewport.scrollTo({\n      top: scrollTop,\n      behavior,\n    });\n  }\n\n  /**\n   * Scroll to top\n   * @param {string} behavior - Scroll behavior ('auto', 'smooth')\n   */\n  scrollToTop(behavior = 'smooth') {\n    this.viewport.scrollTo({\n      top: 0,\n      behavior,\n    });\n  }\n\n  /**\n   * Scroll to bottom\n   * @param {string} behavior - Scroll behavior ('auto', 'smooth')\n   */\n  scrollToBottom(behavior = 'smooth') {\n    this.viewport.scrollTo({\n      top: this.data.length * this.itemHeight,\n      behavior,\n    });\n  }\n\n  /**\n   * Get current scroll information\n   * @returns {Object} Scroll information\n   */\n  getScrollInfo() {\n    return {\n      scrollTop: this.viewport ? this.viewport.scrollTop : 0,\n      scrollHeight: this.data.length * this.itemHeight,\n      clientHeight: this.containerHeight,\n      startIndex: this.startIndex,\n      endIndex: this.endIndex,\n      visibleCount: this.endIndex - this.startIndex,\n      totalCount: this.data.length,\n      isScrolling: this.isScrolling,\n    };\n  }\n\n  /**\n   * Update item height and re-render\n   * @param {number} height - New item height\n   */\n  setItemHeight(height) {\n    this.itemHeight = height;\n    this.updateDimensions();\n    this.updateVisibleRange();\n    this.render();\n  }\n\n  /**\n   * Refresh the virtual scroller\n   */\n  refresh() {\n    this.updateDimensions();\n    this.updateVisibleRange();\n    this.render();\n  }\n\n  /**\n   * Get performance metrics\n   * @returns {Object} Performance metrics\n   */\n  getMetrics() {\n    return {\n      totalItems: this.data.length,\n      visibleItems: this.visibleItems.length,\n      renderedRange: `${this.startIndex}-${this.endIndex}`,\n      itemHeight: this.itemHeight,\n      containerHeight: this.containerHeight,\n      bufferSize: this.bufferSize,\n      isScrolling: this.isScrolling,\n    };\n  }\n\n  /**\n   * Destroy the virtual scroller and clean up resources\n   */\n  destroy() {\n    // Clear timeouts\n    if (this.scrollTimeout) {\n      clearTimeout(this.scrollTimeout);\n    }\n\n    // Disconnect resize observer\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n\n    // Remove event listeners\n    if (this.viewport) {\n      this.viewport.removeEventListener('scroll', this.handleScroll);\n    }\n\n    // Clear container\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n\n    // Reset state\n    this.data = [];\n    this.visibleItems = [];\n    this.viewport = null;\n    this.content = null;\n    this.spacerTop = null;\n    this.spacerBottom = null;\n  }\n}\n\n/**\n * Virtual Table implementation specifically for tabular data\n */\nclass VirtualTable extends VirtualScroller {\n  constructor(options = {}) {\n    // Set default item height for table rows\n    options.itemHeight = options.itemHeight || 45;\n\n    super(options);\n\n    this.columns = options.columns || [];\n    this.headerHeight = options.headerHeight || 50;\n    this.showHeader = options.showHeader !== false;\n\n    this.createTableStructure();\n  }\n\n  /**\n   * Create table-specific structure\n   */\n  createTableStructure() {\n    // Add table classes\n    this.container.classList.add('virtual-table-container');\n    this.viewport.classList.add('virtual-table-viewport');\n\n    // Create header if needed\n    if (this.showHeader && this.columns.length > 0) {\n      this.createHeader();\n    }\n\n    // Update content styling for table\n    this.content.style.cssText += `\n      display: flex;\n      flex-direction: column;\n    `;\n  }\n\n  /**\n   * Create table header\n   */\n  createHeader() {\n    const header = document.createElement('div');\n    header.className = 'virtual-table-header';\n    header.style.cssText = `\n      height: ${this.headerHeight}px;\n      display: flex;\n      background: var(--table-header-bg, #f8f9fa);\n      border-bottom: 1px solid var(--table-border-color, #dee2e6);\n      position: sticky;\n      top: 0;\n      z-index: 10;\n      flex-shrink: 0;\n    `;\n\n    // Create header cells\n    this.columns.forEach((column, index) => {\n      const cell = document.createElement('div');\n      cell.className = 'virtual-table-header-cell';\n      cell.style.cssText = `\n        flex: ${column.flex || 1};\n        padding: 12px 8px;\n        font-weight: 600;\n        display: flex;\n        align-items: center;\n        border-right: 1px solid var(--table-border-color, #dee2e6);\n        min-width: ${column.minWidth || 100}px;\n        max-width: ${column.maxWidth || 'none'};\n      `;\n\n      cell.textContent = column.title || column.key;\n\n      // Add sort functionality if enabled\n      if (column.sortable) {\n        cell.style.cursor = 'pointer';\n        cell.addEventListener('click', () => {\n          this.handleSort(column.key);\n        });\n      }\n\n      header.appendChild(cell);\n    });\n\n    // Insert header before viewport\n    this.container.insertBefore(header, this.viewport);\n\n    // Adjust viewport height to account for header\n    this.viewport.style.height = `calc(100% - ${this.headerHeight}px)`;\n  }\n\n  /**\n   * Handle column sorting\n   * @param {string} columnKey - Column key to sort by\n   */\n  handleSort(columnKey) {\n    // This would be implemented based on specific requirements\n    console.log(`Sorting by column: ${columnKey}`);\n  }\n\n  /**\n   * Render a table row\n   * @param {Object} item - Data item\n   * @param {number} index - Item index\n   * @returns {HTMLElement} Rendered row element\n   */\n  renderTableRow(item, index) {\n    const row = document.createElement('div');\n    row.className = 'virtual-table-row';\n    row.style.cssText = `\n      display: flex;\n      border-bottom: 1px solid var(--table-border-color, #dee2e6);\n      background: ${index % 2 === 0 ? 'var(--table-row-even-bg, #fff)' : 'var(--table-row-odd-bg, #f8f9fa)'};\n      transition: background-color 0.2s ease;\n    `;\n\n    // Add hover effect\n    row.addEventListener('mouseenter', () => {\n      row.style.backgroundColor = 'var(--table-row-hover-bg, #e9ecef)';\n    });\n\n    row.addEventListener('mouseleave', () => {\n      row.style.backgroundColor = index % 2 === 0 ? 'var(--table-row-even-bg, #fff)' : 'var(--table-row-odd-bg, #f8f9fa)';\n    });\n\n    // Create cells\n    this.columns.forEach((column) => {\n      const cell = document.createElement('div');\n      cell.className = 'virtual-table-cell';\n      cell.style.cssText = `\n        flex: ${column.flex || 1};\n        padding: 12px 8px;\n        display: flex;\n        align-items: center;\n        border-right: 1px solid var(--table-border-color, #dee2e6);\n        min-width: ${column.minWidth || 100}px;\n        max-width: ${column.maxWidth || 'none'};\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      `;\n\n      // Get cell value\n      let value = item[column.key];\n\n      // Apply formatter if provided\n      if (column.formatter && typeof column.formatter === 'function') {\n        value = column.formatter(value, item, index);\n      }\n\n      // Set cell content\n      if (typeof value === 'string' || typeof value === 'number') {\n        cell.textContent = value;\n      } else if (value instanceof HTMLElement) {\n        cell.appendChild(value);\n      } else {\n        cell.textContent = String(value || '');\n      }\n\n      // Add column-specific classes\n      cell.classList.add(`col-${column.key}`);\n\n      row.appendChild(cell);\n    });\n\n    return row;\n  }\n}\n\nexport { VirtualScroller, VirtualTable };\n","/**\n * Amortization Table Component\n * Displays detailed payment schedule\n * Implements requirement 2.2\n */\n\nimport * as formatters from '../utils/formatters.js';\nimport animationManager from '../utils/animation-manager.js';\nimport { VirtualTable } from '../utils/virtual-scroller.js';\nimport { enhanceTableAccessibility, announceToScreenReader } from '../utils/accessibility.js';\n\nclass AmortizationTable {\n  /**\n   * Create a new amortization table component\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement} [options.container] - Container element\n   * @param {Object} [options.formatters] - Custom formatters\n   * @param {number} [options.pageSize] - Number of items per page\n   * @param {boolean} [options.useVirtualScrolling] - Whether to use virtual scrolling for large datasets\n   * @param {number} [options.virtualScrollThreshold] - Minimum items to enable virtual scrolling\n   */\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('amortization-table');\n    this.formatters = {\n      currency: formatters.formatCurrency,\n      percentage: formatters.formatPercentage,\n      number: formatters.formatNumber,\n      date: formatters.formatDate,\n      ...options.formatters,\n    };\n    this.pageSize = options.pageSize || 12;\n    this.currentPage = 1;\n    this.sortColumn = 'number';\n    this.sortDirection = 'asc';\n    this.filters = {};\n    this.currentData = [];\n\n    // Virtual scrolling options\n    this.useVirtualScrolling = options.useVirtualScrolling !== false; // Default to true\n    this.virtualScrollThreshold = options.virtualScrollThreshold || 100;\n    this.virtualTable = null;\n    this.isVirtualMode = false;\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    if (!this.container) {\n      console.error('Amortization table container not found');\n      return;\n    }\n\n    // Create filter controls\n    this.createFilterControls();\n  }\n\n  /**\n   * Create filter controls for the table\n   */\n  createFilterControls() {\n    const filterControls = document.createElement('div');\n    filterControls.className = 'filter-controls';\n    filterControls.innerHTML = `\n      <div class=\"filter-row\">\n        <div class=\"filter-group\">\n          <label for=\"year-filter\">Filter by Year:</label>\n          <select id=\"year-filter\">\n            <option value=\"\">All Years</option>\n          </select>\n        </div>\n        <div class=\"filter-group\">\n          <label for=\"payment-range\">Payment Range:</label>\n          <input type=\"number\" id=\"min-payment\" placeholder=\"Min\" min=\"0\" step=\"100\">\n          <span>to</span>\n          <input type=\"number\" id=\"max-payment\" placeholder=\"Max\" min=\"0\" step=\"100\">\n        </div>\n        <button id=\"apply-filters\" class=\"btn-filter\">Apply Filters</button>\n        <button id=\"reset-filters\" class=\"btn-filter\">Reset</button>\n      </div>\n    `;\n\n    // Add event listeners for filter controls\n    const applyButton = filterControls.querySelector('#apply-filters');\n    const resetButton = filterControls.querySelector('#reset-filters');\n\n    if (applyButton) {\n      applyButton.addEventListener('click', () => this.applyFilters());\n    }\n\n    if (resetButton) {\n      resetButton.addEventListener('click', () => this.resetFilters());\n    }\n\n    // Store filter controls for later use\n    this.filterControls = filterControls;\n  }\n\n  /**\n   * Apply filters to the table data\n   */\n  applyFilters() {\n    if (!this.filterControls) return;\n\n    const yearFilter = this.filterControls.querySelector('#year-filter').value;\n    const minPayment = parseFloat(this.filterControls.querySelector('#min-payment').value) || 0;\n    const maxPayment = parseFloat(this.filterControls.querySelector('#max-payment').value) || Infinity;\n\n    this.filters = {};\n\n    if (yearFilter) {\n      this.filters.year = parseInt(yearFilter);\n    }\n\n    if (minPayment > 0 || maxPayment < Infinity) {\n      this.filters.paymentRange = { min: minPayment, max: maxPayment };\n    }\n\n    // Re-render with current data and new filters\n    if (this.currentData.length > 0) {\n      this.render({ payments: this.currentData });\n    }\n  }\n\n  /**\n   * Reset all filters\n   */\n  resetFilters() {\n    if (!this.filterControls) return;\n\n    // Reset filter form\n    this.filterControls.querySelector('#year-filter').value = '';\n    this.filterControls.querySelector('#min-payment').value = '';\n    this.filterControls.querySelector('#max-payment').value = '';\n\n    // Clear filters object\n    this.filters = {};\n\n    // Re-render with current data\n    if (this.currentData.length > 0) {\n      this.render({ payments: this.currentData });\n    }\n  }\n\n  /**\n   * Update year filter options based on available data\n   * @param {Array} payments - Payment data\n   */\n  updateYearFilterOptions(payments) {\n    if (!this.filterControls) return;\n\n    const yearFilter = this.filterControls.querySelector('#year-filter');\n    if (!yearFilter) return;\n\n    // Clear existing options except the first one\n    while (yearFilter.options.length > 1) {\n      yearFilter.remove(1);\n    }\n\n    // Get unique years from payments\n    const years = [...new Set(payments.map((payment) => payment.date.getFullYear()))].sort();\n\n    // Add year options\n    years.forEach((year) => {\n      const option = document.createElement('option');\n      option.value = year;\n      option.textContent = year;\n      yearFilter.appendChild(option);\n    });\n  }\n\n  /**\n   * Show loading skeleton while data is being processed\n   */\n  showLoadingSkeleton() {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"table-container\">\n        <table class=\"skeleton-table\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Date</th>\n              <th>Payment</th>\n              <th>Principal</th>\n              <th>Interest</th>\n              <th>Remaining Balance</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${Array.from({ length: 8 }, (_, i) => `\n              <tr class=\"skeleton-row\">\n                <td><div class=\"skeleton-cell short\"></div></td>\n                <td><div class=\"skeleton-cell medium\"></div></td>\n                <td><div class=\"skeleton-cell long\"></div></td>\n                <td><div class=\"skeleton-cell long\"></div></td>\n                <td><div class=\"skeleton-cell long\"></div></td>\n                <td><div class=\"skeleton-cell long\"></div></td>\n              </tr>\n            `).join('')}\n          </tbody>\n        </table>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the amortization schedule\n   * @param {Object} amortizationSchedule - Amortization schedule object\n   */\n  render(amortizationSchedule) {\n    if (!this.container) {\n      return;\n    }\n\n    // Show loading skeleton if no data yet\n    if (!amortizationSchedule || !amortizationSchedule.payments || amortizationSchedule.payments.length === 0) {\n      this.showLoadingSkeleton();\n      return;\n    }\n\n    // Store the full data set\n    this.currentData = amortizationSchedule.payments || [];\n\n    // Filter and sort data\n    const filteredData = this.filterData(this.currentData, this.filters);\n    const sortedData = this.sortData(filteredData, this.sortColumn, this.sortDirection);\n\n    // Determine if we should use virtual scrolling\n    const shouldUseVirtual = this.useVirtualScrolling && sortedData.length >= this.virtualScrollThreshold;\n\n    if (shouldUseVirtual && !this.isVirtualMode) {\n      this.switchToVirtualMode(sortedData);\n    } else if (!shouldUseVirtual && this.isVirtualMode) {\n      this.switchToPaginatedMode(sortedData);\n    } else if (shouldUseVirtual && this.isVirtualMode) {\n      this.updateVirtualTable(sortedData);\n    } else {\n      this.renderPaginatedTable(sortedData);\n    }\n  }\n\n  /**\n   * Switch to virtual scrolling mode\n   * @param {Array} data - Sorted and filtered data\n   */\n  switchToVirtualMode(data) {\n    this.isVirtualMode = true;\n\n    // Clear container\n    this.container.innerHTML = '';\n\n    // Add filter controls\n    this.container.appendChild(this.filterControls);\n    this.updateYearFilterOptions(this.currentData);\n\n    // Add performance info\n    this.addPerformanceInfo(data.length);\n\n    // Create virtual table container\n    const virtualContainer = document.createElement('div');\n    virtualContainer.className = 'virtual-table-wrapper';\n    virtualContainer.style.cssText = `\n      height: 600px;\n      border: 1px solid var(--table-border-color, #dee2e6);\n      border-radius: 8px;\n      overflow: hidden;\n      background: white;\n    `;\n\n    // Define columns for virtual table\n    const columns = [\n      {\n        key: 'number',\n        title: '#',\n        flex: 0.5,\n        minWidth: 60,\n        formatter: (value) => value.toString(),\n      },\n      {\n        key: 'date',\n        title: 'Date',\n        flex: 1,\n        minWidth: 120,\n        formatter: (value) => this.formatters.date(value),\n      },\n      {\n        key: 'amount',\n        title: 'Payment',\n        flex: 1,\n        minWidth: 120,\n        formatter: (value) => this.formatters.currency(value),\n      },\n      {\n        key: 'principal',\n        title: 'Principal',\n        flex: 1,\n        minWidth: 120,\n        formatter: (value) => this.formatters.currency(value),\n      },\n      {\n        key: 'interest',\n        title: 'Interest',\n        flex: 1,\n        minWidth: 120,\n        formatter: (value) => this.formatters.currency(value),\n      },\n      {\n        key: 'balance',\n        title: 'Remaining Balance',\n        flex: 1.2,\n        minWidth: 140,\n        formatter: (value) => this.formatters.currency(value),\n      },\n    ];\n\n    // Create virtual table\n    this.virtualTable = new VirtualTable({\n      container: virtualContainer,\n      columns,\n      itemHeight: 45,\n      bufferSize: 20,\n      headerHeight: 50,\n      onScroll: (info) => {\n        // Update scroll position indicator\n        this.updateScrollIndicator(info);\n      },\n    });\n\n    // Set data\n    this.virtualTable.setData(data);\n\n    // Add to container\n    this.container.appendChild(virtualContainer);\n\n    // Add virtual table controls\n    this.addVirtualTableControls();\n\n    // Animate reveal\n    this._animateVirtualTableReveal(virtualContainer);\n  }\n\n  /**\n   * Switch back to paginated mode\n   * @param {Array} data - Sorted and filtered data\n   */\n  switchToPaginatedMode(data) {\n    this.isVirtualMode = false;\n\n    // Destroy virtual table\n    if (this.virtualTable) {\n      this.virtualTable.destroy();\n      this.virtualTable = null;\n    }\n\n    // Render normal paginated table\n    this.renderPaginatedTable(data);\n  }\n\n  /**\n   * Update virtual table with new data\n   * @param {Array} data - Sorted and filtered data\n   */\n  updateVirtualTable(data) {\n    if (this.virtualTable) {\n      this.virtualTable.setData(data);\n      this.updatePerformanceInfo(data.length);\n    }\n  }\n\n  /**\n   * Render traditional paginated table\n   * @param {Array} sortedData - Sorted and filtered data\n   */\n  renderPaginatedTable(sortedData) {\n    // Clear the container\n    this.container.innerHTML = '';\n\n    // Add filter controls\n    this.container.appendChild(this.filterControls);\n    this.updateYearFilterOptions(this.currentData);\n\n    // Create table container\n    const tableContainer = document.createElement('div');\n    tableContainer.className = 'table-container';\n\n    // Create table\n    const table = document.createElement('table');\n    table.className = 'table table-responsive';\n    table.setAttribute('role', 'table');\n    table.setAttribute('aria-label', 'Loan amortization schedule');\n\n    // Add caption for screen readers\n    const caption = document.createElement('caption');\n    caption.textContent = `Amortization schedule showing ${sortedData.length} payments`;\n    caption.classList.add('sr-only');\n    table.appendChild(caption);\n\n    // Create table header\n    const tableHeader = this.createTableHeader();\n    table.appendChild(tableHeader);\n\n    // Paginate data\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    const endIndex = startIndex + this.pageSize;\n    const paginatedData = sortedData.slice(startIndex, endIndex);\n\n    // Create table body\n    const tableBody = this.createTableBody(paginatedData);\n    table.appendChild(tableBody);\n\n    // Add table to container\n    tableContainer.appendChild(table);\n    this.container.appendChild(tableContainer);\n\n    // Enhance table accessibility\n    enhanceTableAccessibility(table, `Amortization schedule showing ${sortedData.length} payments`);\n\n    // Create pagination\n    this.createPagination(sortedData.length);\n\n    // Add highlighting for key information\n    this.highlightKeyInformation();\n\n    // Animate table reveal\n    this._animateTableReveal(table, paginatedData.length);\n  }\n\n  /**\n   * Create the table header\n   * @returns {HTMLTableSectionElement} Table header element\n   */\n  createTableHeader() {\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n\n    // Define columns\n    const columns = [\n      { id: 'number', label: '#', sortable: true },\n      { id: 'date', label: 'Date', sortable: true },\n      { id: 'amount', label: 'Payment', sortable: true },\n      { id: 'principal', label: 'Principal', sortable: true },\n      { id: 'interest', label: 'Interest', sortable: true },\n      { id: 'balance', label: 'Remaining Balance', sortable: true },\n    ];\n\n    // Create header cells\n    columns.forEach((column, index) => {\n      const th = document.createElement('th');\n      th.textContent = column.label;\n      th.setAttribute('scope', 'col');\n      th.id = `amortization-header-${column.id}`;\n\n      if (column.sortable) {\n        th.className = 'sortable';\n        th.setAttribute('role', 'columnheader');\n        th.setAttribute('tabindex', '0');\n        let ariaSortValue = 'none';\n        if (column.id === this.sortColumn) {\n          ariaSortValue = this.sortDirection === 'asc' ? 'ascending' : 'descending';\n        }\n        th.setAttribute('aria-sort', ariaSortValue);\n\n        // Add sort indicator if this is the current sort column\n        if (column.id === this.sortColumn) {\n          th.classList.add(this.sortDirection === 'asc' ? 'sorted-asc' : 'sorted-desc');\n          th.setAttribute('aria-label', `${column.label}, sorted ${this.sortDirection === 'asc' ? 'ascending' : 'descending'}`);\n        } else {\n          th.setAttribute('aria-label', `${column.label}, sortable`);\n        }\n\n        // Add click and keyboard event for sorting\n        const handleSort = () => {\n          // Announce sorting action to screen readers\n          announceToScreenReader(`Sorting by ${column.label} ${this.sortColumn === column.id && this.sortDirection === 'asc' ? 'descending' : 'ascending'}`);\n\n          // Toggle direction if already sorting by this column\n          if (this.sortColumn === column.id) {\n            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n          } else {\n            this.sortColumn = column.id;\n            this.sortDirection = 'asc';\n          }\n\n          // Re-render with new sort\n          this.render({ payments: this.currentData });\n        };\n\n        th.addEventListener('click', handleSort);\n\n        // Add keyboard support for sorting\n        th.addEventListener('keydown', (e) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            handleSort();\n          }\n        });\n      }\n\n      headerRow.appendChild(th);\n    });\n\n    thead.appendChild(headerRow);\n    return thead;\n  }\n\n  /**\n   * Create the table body\n   * @param {Array} payments - Payment data\n   * @returns {HTMLTableSectionElement} Table body element\n   */\n  createTableBody(payments) {\n    const tbody = document.createElement('tbody');\n\n    if (!payments || payments.length === 0) {\n      const emptyRow = document.createElement('tr');\n      const emptyCell = document.createElement('td');\n      emptyCell.colSpan = 6;\n      emptyCell.textContent = 'No payment data available';\n      emptyCell.className = 'empty-table-message';\n      emptyRow.appendChild(emptyCell);\n      tbody.appendChild(emptyRow);\n      return tbody;\n    }\n\n    // Create rows for each payment\n    payments.forEach((payment) => {\n      const row = document.createElement('tr');\n\n      // Add data cells\n      const cells = [\n        { value: payment.number },\n        { value: this.formatters.date(payment.date) },\n        { value: this.formatters.currency(payment.amount), raw: payment.amount },\n        { value: this.formatters.currency(payment.principal), raw: payment.principal },\n        { value: this.formatters.currency(payment.interest), raw: payment.interest },\n        { value: this.formatters.currency(payment.balance), raw: payment.balance },\n      ];\n\n      cells.forEach((cell, index) => {\n        const td = document.createElement('td');\n        td.textContent = cell.value;\n\n        // Add data attributes for sorting and filtering\n        if (cell.raw !== undefined) {\n          td.setAttribute('data-value', cell.raw);\n        }\n\n        // Add class for the column type\n        const columnTypes = ['number', 'date', 'amount', 'principal', 'interest', 'balance'];\n        td.classList.add(`col-${columnTypes[index]}`);\n\n        row.appendChild(td);\n      });\n\n      // Add data attributes to the row for filtering\n      row.setAttribute('data-payment-number', payment.number);\n      row.setAttribute('data-payment-year', payment.date.getFullYear());\n      row.setAttribute('data-payment-month', payment.date.getMonth() + 1);\n\n      tbody.appendChild(row);\n    });\n\n    return tbody;\n  }\n\n  /**\n   * Create pagination controls\n   * @param {number} totalItems - Total number of items\n   */\n  createPagination(totalItems) {\n    if (!this.container) return;\n\n    // Calculate total pages\n    const totalPages = Math.ceil(totalItems / this.pageSize);\n\n    // Don't show pagination if only one page\n    if (totalPages <= 1) {\n      return;\n    }\n\n    // Create pagination container\n    const pagination = document.createElement('nav');\n    pagination.className = 'pagination';\n    pagination.setAttribute('role', 'navigation');\n    pagination.setAttribute('aria-label', 'Amortization table pagination');\n\n    // Previous button\n    const prevButton = document.createElement('button');\n    prevButton.className = 'pagination-item';\n    prevButton.textContent = '«';\n    prevButton.setAttribute('aria-label', 'Go to previous page');\n    prevButton.disabled = this.currentPage <= 1;\n    prevButton.addEventListener('click', () => {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        announceToScreenReader(`Page ${this.currentPage} of ${totalPages}`);\n        this.render({ payments: this.currentData });\n      }\n    });\n    pagination.appendChild(prevButton);\n\n    // Page numbers\n    const maxVisiblePages = 5;\n    let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));\n    const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n\n    // Adjust start page if we're near the end\n    if (endPage - startPage + 1 < maxVisiblePages) {\n      startPage = Math.max(1, endPage - maxVisiblePages + 1);\n    }\n\n    // First page button if not visible\n    if (startPage > 1) {\n      const firstPageButton = document.createElement('button');\n      firstPageButton.className = 'pagination-item';\n      firstPageButton.textContent = '1';\n      firstPageButton.setAttribute('aria-label', 'Go to page 1');\n      firstPageButton.addEventListener('click', () => {\n        this.currentPage = 1;\n        announceToScreenReader(`Page 1 of ${totalPages}`);\n        this.render({ payments: this.currentData });\n      });\n      pagination.appendChild(firstPageButton);\n\n      // Ellipsis if needed\n      if (startPage > 2) {\n        const ellipsis = document.createElement('div');\n        ellipsis.className = 'pagination-ellipsis';\n        ellipsis.textContent = '...';\n        pagination.appendChild(ellipsis);\n      }\n    }\n\n    // Page buttons\n    for (let i = startPage; i <= endPage; i++) {\n      const pageButton = document.createElement('div');\n      pageButton.className = 'pagination-item';\n      if (i === this.currentPage) {\n        pageButton.classList.add('active');\n      }\n      pageButton.textContent = i;\n      pageButton.addEventListener('click', () => {\n        this.currentPage = i;\n        this.render({ payments: this.currentData });\n      });\n      pagination.appendChild(pageButton);\n    }\n\n    // Last page button if not visible\n    if (endPage < totalPages) {\n      // Ellipsis if needed\n      if (endPage < totalPages - 1) {\n        const ellipsis = document.createElement('div');\n        ellipsis.className = 'pagination-ellipsis';\n        ellipsis.textContent = '...';\n        pagination.appendChild(ellipsis);\n      }\n\n      const lastPageButton = document.createElement('div');\n      lastPageButton.className = 'pagination-item';\n      lastPageButton.textContent = totalPages;\n      lastPageButton.addEventListener('click', () => {\n        this.currentPage = totalPages;\n        this.render({ payments: this.currentData });\n      });\n      pagination.appendChild(lastPageButton);\n    }\n\n    // Next button\n    const nextButton = document.createElement('div');\n    nextButton.className = 'pagination-item';\n    nextButton.textContent = '»';\n    nextButton.addEventListener('click', () => {\n      if (this.currentPage < totalPages) {\n        this.currentPage++;\n        this.render({ payments: this.currentData });\n      }\n    });\n    pagination.appendChild(nextButton);\n\n    // Add pagination to container\n    this.container.appendChild(pagination);\n  }\n\n  /**\n   * Sort data by column\n   * @param {Array} data - Data to sort\n   * @param {string} column - Column to sort by\n   * @param {string} direction - Sort direction ('asc' or 'desc')\n   * @returns {Array} Sorted data\n   */\n  sortData(data, column, direction) {\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return [];\n    }\n\n    const sortedData = [...data];\n\n    sortedData.sort((a, b) => {\n      let valueA; let\n        valueB;\n\n      // Get values based on column\n      switch (column) {\n        case 'date':\n          valueA = a.date.getTime();\n          valueB = b.date.getTime();\n          break;\n        case 'number':\n        case 'amount':\n        case 'principal':\n        case 'interest':\n        case 'balance':\n          valueA = a[column];\n          valueB = b[column];\n          break;\n        default:\n          valueA = a.number;\n          valueB = b.number;\n      }\n\n      // Compare values\n      if (valueA < valueB) {\n        return direction === 'asc' ? -1 : 1;\n      }\n      if (valueA > valueB) {\n        return direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n\n    return sortedData;\n  }\n\n  /**\n   * Filter data based on criteria\n   * @param {Array} data - Data to filter\n   * @param {Object} filters - Filter criteria\n   * @returns {Array} Filtered data\n   */\n  filterData(data, filters) {\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return [];\n    }\n\n    if (!filters || Object.keys(filters).length === 0) {\n      return data;\n    }\n\n    return data.filter((payment) => {\n      // Filter by year\n      if (filters.year && payment.date.getFullYear() !== filters.year) {\n        return false;\n      }\n\n      // Filter by payment range\n      if (filters.paymentRange) {\n        const { min, max } = filters.paymentRange;\n        if (payment.amount < min || payment.amount > max) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  /**\n   * Highlight key information in the table\n   */\n  highlightKeyInformation() {\n    if (!this.container) return;\n\n    // Highlight rows with significant principal reduction\n    const rows = this.container.querySelectorAll('tbody tr');\n    rows.forEach((row) => {\n      const principalCell = row.querySelector('.col-principal');\n      const interestCell = row.querySelector('.col-interest');\n\n      if (principalCell && interestCell) {\n        const principal = parseFloat(principalCell.getAttribute('data-value') || 0);\n        const interest = parseFloat(interestCell.getAttribute('data-value') || 0);\n\n        // If principal is significantly higher than interest\n        if (principal > interest * 2) {\n          row.classList.add('highlight-principal');\n          principalCell.setAttribute('title', 'Significant principal reduction');\n        }\n\n        // If interest is higher than principal\n        if (interest > principal) {\n          row.classList.add('highlight-interest');\n          interestCell.setAttribute('title', 'Interest exceeds principal');\n        }\n      }\n    });\n\n    // Highlight milestone payments (e.g., every 12th payment)\n    rows.forEach((row) => {\n      const numberCell = row.querySelector('.col-number');\n      if (numberCell) {\n        const paymentNumber = parseInt(numberCell.textContent);\n        if (paymentNumber % 12 === 0) {\n          row.classList.add('highlight-milestone');\n          row.setAttribute('title', 'Annual milestone payment');\n        }\n      }\n    });\n  }\n\n  /**\n   * Update the table with new amortization schedule\n   * @param {Object} amortizationSchedule - Amortization schedule object\n   */\n  updateTable(amortizationSchedule) {\n    // Reset to first page when updating data\n    this.currentPage = 1;\n\n    // Reset filters\n    this.filters = {};\n\n    // Render with new data\n    this.render(amortizationSchedule);\n  }\n\n  /**\n   * Show error state\n   * @param {string} message - Error message to display\n   */\n  showError(message = 'Failed to load amortization data') {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"component-error\">\n        <div class=\"error-icon\">⚠️</div>\n        <div class=\"error-text\">${message}</div>\n        <button class=\"retry-button\" onclick=\"location.reload()\">Retry</button>\n      </div>\n    `;\n  }\n\n  /**\n   * Add performance information display\n   * @param {number} itemCount - Number of items being displayed\n   */\n  addPerformanceInfo(itemCount) {\n    const perfInfo = document.createElement('div');\n    perfInfo.className = 'performance-info';\n    perfInfo.innerHTML = `\n      <div class=\"perf-badge\">\n        <span class=\"perf-icon\">⚡</span>\n        <span class=\"perf-text\">Virtual Scrolling: ${itemCount.toLocaleString()} rows optimized</span>\n        <span class=\"perf-detail\">Rendering only visible items for optimal performance</span>\n      </div>\n    `;\n    this.container.appendChild(perfInfo);\n  }\n\n  /**\n   * Update performance information\n   * @param {number} itemCount - Number of items\n   */\n  updatePerformanceInfo(itemCount) {\n    const perfText = this.container.querySelector('.perf-text');\n    if (perfText) {\n      perfText.textContent = `Virtual Scrolling: ${itemCount.toLocaleString()} rows optimized`;\n    }\n  }\n\n  /**\n   * Add virtual table controls\n   */\n  addVirtualTableControls() {\n    const controls = document.createElement('div');\n    controls.className = 'virtual-table-controls';\n    controls.innerHTML = `\n      <div class=\"virtual-controls-row\">\n        <button class=\"btn-scroll-control\" id=\"scroll-to-top\">\n          <span>↑</span> Top\n        </button>\n        <button class=\"btn-scroll-control\" id=\"scroll-to-bottom\">\n          <span>↓</span> Bottom\n        </button>\n        <div class=\"scroll-indicator\">\n          <div class=\"scroll-progress\">\n            <div class=\"scroll-progress-bar\" style=\"width: 0%\"></div>\n          </div>\n          <span class=\"scroll-position\">0 / 0</span>\n        </div>\n        <button class=\"btn-scroll-control\" id=\"toggle-pagination\">\n          <span>📄</span> Switch to Pagination\n        </button>\n      </div>\n    `;\n\n    // Add event listeners\n    const scrollToTop = controls.querySelector('#scroll-to-top');\n    const scrollToBottom = controls.querySelector('#scroll-to-bottom');\n    const togglePagination = controls.querySelector('#toggle-pagination');\n\n    if (scrollToTop) {\n      scrollToTop.addEventListener('click', () => {\n        if (this.virtualTable) {\n          this.virtualTable.scrollToTop();\n        }\n      });\n    }\n\n    if (scrollToBottom) {\n      scrollToBottom.addEventListener('click', () => {\n        if (this.virtualTable) {\n          this.virtualTable.scrollToBottom();\n        }\n      });\n    }\n\n    if (togglePagination) {\n      togglePagination.addEventListener('click', () => {\n        this.useVirtualScrolling = false;\n        this.render({ payments: this.currentData });\n      });\n    }\n\n    this.container.appendChild(controls);\n  }\n\n  /**\n   * Update scroll indicator\n   * @param {Object} scrollInfo - Scroll information from virtual table\n   */\n  updateScrollIndicator(scrollInfo) {\n    const progressBar = this.container.querySelector('.scroll-progress-bar');\n    const positionText = this.container.querySelector('.scroll-position');\n\n    if (progressBar && scrollInfo.scrollHeight > 0) {\n      const progress = (scrollInfo.scrollTop / (scrollInfo.scrollHeight - scrollInfo.clientHeight)) * 100;\n      progressBar.style.width = `${Math.min(100, Math.max(0, progress))}%`;\n    }\n\n    if (positionText) {\n      const currentItem = Math.floor(scrollInfo.scrollTop / (scrollInfo.scrollHeight / scrollInfo.totalCount)) + 1;\n      positionText.textContent = `${currentItem} / ${scrollInfo.totalCount}`;\n    }\n  }\n\n  /**\n   * Animate virtual table reveal\n   * @param {HTMLElement} container - Virtual table container\n   */\n  _animateVirtualTableReveal(container) {\n    animationManager.respectfulAnimate(() => {\n      container.style.opacity = '0';\n      container.style.transform = 'translateY(20px) scale(0.98)';\n      container.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';\n\n      setTimeout(() => {\n        container.style.opacity = '1';\n        container.style.transform = 'translateY(0) scale(1)';\n      }, 100);\n\n      // Animate performance badge\n      setTimeout(() => {\n        const perfBadge = this.container.querySelector('.perf-badge');\n        if (perfBadge) {\n          perfBadge.style.opacity = '0';\n          perfBadge.style.transform = 'translateX(-20px)';\n          perfBadge.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';\n\n          setTimeout(() => {\n            perfBadge.style.opacity = '1';\n            perfBadge.style.transform = 'translateX(0)';\n          }, 50);\n        }\n      }, 300);\n\n      // Animate controls\n      setTimeout(() => {\n        const controls = this.container.querySelector('.virtual-table-controls');\n        if (controls) {\n          controls.style.opacity = '0';\n          controls.style.transform = 'translateY(10px)';\n          controls.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';\n\n          setTimeout(() => {\n            controls.style.opacity = '1';\n            controls.style.transform = 'translateY(0)';\n          }, 50);\n        }\n      }, 500);\n    }, () => {\n      // Fallback for reduced motion\n      container.style.opacity = '1';\n      container.style.transform = 'none';\n\n      const perfBadge = this.container.querySelector('.perf-badge');\n      const controls = this.container.querySelector('.virtual-table-controls');\n\n      if (perfBadge) {\n        perfBadge.style.opacity = '1';\n        perfBadge.style.transform = 'none';\n      }\n\n      if (controls) {\n        controls.style.opacity = '1';\n        controls.style.transform = 'none';\n      }\n    });\n  }\n\n  /**\n   * Clear the table\n   */\n  clear() {\n    // Destroy virtual table if it exists\n    if (this.virtualTable) {\n      this.virtualTable.destroy();\n      this.virtualTable = null;\n    }\n\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n\n    // Reset state\n    this.currentPage = 1;\n    this.currentData = [];\n    this.isVirtualMode = false;\n  }\n\n  /**\n   * Animate table reveal with staggered row animations\n   * @param {HTMLTableElement} table - Table element\n   * @param {number} rowCount - Number of rows to animate\n   * @private\n   */\n  _animateTableReveal(table, rowCount) {\n    animationManager.respectfulAnimate(() => {\n      // First animate the table container\n      const tableContainer = table.closest('.table-container');\n      if (tableContainer) {\n        tableContainer.style.opacity = '0';\n        tableContainer.style.transform = 'translateY(20px)';\n        tableContainer.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';\n\n        setTimeout(() => {\n          tableContainer.style.opacity = '1';\n          tableContainer.style.transform = 'translateY(0)';\n        }, 100);\n      }\n\n      // Then animate table rows with stagger\n      setTimeout(() => {\n        animationManager.animateTableRows(table, {\n          delay: 200,\n          staggerDelay: 50,\n        });\n      }, 300);\n\n      // Add subtle hover animations after initial reveal\n      setTimeout(() => {\n        this._addTableInteractions(table);\n      }, 300 + (rowCount * 50));\n    }, () => {\n      // Fallback for reduced motion\n      const tableContainer = table.closest('.table-container');\n      if (tableContainer) {\n        tableContainer.style.opacity = '1';\n        tableContainer.style.transform = 'none';\n      }\n\n      const rows = table.querySelectorAll('tbody tr');\n      rows.forEach((row) => {\n        row.style.opacity = '1';\n        row.style.transform = 'none';\n      });\n    });\n  }\n\n  /**\n   * Add interactive animations to table elements\n   * @param {HTMLTableElement} table - Table element\n   * @private\n   */\n  _addTableInteractions(table) {\n    // Add hover effects to table rows\n    const rows = table.querySelectorAll('tbody tr');\n    rows.forEach((row) => {\n      row.addEventListener('mouseenter', () => {\n        if (!animationManager.prefersReducedMotion()) {\n          row.style.transform = 'translateX(4px)';\n          row.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';\n          row.style.transition = 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)';\n        }\n      });\n\n      row.addEventListener('mouseleave', () => {\n        if (!animationManager.prefersReducedMotion()) {\n          row.style.transform = '';\n          row.style.boxShadow = '';\n        }\n      });\n    });\n\n    // Add click animations to sortable headers\n    const sortableHeaders = table.querySelectorAll('th[data-sort]');\n    sortableHeaders.forEach((header) => {\n      header.addEventListener('click', (event) => {\n        if (!animationManager.prefersReducedMotion()) {\n          animationManager.createRippleEffect(header, event);\n        }\n      });\n    });\n\n    // Add smooth transitions to pagination buttons\n    const paginationButtons = this.container.querySelectorAll('.pagination button');\n    paginationButtons.forEach((button) => {\n      button.addEventListener('click', (event) => {\n        if (!animationManager.prefersReducedMotion()) {\n          animationManager.createRippleEffect(button, event);\n        }\n      });\n    });\n  }\n}\n\nexport default AmortizationTable;\n"],"names":["VirtualScroller","constructor","options","this","container","itemHeight","bufferSize","renderItem","document","createElement","onScroll","data","visibleItems","startIndex","endIndex","containerHeight","visibleCount","viewport","content","spacerTop","spacerBottom","lastScrollTime","scrollTimeout","isScrolling","init","Error","createViewport","bindEvents","updateDimensions","innerHTML","className","style","cssText","appendChild","addEventListener","handleScroll","bind","passive","window","ResizeObserver","resizeObserver","render","observe","now","Date","clearTimeout","updateVisibleRange","setTimeout","scrollTop","rect","getBoundingClientRect","height","Math","ceil","length","floor","max","min","setData","topSpacerHeight","bottomSpacerHeight","clearVisibleItems","fragment","createDocumentFragment","i","item","element","setAttribute","trim","insertBefore","Array","from","querySelectorAll","forEach","remove","scrollToIndex","index","behavior","scrollTo","top","scrollToTop","scrollToBottom","getScrollInfo","scrollHeight","clientHeight","totalCount","setItemHeight","refresh","getMetrics","totalItems","renderedRange","destroy","disconnect","removeEventListener","VirtualTable","super","columns","headerHeight","showHeader","createTableStructure","classList","add","createHeader","header","column","cell","flex","minWidth","maxWidth","textContent","title","key","sortable","cursor","handleSort","columnKey","renderTableRow","row","backgroundColor","value","formatter","HTMLElement","String","getElementById","formatters","currency","percentage","number","date","pageSize","currentPage","sortColumn","sortDirection","filters","currentData","useVirtualScrolling","virtualScrollThreshold","virtualTable","isVirtualMode","createFilterControls","filterControls","applyButton","querySelector","resetButton","applyFilters","resetFilters","yearFilter","minPayment","parseFloat","maxPayment","Infinity","year","parseInt","paymentRange","payments","updateYearFilterOptions","Set","map","payment","getFullYear","sort","option","showLoadingSkeleton","_","join","amortizationSchedule","filteredData","filterData","sortedData","sortData","shouldUseVirtual","switchToVirtualMode","switchToPaginatedMode","updateVirtualTable","renderPaginatedTable","addPerformanceInfo","virtualContainer","toString","info","updateScrollIndicator","addVirtualTableControls","_animateVirtualTableReveal","updatePerformanceInfo","tableContainer","table","caption","tableHeader","createTableHeader","paginatedData","slice","tableBody","createTableBody","enhanceTableAccessibility","createPagination","highlightKeyInformation","_animateTableReveal","thead","headerRow","id","label","th","ariaSortValue","announceToScreenReader","e","preventDefault","tbody","emptyRow","emptyCell","colSpan","amount","raw","principal","interest","balance","td","undefined","getMonth","totalPages","pagination","prevButton","disabled","startPage","maxVisiblePages","endPage","firstPageButton","ellipsis","pageButton","lastPageButton","nextButton","direction","isArray","a","b","valueA","valueB","getTime","Object","keys","filter","rows","principalCell","interestCell","getAttribute","numberCell","updateTable","showError","message","itemCount","perfInfo","toLocaleString","perfText","controls","togglePagination","scrollInfo","progressBar","positionText","progress","width","currentItem","animationManager","respectfulAnimate","opacity","transform","transition","perfBadge","clear","rowCount","closest","animateTableRows","delay","staggerDelay","_addTableInteractions","prefersReducedMotion","boxShadow","event","createRippleEffect","button"],"sourceRoot":""}