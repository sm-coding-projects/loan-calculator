{"version":3,"file":"js/main-30c3a00b.babbf54c8e19507ff46f.js","mappings":"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","sources":["webpack://loan-calculator/./src/js/services/storage.service.js","webpack://loan-calculator/./src/js/models/loan.model.js","webpack://loan-calculator/./src/js/utils/formatters.js","webpack://loan-calculator/./src/js/components/guidance-manager.js","webpack://loan-calculator/./src/js/components/results-display.js","webpack://loan-calculator/./src/js/models/amortization.model.js","webpack://loan-calculator/./src/js/utils/validators.js","webpack://loan-calculator/./src/js/components/market-rates.js","webpack://loan-calculator/./src/js/components/calculator-form.js","webpack://loan-calculator/./src/js/utils/translations.js","webpack://loan-calculator/./src/js/utils/tooltips.js","webpack://loan-calculator/./src/js/components/charts.js","webpack://loan-calculator/./src/js/components/financial-glossary.js","webpack://loan-calculator/./src/js/utils/accessibility.js","webpack://loan-calculator/./src/js/services/calculation-manager.service.js","webpack://loan-calculator/./src/js/services/language.service.js","webpack://loan-calculator/./src/js/components/settings-panel.js","webpack://loan-calculator/./src/js/components/saved-calculations-manager.js"],"sourcesContent":["/**\n * Storage Service\n * Manages saving and retrieving loan calculations\n * Implements requirements 3.1, 3.2, 3.6\n */\n\nimport Loan from '../models/loan.model';\nimport { AmortizationSchedule } from '../models/amortization.model';\n\nclass StorageService {\n  /**\n   * Create a new storage service\n   * @param {Object} options - Configuration options\n   * @param {string} [options.storageKey] - Key used for localStorage\n   * @param {string} [options.version] - Data version for compatibility\n   */\n  constructor(options = {}) {\n    this.storageKey = options.storageKey || 'loan-calculator-data';\n    this.version = options.version || '1.0';\n\n    // Initialize storage if needed\n    this._initializeStorage();\n  }\n\n  /**\n   * Initialize the storage with default structure if it doesn't exist\n   * @private\n   */\n  _initializeStorage() {\n    try {\n      // Check if storage exists\n      const data = localStorage.getItem(this.storageKey);\n\n      // If not, create default structure\n      if (!data) {\n        const defaultData = {\n          version: this.version,\n          lastUpdated: new Date().toISOString(),\n          calculations: [],\n        };\n\n        localStorage.setItem(this.storageKey, JSON.stringify(defaultData));\n      } else {\n        // If it exists but has an old version, migrate it\n        const parsedData = JSON.parse(data);\n        if (parsedData.version !== this.version) {\n          this._migrateData(parsedData);\n        }\n      }\n    } catch (error) {\n      console.error('Error initializing storage:', error);\n    }\n  }\n\n  /**\n   * Migrate data from an older version to the current version\n   * @param {Object} oldData - Data in the old format\n   * @private\n   */\n  _migrateData(oldData) {\n    // This is where version-specific migrations would happen\n    // For now, we'll just update the version and save it back\n\n    const migratedData = {\n      ...oldData,\n      version: this.version,\n      lastUpdated: new Date().toISOString(),\n    };\n\n    // Ensure calculations array exists\n    if (!migratedData.calculations) {\n      migratedData.calculations = [];\n    }\n\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(migratedData));\n      console.log(`Storage data migrated to version ${this.version}`);\n    } catch (error) {\n      console.error('Error migrating storage data:', error);\n    }\n  }\n\n  /**\n   * Get all stored data\n   * @returns {Object} The full storage data object\n   * @private\n   */\n  _getData() {\n    try {\n      const data = localStorage.getItem(this.storageKey);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Error reading from storage:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Save data to storage\n   * @param {Object} data - Data to save\n   * @returns {boolean} Success status\n   * @private\n   */\n  _saveData(data) {\n    try {\n      // Update the last updated timestamp\n      data.lastUpdated = new Date().toISOString();\n\n      // Save to localStorage\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\n      return true;\n    } catch (error) {\n      // Handle storage errors (e.g., quota exceeded)\n      console.error('Error saving to storage:', error);\n\n      // If it's a quota error, try to free up space\n      if (error.name === 'QuotaExceededError'\n          || error.name === 'NS_ERROR_DOM_QUOTA_REACHED'\n          || error.code === 22) {\n        this._handleStorageLimit();\n      }\n\n      return false;\n    }\n  }\n\n  /**\n   * Handle storage limit errors by removing oldest calculations\n   * @private\n   */\n  _handleStorageLimit() {\n    try {\n      const data = this._getData();\n\n      if (data && data.calculations && data.calculations.length > 0) {\n        // Sort calculations by date (oldest first)\n        data.calculations.sort((a, b) => new Date(a.updatedAt) - new Date(b.updatedAt));\n\n        // Remove the oldest calculation\n        data.calculations.shift();\n\n        // Try to save again\n        this._saveData(data);\n\n        console.warn('Storage limit reached. Removed oldest calculation to free space.');\n      }\n    } catch (error) {\n      console.error('Error handling storage limit:', error);\n    }\n  }\n\n  /**\n   * Save a loan calculation to storage\n   * @param {Loan} loan - Loan object to save\n   * @param {AmortizationSchedule} [amortizationSchedule] - Optional amortization schedule\n   * @returns {string} ID of the saved calculation or empty string if failed\n   */\n  saveCalculation(loan, amortizationSchedule = null) {\n    try {\n      if (!loan) {\n        throw new Error('No loan data provided');\n      }\n\n      // Get current data\n      const data = this._getData();\n      if (!data) {\n        throw new Error('Could not access storage');\n      }\n\n      // Prepare calculation object\n      const calculationData = {\n        loan: loan.toJSON(),\n        amortizationSchedule: amortizationSchedule ? amortizationSchedule.toJSON() : null,\n        savedAt: new Date().toISOString(),\n      };\n\n      // Check if this is an update or a new calculation\n      const existingIndex = data.calculations.findIndex((calc) => calc.loan.id === loan.id);\n\n      if (existingIndex >= 0) {\n        // Update existing calculation\n        data.calculations[existingIndex] = calculationData;\n      } else {\n        // Add new calculation\n        data.calculations.push(calculationData);\n      }\n\n      // Save back to storage\n      if (this._saveData(data)) {\n        return loan.id;\n      }\n      throw new Error('Failed to save calculation');\n    } catch (error) {\n      console.error('Error saving calculation:', error);\n      return '';\n    }\n  }\n\n  /**\n   * Get all saved calculations\n   * @returns {Array} Array of loan objects\n   */\n  getCalculations() {\n    try {\n      const data = this._getData();\n\n      if (!data || !data.calculations) {\n        return [];\n      }\n\n      // Convert stored JSON back to Loan objects\n      return data.calculations.map((calc) => {\n        const loan = Loan.fromJSON(calc.loan);\n        return {\n          loan,\n          savedAt: new Date(calc.savedAt),\n        };\n      });\n    } catch (error) {\n      console.error('Error retrieving calculations:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get a specific calculation by ID\n   * @param {string} id - ID of the calculation to retrieve\n   * @returns {Object|null} Object with loan and amortizationSchedule properties, or null if not found\n   */\n  getCalculationById(id) {\n    try {\n      if (!id) {\n        throw new Error('No ID provided');\n      }\n\n      const data = this._getData();\n\n      if (!data || !data.calculations) {\n        return null;\n      }\n\n      // Find the calculation with the matching ID\n      const calculationData = data.calculations.find((calc) => calc.loan.id === id);\n\n      if (!calculationData) {\n        return null;\n      }\n\n      // Convert stored JSON back to objects\n      const loan = Loan.fromJSON(calculationData.loan);\n      let amortizationSchedule = null;\n\n      if (calculationData.amortizationSchedule) {\n        amortizationSchedule = AmortizationSchedule.fromJSON(\n          calculationData.amortizationSchedule,\n          loan,\n        );\n      }\n\n      return {\n        loan,\n        amortizationSchedule,\n        savedAt: new Date(calculationData.savedAt),\n      };\n    } catch (error) {\n      console.error('Error retrieving calculation by ID:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update an existing calculation\n   * @param {string} id - ID of the calculation to update\n   * @param {Loan} updatedLoan - Updated loan object\n   * @param {AmortizationSchedule} [updatedSchedule] - Updated amortization schedule\n   * @returns {boolean} Success status\n   */\n  updateCalculation(id, updatedLoan, updatedSchedule = null) {\n    try {\n      if (!id || !updatedLoan) {\n        throw new Error('ID and updated loan data are required');\n      }\n\n      // Ensure the ID matches\n      if (updatedLoan.id !== id) {\n        updatedLoan.id = id;\n      }\n\n      // Use the save method to update\n      const result = this.saveCalculation(updatedLoan, updatedSchedule);\n      return result === id;\n    } catch (error) {\n      console.error('Error updating calculation:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Delete a calculation by ID\n   * @param {string} id - ID of the calculation to delete\n   * @returns {boolean} Success status\n   */\n  deleteCalculation(id) {\n    try {\n      if (!id) {\n        throw new Error('No ID provided');\n      }\n\n      const data = this._getData();\n\n      if (!data || !data.calculations) {\n        return false;\n      }\n\n      // Find the index of the calculation with the matching ID\n      const index = data.calculations.findIndex((calc) => calc.loan.id === id);\n\n      if (index === -1) {\n        return false;\n      }\n\n      // Remove the calculation\n      data.calculations.splice(index, 1);\n\n      // Save back to storage\n      return this._saveData(data);\n    } catch (error) {\n      console.error('Error deleting calculation:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all saved calculations\n   * @returns {boolean} Success status\n   */\n  clearAllCalculations() {\n    try {\n      const data = this._getData();\n\n      if (!data) {\n        return false;\n      }\n\n      // Clear the calculations array\n      data.calculations = [];\n\n      // Save back to storage\n      return this._saveData(data);\n    } catch (error) {\n      console.error('Error clearing calculations:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if local storage is available\n   * @returns {boolean} Whether storage is available\n   */\n  isStorageAvailable() {\n    try {\n      const testKey = '__storage_test__';\n      localStorage.setItem(testKey, testKey);\n      const result = localStorage.getItem(testKey) === testKey;\n      localStorage.removeItem(testKey);\n      return result;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Get storage usage statistics\n   * @returns {Object} Storage statistics including used space, available space, and item count\n   */\n  getStorageStats() {\n    try {\n      // Get all data\n      const allData = this._getData();\n      const serializedData = JSON.stringify(allData);\n\n      // Calculate size in bytes\n      const usedBytes = new Blob([serializedData]).size;\n\n      // Estimate total available space (5MB is typical for most browsers)\n      const totalBytes = 5 * 1024 * 1024;\n\n      return {\n        usedBytes,\n        usedKB: Math.round(usedBytes / 1024),\n        totalBytes,\n        totalKB: Math.round(totalBytes / 1024),\n        percentUsed: Math.round((usedBytes / totalBytes) * 100),\n        itemCount: allData && allData.calculations ? allData.calculations.length : 0,\n        isNearingLimit: usedBytes > (totalBytes * 0.8), // Warning at 80% usage\n      };\n    } catch (error) {\n      console.error('Error calculating storage stats:', error);\n      return {\n        usedBytes: 0,\n        usedKB: 0,\n        totalBytes: 0,\n        totalKB: 0,\n        percentUsed: 0,\n        itemCount: 0,\n        isNearingLimit: false,\n      };\n    }\n  }\n}\n\nexport default StorageService;\n","/**\n * Loan Model\n * Represents a loan with its parameters and calculations\n * Implements requirements 1.1, 1.2, 1.3, 1.5, 1.6, 4.3, 5.5\n */\n\n/**\n * Valid loan types and their default parameters\n */\nexport const LOAN_TYPES = {\n  mortgage: {\n    defaultTerm: 360, // 30 years in months\n    defaultRate: 4.5, // 4.5%\n    minAmount: 10000,\n    maxAmount: 10000000,\n    description: 'Home Mortgage',\n  },\n  auto: {\n    defaultTerm: 60, // 5 years in months\n    defaultRate: 5.0, // 5.0%\n    minAmount: 1000,\n    maxAmount: 200000,\n    description: 'Auto Loan',\n  },\n  personal: {\n    defaultTerm: 36, // 3 years in months\n    defaultRate: 10.0, // 10.0%\n    minAmount: 1000,\n    maxAmount: 50000,\n    description: 'Personal Loan',\n  },\n  student: {\n    defaultTerm: 120, // 10 years in months\n    defaultRate: 5.5, // 5.5%\n    minAmount: 1000,\n    maxAmount: 500000,\n    description: 'Student Loan',\n  },\n};\n\n/**\n * Valid payment frequencies\n */\nexport const PAYMENT_FREQUENCIES = {\n  monthly: {\n    paymentsPerYear: 12,\n    description: 'Monthly',\n  },\n  'bi-weekly': {\n    paymentsPerYear: 26,\n    description: 'Bi-Weekly',\n  },\n  weekly: {\n    paymentsPerYear: 52,\n    description: 'Weekly',\n  },\n};\n\nclass Loan {\n  /**\n   * Create a new loan instance\n   * @param {Object} options - Loan parameters\n   * @param {string} [options.name] - Name for this loan calculation\n   * @param {string} [options.type] - Loan type (mortgage, auto, personal, student)\n   * @param {number} [options.principal] - Principal loan amount\n   * @param {number} [options.interestRate] - Annual interest rate (percentage)\n   * @param {number} [options.term] - Loan term in months\n   * @param {string} [options.paymentFrequency] - Payment frequency (monthly, bi-weekly, weekly)\n   * @param {number} [options.downPayment] - Down payment amount\n   * @param {number} [options.additionalPayment] - Additional payment per period\n   * @param {Date} [options.startDate] - Loan start date\n   */\n  constructor(options = {}) {\n    // If this is a deserialized object, preserve the original ID\n    this.id = options.id || this.generateUniqueId();\n\n    // Basic loan information\n    this.name = options.name || 'Unnamed Calculation';\n    this.type = this.validateLoanType(options.type || 'mortgage');\n\n    // Set default values based on loan type if not provided\n    const typeDefaults = LOAN_TYPES[this.type];\n\n    // Financial parameters\n    this.principal = this.validateNumber(options.principal, typeDefaults.minAmount, typeDefaults.minAmount, typeDefaults.maxAmount);\n    this.interestRate = this.validateNumber(options.interestRate, typeDefaults.defaultRate, 0, 30);\n    this.term = this.validateNumber(options.term, typeDefaults.defaultTerm, 1, 600); // Max 50 years\n    this.paymentFrequency = this.validatePaymentFrequency(options.paymentFrequency || 'monthly');\n    this.downPayment = this.validateNumber(options.downPayment, 0, 0, this.principal);\n    this.additionalPayment = this.validateNumber(options.additionalPayment, 0, 0);\n    this.inflationRate = this.validateNumber(options.inflationRate, 2.5, 0, 20); // Default 2.5% inflation\n\n    // Dates\n    this.startDate = options.startDate instanceof Date ? options.startDate : new Date();\n    this.createdAt = options.createdAt instanceof Date ? options.createdAt : new Date();\n    this.updatedAt = options.updatedAt instanceof Date ? options.updatedAt : new Date();\n\n    // Validate the entire loan object\n    // Validation warnings are stored in this.validate().warnings if needed\n    this.validate();\n  }\n\n  /**\n   * Calculate the total loan amount (principal minus down payment)\n   * @returns {number} Total loan amount\n   */\n  totalLoanAmount() {\n    return Math.max(0, this.principal - this.downPayment);\n  }\n\n  /**\n   * Calculate the total number of payments based on term and payment frequency\n   * @returns {number} Total number of payments\n   */\n  numberOfPayments() {\n    const { paymentsPerYear } = PAYMENT_FREQUENCIES[this.paymentFrequency];\n    return Math.ceil(this.term * paymentsPerYear / 12);\n  }\n\n  /**\n   * Calculate the periodic interest rate based on payment frequency\n   * @returns {number} Periodic interest rate as a decimal\n   */\n  periodicInterestRate() {\n    const { paymentsPerYear } = PAYMENT_FREQUENCIES[this.paymentFrequency];\n    return (this.interestRate / 100) / paymentsPerYear;\n  }\n\n  /**\n   * Calculate the periodic payment amount\n   * @returns {number} Payment amount per period\n   */\n  paymentAmount() {\n    const P = this.totalLoanAmount();\n    const r = this.periodicInterestRate();\n    const n = this.numberOfPayments();\n\n    // Handle edge cases\n    if (P <= 0) return 0;\n    if (r <= 0) return P / n;\n\n    // Standard loan payment formula: P * r * (1 + r)^n / ((1 + r)^n - 1)\n    const paymentAmount = P * r * (1 + r) ** n / ((1 + r) ** n - 1);\n    return paymentAmount;\n  }\n\n  /**\n   * Calculate the total interest paid over the life of the loan\n   * @returns {number} Total interest\n   */\n  totalInterest() {\n    return (this.paymentAmount() * this.numberOfPayments()) - this.totalLoanAmount();\n  }\n\n  /**\n   * Calculate the payoff date\n   * @returns {Date} Expected payoff date\n   */\n  payoffDate() {\n    const payoffDate = new Date(this.startDate);\n\n    switch (this.paymentFrequency) {\n      case 'monthly':\n        payoffDate.setMonth(payoffDate.getMonth() + this.term);\n        break;\n      case 'bi-weekly':\n        payoffDate.setDate(payoffDate.getDate() + Math.ceil(this.numberOfPayments() * 14));\n        break;\n      case 'weekly':\n        payoffDate.setDate(payoffDate.getDate() + Math.ceil(this.numberOfPayments() * 7));\n        break;\n      default:\n        payoffDate.setMonth(payoffDate.getMonth() + this.term);\n        break;\n    }\n\n    return payoffDate;\n  }\n\n  /**\n   * Generate a unique ID for this loan\n   * @returns {string} Unique ID\n   */\n  generateUniqueId() {\n    return `loan_${Date.now()}_${Math.floor(Math.random() * 1000000)}`;\n  }\n\n  /**\n   * Validate loan type\n   * @param {string} type - Loan type to validate\n   * @returns {string} Valid loan type\n   * @throws {Error} If loan type is invalid\n   */\n  validateLoanType(type) {\n    if (!LOAN_TYPES[type]) {\n      const validTypes = Object.keys(LOAN_TYPES).join(', ');\n      throw new Error(`Invalid loan type: ${type}. Valid types are: ${validTypes}`);\n    }\n    return type;\n  }\n\n  /**\n   * Validate payment frequency\n   * @param {string} frequency - Payment frequency to validate\n   * @returns {string} Valid payment frequency\n   * @throws {Error} If payment frequency is invalid\n   */\n  validatePaymentFrequency(frequency) {\n    if (!PAYMENT_FREQUENCIES[frequency]) {\n      const validFrequencies = Object.keys(PAYMENT_FREQUENCIES).join(', ');\n      throw new Error(`Invalid payment frequency: ${frequency}. Valid frequencies are: ${validFrequencies}`);\n    }\n    return frequency;\n  }\n\n  /**\n   * Validate a numeric value\n   * @param {number} value - Value to validate\n   * @param {number} defaultValue - Default value if invalid\n   * @param {number} [min] - Minimum allowed value\n   * @param {number} [max] - Maximum allowed value\n   * @returns {number} Validated number\n   */\n  validateNumber(value, defaultValue, min = null, max = null) {\n    // Convert to number if string\n    const num = typeof value === 'string' ? parseFloat(value) : value;\n\n    // Check if it's a valid number\n    if (isNaN(num) || typeof num !== 'number') {\n      return defaultValue;\n    }\n\n    // Apply min/max constraints\n    if (min !== null && num < min) return min;\n    if (max !== null && num > max) return max;\n\n    return num;\n  }\n\n  /**\n   * Validate the entire loan object\n   * @returns {Object} Validation result with isValid flag and warnings array\n   */\n  validate() {\n    const warnings = [];\n\n    // Check principal amount\n    if (this.principal <= 0) {\n      warnings.push('Principal amount must be greater than zero');\n    }\n\n    // Check interest rate\n    if (this.interestRate < 0) {\n      warnings.push('Interest rate cannot be negative');\n    } else if (this.interestRate > 20) {\n      warnings.push('Warning: Interest rate is unusually high');\n    }\n\n    // Check term\n    if (this.term <= 0) {\n      warnings.push('Loan term must be greater than zero');\n    }\n\n    // Check down payment\n    if (this.downPayment < 0) {\n      warnings.push('Down payment cannot be negative');\n    } else if (this.downPayment >= this.principal) {\n      warnings.push('Down payment cannot be greater than or equal to the principal');\n    }\n\n    // Check additional payment\n    if (this.additionalPayment < 0) {\n      warnings.push('Additional payment cannot be negative');\n    } else if (this.additionalPayment > this.paymentAmount() && this.paymentAmount() > 0) {\n      warnings.push('Additional payment is greater than the regular payment');\n    }\n\n    return {\n      isValid: warnings.length === 0,\n      warnings,\n    };\n  }\n\n  /**\n   * Update loan parameters\n   * @param {Object} updates - Parameters to update\n   * @returns {Loan} Updated loan instance\n   */\n  update(updates = {}) {\n    // Ensure we have a fresh timestamp that's definitely newer\n    const now = new Date();\n\n    // Create a new loan with merged parameters\n    const updatedLoan = new Loan({\n      ...this.toJSON(),\n      ...updates,\n      // Force the updatedAt to be a new Date instance\n      updatedAt: now,\n    });\n\n    // Copy the ID to maintain identity\n    updatedLoan.id = this.id;\n    updatedLoan.createdAt = this.createdAt;\n\n    // Ensure the updatedAt is definitely newer by adding a small delay if needed\n    if (updatedLoan.updatedAt <= this.updatedAt) {\n      updatedLoan.updatedAt = new Date(this.updatedAt.getTime() + 1);\n    }\n\n    return updatedLoan;\n  }\n\n  /**\n   * Convert loan to JSON for storage\n   * @returns {Object} JSON representation\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      type: this.type,\n      principal: this.principal,\n      interestRate: this.interestRate,\n      term: this.term,\n      paymentFrequency: this.paymentFrequency,\n      downPayment: this.downPayment,\n      additionalPayment: this.additionalPayment,\n      inflationRate: this.inflationRate,\n      startDate: this.startDate.toISOString(),\n      createdAt: this.createdAt.toISOString(),\n      updatedAt: this.updatedAt.toISOString(),\n    };\n  }\n\n  /**\n   * Calculate the impact of additional payments on the loan\n   * Implements requirement 1.5\n   * @param {number} additionalPayment - Additional payment amount per period\n   * @returns {Object} Impact of additional payments including time saved and interest saved\n   */\n  calculateAdditionalPaymentImpact(additionalPayment = this.additionalPayment) {\n    // Create a baseline loan with no additional payments\n    const baselineLoan = this.update({ additionalPayment: 0 });\n\n    // Create a loan with the specified additional payment\n    const enhancedLoan = this.update({ additionalPayment });\n\n    // Dynamically import AmortizationSchedule to avoid circular dependency\n    return import('./amortization.model').then(({ AmortizationSchedule }) => {\n      // Calculate amortization schedules for both loans\n      const baselineSchedule = new AmortizationSchedule(baselineLoan);\n      const enhancedSchedule = new AmortizationSchedule(enhancedLoan);\n\n      // Calculate time saved\n      const baselinePayments = baselineSchedule.payments.length;\n      const enhancedPayments = enhancedSchedule.payments.length;\n      const paymentsSaved = baselinePayments - enhancedPayments;\n\n      // Calculate interest saved\n      const baselineInterest = baselineSchedule.totalInterest();\n      const enhancedInterest = enhancedSchedule.totalInterest();\n      const interestSaved = baselineInterest - enhancedInterest;\n\n      // Calculate time saved in months/years\n      let timeSavedMonths = 0;\n      let timeSavedYears = 0;\n\n      switch (this.paymentFrequency) {\n        case 'monthly':\n          timeSavedMonths = paymentsSaved;\n          break;\n        case 'bi-weekly':\n          timeSavedMonths = Math.round(paymentsSaved * 12 / 26);\n          break;\n        case 'weekly':\n          timeSavedMonths = Math.round(paymentsSaved * 12 / 52);\n          break;\n        default:\n          timeSavedMonths = paymentsSaved;\n          break;\n      }\n\n      timeSavedYears = Math.floor(timeSavedMonths / 12);\n      timeSavedMonths %= 12;\n\n      // Calculate new payoff date\n      const newPayoffDate = enhancedSchedule.payoffDate();\n\n      return {\n        paymentsSaved,\n        interestSaved,\n        timeSavedMonths,\n        timeSavedYears,\n        newPayoffDate,\n        originalTerm: this.term,\n        newTerm: this.term - timeSavedMonths - (timeSavedYears * 12),\n        originalPayment: baselineLoan.paymentAmount(),\n        newPayment: enhancedLoan.paymentAmount() + additionalPayment,\n        originalTotalInterest: baselineInterest,\n        newTotalInterest: enhancedInterest,\n      };\n    });\n  }\n\n  /**\n   * Calculate refinance comparison between current loan and new options\n   * Implements requirement 5.5\n   * @param {Object} newLoanOptions - Options for the new loan\n   * @param {number} [newLoanOptions.principal] - New loan principal (defaults to current remaining balance)\n   * @param {number} newLoanOptions.interestRate - New interest rate\n   * @param {number} [newLoanOptions.term] - New loan term in months\n   * @param {string} [newLoanOptions.paymentFrequency] - New payment frequency\n   * @param {number} [newLoanOptions.closingCosts] - Closing costs for refinancing\n   * @param {number} [newLoanOptions.additionalPayment] - Additional payment for new loan\n   * @returns {Object} Refinance comparison results\n   */\n  calculateRefinance(newLoanOptions) {\n    if (!newLoanOptions.interestRate && newLoanOptions.interestRate !== 0) {\n      throw new Error('New interest rate is required for refinance calculation');\n    }\n\n    // Return a promise that resolves with the refinance calculation\n    return import('./amortization.model').then(({ AmortizationSchedule }) => {\n      // Create amortization schedule for current loan to get current balance\n      const currentSchedule = new AmortizationSchedule(this);\n      const currentBalance = currentSchedule.payments.length > 0\n        ? currentSchedule.payments[0].balance : this.totalLoanAmount();\n\n      // Set up new loan options with defaults\n      const refinanceOptions = {\n        principal: newLoanOptions.principal || currentBalance,\n        interestRate: newLoanOptions.interestRate,\n        term: newLoanOptions.term || this.term,\n        paymentFrequency: newLoanOptions.paymentFrequency || this.paymentFrequency,\n        additionalPayment: newLoanOptions.additionalPayment || 0,\n        startDate: new Date(),\n        name: 'Refinance Option',\n      };\n\n      // Create new loan\n      const newLoan = new Loan(refinanceOptions);\n      const newSchedule = new AmortizationSchedule(newLoan);\n\n      // Calculate remaining payments and interest on current loan\n      const remainingPayments = currentSchedule.payments.length;\n      const remainingInterest = currentSchedule.totalInterest();\n\n      // Calculate new payments and interest\n      const newPayments = newSchedule.payments.length;\n      const newInterest = newSchedule.totalInterest();\n\n      // Calculate monthly savings\n      const oldPayment = this.paymentAmount();\n      const newPayment = newLoan.paymentAmount();\n      const monthlySavings = oldPayment - newPayment;\n\n      // Calculate total cost comparison\n      const closingCosts = newLoanOptions.closingCosts || 0;\n      const currentTotalCost = remainingInterest + currentBalance;\n      const newTotalCost = newInterest + refinanceOptions.principal + closingCosts;\n      const lifetimeSavings = currentTotalCost - newTotalCost;\n\n      // Calculate break-even point in months\n      const breakEvenMonths = monthlySavings > 0\n        ? Math.ceil(closingCosts / monthlySavings) : Infinity;\n\n      return {\n        currentLoan: {\n          payment: oldPayment,\n          remainingBalance: currentBalance,\n          remainingPayments,\n          remainingInterest,\n          totalCost: currentTotalCost,\n        },\n        newLoan: {\n          payment: newPayment,\n          principal: refinanceOptions.principal,\n          term: refinanceOptions.term,\n          interestRate: refinanceOptions.interestRate,\n          totalPayments: newPayments,\n          totalInterest: newInterest,\n          totalCost: newTotalCost,\n        },\n        comparison: {\n          monthlySavings,\n          lifetimeSavings,\n          closingCosts,\n          breakEvenMonths,\n          isWorthwhile: lifetimeSavings > 0 && breakEvenMonths < newPayments,\n        },\n        refinanceLoan: newLoan,\n      };\n    });\n  }\n\n  /**\n   * Create a loan instance from JSON data\n   * @param {Object} json - JSON data\n   * @returns {Loan} New loan instance\n   */\n  static fromJSON(json) {\n    if (!json) return new Loan();\n\n    // Parse dates from ISO strings\n    const parsedJson = {\n      ...json,\n      startDate: json.startDate ? new Date(json.startDate) : new Date(),\n      createdAt: json.createdAt ? new Date(json.createdAt) : new Date(),\n      updatedAt: json.updatedAt ? new Date(json.updatedAt) : new Date(),\n    };\n\n    // Create a new loan with the parsed data\n    const loan = new Loan(parsedJson);\n\n    // Ensure the ID is preserved exactly as it was in the JSON\n    if (json.id) {\n      loan.id = json.id;\n    }\n\n    return loan;\n  }\n\n  /**\n   * Create a loan with default values for the specified loan type\n   * @param {string} type - Loan type\n   * @returns {Loan} New loan with default values\n   */\n  static createDefault(type = 'mortgage') {\n    if (!LOAN_TYPES[type]) {\n      throw new Error(`Invalid loan type: ${type}`);\n    }\n\n    const defaults = LOAN_TYPES[type];\n\n    return new Loan({\n      name: `New ${defaults.description}`,\n      type,\n      principal: defaults.minAmount * 2,\n      interestRate: defaults.defaultRate,\n      term: defaults.defaultTerm,\n      paymentFrequency: 'monthly',\n      downPayment: 0,\n      additionalPayment: 0,\n      startDate: new Date(),\n    });\n  }\n\n  /**\n   * Calculate the affordable loan amount based on a desired payment\n   * Implements requirement 1.6\n   * @param {Object} options - Calculation options\n   * @param {number} options.desiredPayment - Desired payment amount\n   * @param {number} [options.interestRate] - Interest rate (defaults to current loan rate)\n   * @param {number} [options.term] - Loan term in months (defaults to current loan term)\n   * @param {string} [options.paymentFrequency] - Payment frequency (defaults to current frequency)\n   * @param {number} [options.downPayment] - Down payment amount (defaults to current down payment)\n   * @returns {Object} Affordable loan details\n   */\n  static calculateAffordableLoan(options) {\n    if (!options.desiredPayment || options.desiredPayment <= 0) {\n      throw new Error('Desired payment must be greater than zero');\n    }\n\n    // Extract parameters with defaults\n    const { desiredPayment } = options;\n    const interestRate = options.interestRate || 4.5;\n    const term = options.term || 360;\n    const paymentFrequency = options.paymentFrequency || 'monthly';\n    const downPayment = options.downPayment || 0;\n\n    // Create a temporary loan to access the payment calculation methods\n    const tempLoan = new Loan({\n      principal: 100000, // Arbitrary starting value\n      interestRate,\n      term,\n      paymentFrequency,\n      downPayment: 0, // We'll handle down payment separately\n    });\n\n    // Get the periodic interest rate\n    const r = tempLoan.periodicInterestRate();\n    const n = tempLoan.numberOfPayments();\n\n    // Handle edge cases\n    let affordablePrincipal = 0;\n\n    if (r <= 0) {\n      // For zero interest, it's just payment * number of payments\n      affordablePrincipal = desiredPayment * n;\n    } else {\n      // Rearrange the standard loan formula to solve for principal:\n      // P = payment * ((1+r)^n - 1) / (r * (1+r)^n)\n      affordablePrincipal = desiredPayment * ((1 + r) ** n - 1) / (r * (1 + r) ** n);\n    }\n\n    // Add down payment to get total purchase price\n    const totalPurchasePrice = affordablePrincipal + downPayment;\n\n    // Create a loan with the calculated principal\n    const affordableLoan = new Loan({\n      principal: totalPurchasePrice,\n      interestRate,\n      term,\n      paymentFrequency,\n      downPayment,\n      name: 'Affordable Loan',\n    });\n\n    return {\n      affordablePrincipal,\n      totalPurchasePrice,\n      downPayment,\n      monthlyPayment: affordableLoan.paymentAmount(),\n      totalInterest: affordableLoan.totalInterest(),\n      loan: affordableLoan,\n    };\n  }\n}\n\nexport default Loan;\n\n// Note: AmortizationSchedule is imported dynamically in methods that need it\n// to avoid circular dependency issues\n","/**\n * Formatters Utility\n * Provides formatting functions for numbers, currencies, dates, etc.\n * Enhanced with internationalization support\n */\n\n/**\n * Get locale string based on language code\n * @param {string} language - Language code (e.g., 'en', 'es')\n * @returns {string} Locale string (e.g., 'en-US', 'es-ES')\n */\nexport function getLocaleFromLanguage(language) {\n  const localeMap = {\n    en: 'en-US',\n    es: 'es-ES',\n  };\n  return localeMap[language] || 'en-US';\n}\n\n/**\n * Get date format based on locale\n * @param {string} locale - Locale string (e.g., 'en-US', 'es-ES')\n * @returns {string} Date format string\n */\nexport function getDateFormatForLocale(locale) {\n  const formatMap = {\n    'en-US': 'MM/DD/YYYY',\n    'es-ES': 'DD/MM/YYYY',\n  };\n  return formatMap[locale] || 'MM/DD/YYYY';\n}\n\n/**\n * Format a number with specified decimal places and locale\n * @param {number} value - The number to format\n * @param {number} decimals - Number of decimal places\n * @param {string} locale - Locale for formatting (e.g., 'en-US', 'es-ES')\n * @returns {string} Formatted number\n */\nexport function formatNumber(value, decimals = 2, locale = 'en-US') {\n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  }).format(value);\n}\n\n/**\n * Format a value as currency\n * @param {number} value - The value to format\n * @param {string} currencyCode - Currency code (e.g., 'USD', 'EUR')\n * @param {string} locale - Locale for formatting (e.g., 'en-US', 'es-ES')\n * @returns {string} Formatted currency\n */\nexport function formatCurrency(value, currencyCode = 'USD', locale = 'en-US') {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currencyCode,\n  }).format(value);\n}\n\n/**\n * Format a date\n * @param {Date|string} date - The date to format\n * @param {string} format - Format string (e.g., 'MM/DD/YYYY')\n * @param {string} locale - Locale for formatting (e.g., 'en-US', 'es-ES')\n * @returns {string} Formatted date\n */\nexport function formatDate(date, format = null, locale = 'en-US') {\n  const dateObj = date instanceof Date ? date : new Date(date);\n\n  // Use Intl.DateTimeFormat for locale-aware formatting\n  if (!format) {\n    return new Intl.DateTimeFormat(locale).format(dateObj);\n  }\n\n  // Use custom format if specified\n  format = format || getDateFormatForLocale(locale);\n  const month = String(dateObj.getMonth() + 1).padStart(2, '0');\n  const day = String(dateObj.getDate()).padStart(2, '0');\n  const year = dateObj.getFullYear();\n\n  let formatted = format;\n  formatted = formatted.replace('MM', month);\n  formatted = formatted.replace('DD', day);\n  formatted = formatted.replace('YYYY', year);\n\n  return formatted;\n}\n\n/**\n * Format a percentage\n * @param {number} value - The value to format as percentage\n * @param {number} decimals - Number of decimal places\n * @returns {string} Formatted percentage\n */\nexport function formatPercentage(value, decimals = 2) {\n  return `${Number(value * 100).toFixed(decimals)}%`;\n}\n\n/**\n * Format a duration in months to years and months\n * @param {number} months - Number of months\n * @returns {string} Formatted duration\n */\nexport function formatDuration(months) {\n  const years = Math.floor(months / 12);\n  const remainingMonths = months % 12;\n\n  let result = '';\n  if (years > 0) {\n    result += `${years} year${years !== 1 ? 's' : ''}`;\n  }\n\n  if (remainingMonths > 0) {\n    if (result.length > 0) {\n      result += ' and ';\n    }\n    result += `${remainingMonths} month${remainingMonths !== 1 ? 's' : ''}`;\n  }\n\n  return result;\n}\n","/**\n * Guidance Manager Component\n * Provides tooltips and guidance for the loan calculator\n * Implements requirement 5.2\n */\n\nimport { getTranslation } from '../utils/translations.js';\nimport { initTooltips, createGuidancePanel, createTutorial } from '../utils/tooltips.js';\n\nclass GuidanceManager {\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('guidance-container');\n    this.language = options.language || 'en';\n    this.calculatorForm = options.calculatorForm;\n    this.resultsDisplay = options.resultsDisplay;\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    this.render();\n    this.bindEvents();\n\n    // Initialize tooltips throughout the application\n    this.initializeTooltips();\n  }\n\n  /**\n   * Render the guidance manager component\n   */\n  render() {\n    if (!this.container) return;\n\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    const guidanceHtml = `\n      <div class=\"guidance-manager\">\n        <button id=\"show-tutorial\" class=\"guidance-button\" data-tooltip=\"${t('tooltips.startTutorial')}\" data-tooltip-position=\"bottom\">\n          <span class=\"guidance-icon\">🔍</span>\n          <span class=\"guidance-text\">${t('guidance.tutorial')}</span>\n        </button>\n        <button id=\"show-guidance\" class=\"guidance-button\" data-tooltip=\"${t('tooltips.showGuidance')}\" data-tooltip-position=\"bottom\">\n          <span class=\"guidance-icon\">💡</span>\n          <span class=\"guidance-text\">${t('guidance.help')}</span>\n        </button>\n      </div>\n    `;\n\n    this.container.innerHTML = guidanceHtml;\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    if (!this.container) return;\n\n    // Tutorial button\n    const tutorialButton = this.container.querySelector('#show-tutorial');\n    if (tutorialButton) {\n      tutorialButton.addEventListener('click', () => this.startTutorial());\n    }\n\n    // Guidance button\n    const guidanceButton = this.container.querySelector('#show-guidance');\n    if (guidanceButton) {\n      guidanceButton.addEventListener('click', () => this.showGuidance());\n    }\n\n    // Initialize tooltips on the guidance buttons\n    initTooltips(this.container);\n  }\n\n  /**\n   * Initialize tooltips throughout the application\n   */\n  initializeTooltips() {\n    // Initialize tooltips on all elements with data-tooltip attribute\n    initTooltips(document);\n\n    // Add tooltips to form fields if calculator form exists\n    if (this.calculatorForm && this.calculatorForm.container) {\n      this.addFormTooltips();\n    }\n\n    // Add tooltips to results if results display exists\n    if (this.resultsDisplay && this.resultsDisplay.container) {\n      this.addResultsTooltips();\n    }\n  }\n\n  /**\n   * Add tooltips to form fields\n   */\n  addFormTooltips() {\n    const t = (key) => getTranslation(key, this.language);\n    const formContainer = this.calculatorForm.container;\n\n    // Add tooltips to form labels\n    const addTooltipToField = (fieldId, tooltipKey, position = 'top') => {\n      const label = formContainer.querySelector(`label[for=\"${fieldId}\"]`);\n      if (label) {\n        // Check if info icon already exists\n        if (!label.querySelector('.info-icon')) {\n          const infoIcon = document.createElement('span');\n          infoIcon.className = 'info-icon';\n          infoIcon.textContent = '?';\n          infoIcon.setAttribute('data-tooltip', t(tooltipKey));\n          infoIcon.setAttribute('data-tooltip-position', position);\n          label.appendChild(infoIcon);\n        }\n      }\n    };\n\n    // Add tooltips to all form fields\n    addTooltipToField('loan-type', 'tooltips.loanType');\n    addTooltipToField('principal', 'tooltips.loanAmount');\n    addTooltipToField('interestRate', 'tooltips.interestRate');\n    addTooltipToField('term', 'tooltips.loanTerm');\n    addTooltipToField('downPayment', 'tooltips.downPayment');\n    addTooltipToField('additionalPayment', 'tooltips.additionalPayment');\n    addTooltipToField('paymentFrequency', 'tooltips.paymentFrequency');\n    addTooltipToField('startDate', 'tooltips.startDate');\n\n    // Initialize tooltips\n    initTooltips(formContainer);\n  }\n\n  /**\n   * Add tooltips to results\n   */\n  addResultsTooltips() {\n    const t = (key) => getTranslation(key, this.language);\n    const resultsContainer = this.resultsDisplay.container;\n\n    // Add tooltips to result items\n    const addTooltipToResult = (selector, tooltipKey, position = 'top') => {\n      const element = resultsContainer.querySelector(selector);\n      if (element) {\n        // Check if info icon already exists\n        if (!element.querySelector('.info-icon')) {\n          const infoIcon = document.createElement('span');\n          infoIcon.className = 'info-icon';\n          infoIcon.textContent = '?';\n          infoIcon.setAttribute('data-tooltip', t(tooltipKey));\n          infoIcon.setAttribute('data-tooltip-position', position);\n          element.appendChild(infoIcon);\n        }\n      }\n    };\n\n    // Add tooltips to all result items\n    addTooltipToResult('.monthly-payment-label', 'tooltips.monthlyPayment');\n    addTooltipToResult('.total-payment-label', 'tooltips.totalPayment');\n    addTooltipToResult('.total-interest-label', 'tooltips.totalInterest');\n    addTooltipToResult('.payoff-date-label', 'tooltips.payoffDate');\n    addTooltipToResult('.interest-savings-label', 'tooltips.interestSavings');\n\n    // Initialize tooltips\n    initTooltips(resultsContainer);\n  }\n\n  /**\n   * Start interactive tutorial\n   */\n  startTutorial() {\n    const t = (key) => getTranslation(key, this.language);\n\n    // Define tutorial steps\n    const tutorialSteps = [\n      {\n        selector: '#loan-type',\n        title: t('tutorial.loanTypeTitle'),\n        content: t('tutorial.loanTypeContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '#principal',\n        title: t('tutorial.loanAmountTitle'),\n        content: t('tutorial.loanAmountContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '#interestRate',\n        title: t('tutorial.interestRateTitle'),\n        content: t('tutorial.interestRateContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '#term',\n        title: t('tutorial.loanTermTitle'),\n        content: t('tutorial.loanTermContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '.term-presets',\n        title: t('tutorial.termPresetsTitle'),\n        content: t('tutorial.termPresetsContent'),\n        position: 'top',\n      },\n      {\n        selector: '#additionalPayment',\n        title: t('tutorial.additionalPaymentTitle'),\n        content: t('tutorial.additionalPaymentContent'),\n        position: 'top',\n      },\n      {\n        selector: '#calculate-button',\n        title: t('tutorial.calculateTitle'),\n        content: t('tutorial.calculateContent'),\n        position: 'top',\n      },\n      {\n        selector: '.results-summary',\n        title: t('tutorial.resultsTitle'),\n        content: t('tutorial.resultsContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '#amortization-table-container',\n        title: t('tutorial.amortizationTitle'),\n        content: t('tutorial.amortizationContent'),\n        position: 'top',\n      },\n      {\n        selector: '#charts-container',\n        title: t('tutorial.chartsTitle'),\n        content: t('tutorial.chartsContent'),\n        position: 'top',\n      },\n    ];\n\n    // Start tutorial\n    createTutorial(tutorialSteps, () => {\n      // Show completion message\n      this.showGuidancePanel(\n        t('tutorial.completedTitle'),\n        t('tutorial.completedContent'),\n        'tutorial-completed',\n      );\n    });\n  }\n\n  /**\n   * Show guidance panel\n   */\n  showGuidance() {\n    const t = (key) => getTranslation(key, this.language);\n\n    // Create guidance content\n    const guidanceContent = `\n      <div class=\"guidance-sections\">\n        <div class=\"guidance-section\">\n          <h4>${t('guidance.interpretingResultsTitle')}</h4>\n          <p>${t('guidance.interpretingResultsContent')}</p>\n        </div>\n        \n        <div class=\"guidance-section\">\n          <h4>${t('guidance.affordabilityTitle')}</h4>\n          <p>${t('guidance.affordabilityContent')}</p>\n          <ul>\n            <li>${t('guidance.affordabilityTip1')}</li>\n            <li>${t('guidance.affordabilityTip2')}</li>\n            <li>${t('guidance.affordabilityTip3')}</li>\n          </ul>\n        </div>\n        \n        <div class=\"guidance-section\">\n          <h4>${t('guidance.additionalPaymentsTitle')}</h4>\n          <p>${t('guidance.additionalPaymentsContent')}</p>\n        </div>\n        \n        <div class=\"guidance-section\">\n          <h4>${t('guidance.refinanceTitle')}</h4>\n          <p>${t('guidance.refinanceContent')}</p>\n          <ul>\n            <li>${t('guidance.refinanceTip1')}</li>\n            <li>${t('guidance.refinanceTip2')}</li>\n            <li>${t('guidance.refinanceTip3')}</li>\n          </ul>\n        </div>\n      </div>\n    `;\n\n    // Show guidance panel\n    this.showGuidancePanel(\n      t('guidance.title'),\n      guidanceContent,\n      'loan-guidance',\n    );\n  }\n\n  /**\n   * Show guidance panel with custom content\n   * @param {string} title - Panel title\n   * @param {string} content - Panel content\n   * @param {string} id - Panel ID\n   */\n  showGuidancePanel(title, content, id) {\n    // Find or create guidance panel container\n    let panelContainer = document.getElementById('guidance-panels-container');\n\n    if (!panelContainer) {\n      panelContainer = document.createElement('div');\n      panelContainer.id = 'guidance-panels-container';\n      document.body.appendChild(panelContainer);\n    }\n\n    // Create guidance panel\n    createGuidancePanel(panelContainer, title, content, id);\n  }\n\n  /**\n   * Update language and re-render component\n   * @param {string} language - Language code\n   */\n  updateLanguage(language) {\n    if (this.language !== language) {\n      this.language = language;\n      this.render();\n      this.bindEvents();\n      this.initializeTooltips();\n    }\n  }\n}\n\nexport default GuidanceManager;\n","/**\n * Results Display Component\n * Displays loan calculation results\n * Implements requirements 2.1, 2.3\n */\n\nimport * as formatters from '../utils/formatters.js';\nimport Charts from './charts.js';\n\nclass ResultsDisplay {\n  /**\n   * Create a new results display component\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement} [options.container] - Container element\n   * @param {Object} [options.formatters] - Custom formatters\n   */\n  constructor(options = {}) {\n    // Handle both container and containerId options\n    this.container = options.container\n                    || (options.containerId ? document.getElementById(options.containerId) : null)\n                    || document.getElementById('results-display');\n\n    this.formatters = {\n      currency: formatters.formatCurrency,\n      percentage: formatters.formatPercentage,\n      number: formatters.formatNumber,\n      date: formatters.formatDate,\n      duration: formatters.formatDuration,\n      ...options.formatters,\n    };\n\n    // Store onSave callback if provided\n    this.onSave = options.onSave || null;\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    if (!this.container) {\n      console.error('Results display container not found');\n      return;\n    }\n\n    // Create initial structure\n    this.container.innerHTML = `\n      <div class=\"results-display\">\n        <div class=\"results-header\">\n          <h2>Loan Summary</h2>\n          <div class=\"results-actions\">\n            <button class=\"btn-save\" id=\"save-calculation\">Save</button>\n            <button class=\"btn-export\" id=\"export-calculation\">Export</button>\n          </div>\n        </div>\n        <div class=\"results-content\">\n          <div class=\"results-summary\" id=\"results-summary\"></div>\n          <div class=\"results-breakdown\" id=\"results-breakdown\"></div>\n          <div class=\"results-charts\" id=\"charts-container\"></div>\n        </div>\n      </div>\n    `;\n\n    // Initialize charts component\n    this.charts = new Charts({\n      container: this.container.querySelector('#charts-container'),\n    });\n\n    // Initialize event listeners\n    this._initEventListeners();\n  }\n\n  /**\n   * Initialize event listeners\n   * @private\n   */\n  _initEventListeners() {\n    const saveButton = this.container.querySelector('#save-calculation');\n    const exportButton = this.container.querySelector('#export-calculation');\n\n    if (saveButton) {\n      saveButton.addEventListener('click', () => {\n        // Use the onSave callback if provided\n        if (typeof this.onSave === 'function' && this._currentLoan && this._currentAmortizationSchedule) {\n          this.onSave(this._currentLoan, this._currentAmortizationSchedule);\n        } else {\n          console.log('Save calculation clicked, but no onSave handler or loan data available');\n        }\n      });\n    }\n\n    if (exportButton) {\n      exportButton.addEventListener('click', () => {\n        // This will be implemented in a future task\n        console.log('Export calculation clicked');\n      });\n    }\n  }\n\n  /**\n   * Render calculation results\n   * @param {Object} calculationResults - Calculation results object\n   * @param {Loan} calculationResults.loan - Loan object\n   * @param {AmortizationSchedule} [calculationResults.amortizationSchedule] - Amortization schedule\n   * @param {Object} [calculationResults.inflationAdjusted] - Inflation-adjusted payment data\n   * @param {Array} [calculationResults.comparisonScenarios] - Array of comparison scenarios\n   */\n  render(calculationResults) {\n    if (!this.container || !calculationResults || !calculationResults.loan) {\n      return;\n    }\n\n    const {\n      loan, amortizationSchedule, inflationAdjusted, comparisonScenarios,\n    } = calculationResults;\n\n    // Store current loan and amortization schedule for save functionality\n    this._currentLoan = loan;\n    this._currentAmortizationSchedule = amortizationSchedule;\n\n    // Prepare summary data\n    const summary = {\n      loanAmount: loan.totalLoanAmount,\n      paymentAmount: loan.paymentAmount,\n      totalInterest: amortizationSchedule ? amortizationSchedule.totalInterest : loan.totalInterest,\n      totalPayment: amortizationSchedule ? amortizationSchedule.totalPayment : (loan.paymentAmount * loan.numberOfPayments),\n      term: loan.term,\n      interestRate: loan.interestRate,\n      paymentFrequency: loan.paymentFrequency,\n      payoffDate: amortizationSchedule ? amortizationSchedule.payoffDate : loan.payoffDate,\n      numberOfPayments: loan.numberOfPayments,\n      inflationRate: loan.inflationRate,\n      inflationAdjusted: inflationAdjusted ? {\n        totalPayment: inflationAdjusted.summary.totalInflationAdjustedPayment,\n        totalInterest: inflationAdjusted.summary.totalInflationAdjustedInterest,\n        savingsFromInflation: inflationAdjusted.summary.savingsFromInflation,\n      } : null,\n    };\n\n    // Prepare payment breakdown data\n    const breakdown = {\n      principal: loan.totalLoanAmount,\n      interest: summary.totalInterest,\n      total: summary.totalPayment,\n      interestRatio: summary.totalInterest / summary.totalPayment,\n      principalRatio: loan.totalLoanAmount / summary.totalPayment,\n    };\n\n    // Display results\n    this.displaySummary(summary);\n    this.displayPaymentBreakdown(breakdown);\n\n    // Render charts if we have amortization schedule\n    if (this.charts && amortizationSchedule) {\n      // Clear any existing charts\n      this.charts.clear();\n\n      // Render principal vs interest chart\n      this.charts.renderPrincipalVsInterestChart({ loan, amortizationSchedule });\n\n      // Render payment breakdown pie chart\n      this.charts.renderPaymentBreakdownPieChart({ loan, amortizationSchedule });\n\n      // Render comparison chart if we have comparison scenarios\n      if (comparisonScenarios && comparisonScenarios.length > 0) {\n        // Add current calculation as first scenario if not already included\n        const scenarios = [{\n          id: 'current',\n          name: loan.name || 'Current Calculation',\n          loan,\n          amortizationSchedule,\n        }];\n\n        // Add other scenarios\n        comparisonScenarios.forEach((scenario) => {\n          if (scenario.id !== 'current') {\n            scenarios.push(scenario);\n          }\n        });\n\n        // Only render if we have at least 2 scenarios\n        if (scenarios.length >= 2) {\n          this.charts.renderComparisonChart(scenarios);\n        }\n      }\n    }\n\n    // Show the results container\n    this.container.style.display = 'block';\n  }\n\n  /**\n   * Display loan summary information\n   * @param {Object} summary - Summary data\n   */\n  displaySummary(summary) {\n    const summaryContainer = this.container.querySelector('#results-summary');\n    if (!summaryContainer) return;\n\n    // Format values\n    const formattedValues = {\n      loanAmount: this.formatters.currency(summary.loanAmount),\n      paymentAmount: this.formatters.currency(summary.paymentAmount),\n      totalInterest: this.formatters.currency(summary.totalInterest),\n      totalPayment: this.formatters.currency(summary.totalPayment),\n      term: this.formatters.duration(summary.term),\n      interestRate: this.formatters.percentage(summary.interestRate / 100),\n      payoffDate: this.formatters.date(summary.payoffDate),\n      numberOfPayments: summary.numberOfPayments,\n    };\n\n    // Format inflation-adjusted values if available\n    let inflationSection = '';\n    if (summary.inflationAdjusted && summary.inflationRate > 0) {\n      const inflationValues = {\n        inflationRate: this.formatters.percentage(summary.inflationRate / 100),\n        totalAdjustedPayment: this.formatters.currency(summary.inflationAdjusted.totalPayment),\n        savingsFromInflation: this.formatters.currency(summary.inflationAdjusted.savingsFromInflation),\n        savingsPercentage: this.formatters.percentage(summary.inflationAdjusted.savingsFromInflation / summary.totalPayment),\n      };\n\n      inflationSection = `\n        <div class=\"inflation-section\">\n          <h3>Inflation-Adjusted Values (${inflationValues.inflationRate} inflation)</h3>\n          <div class=\"summary-grid\">\n            <div class=\"summary-item\">\n              <div class=\"summary-label\">Inflation-Adjusted Total Payment</div>\n              <div class=\"summary-value\">${inflationValues.totalAdjustedPayment}</div>\n            </div>\n            <div class=\"summary-item highlight\">\n              <div class=\"summary-label\">Real Savings Due to Inflation</div>\n              <div class=\"summary-value\">${inflationValues.savingsFromInflation} (${inflationValues.savingsPercentage})</div>\n            </div>\n          </div>\n        </div>\n      `;\n    }\n\n    // Get payment frequency description\n    const paymentFrequencyMap = {\n      monthly: 'Monthly',\n      'bi-weekly': 'Bi-Weekly',\n      weekly: 'Weekly',\n    };\n\n    const paymentFrequency = paymentFrequencyMap[summary.paymentFrequency] || 'Monthly';\n\n    // Create summary HTML\n    const summaryHtml = `\n      <div class=\"summary-grid\">\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">${paymentFrequency} Payment</div>\n          <div class=\"summary-value highlight\">${formattedValues.paymentAmount}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Loan Amount</div>\n          <div class=\"summary-value\">${formattedValues.loanAmount}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Total Interest</div>\n          <div class=\"summary-value\">${formattedValues.totalInterest}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Total Payment</div>\n          <div class=\"summary-value\">${formattedValues.totalPayment}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Loan Term</div>\n          <div class=\"summary-value\">${formattedValues.term}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Interest Rate</div>\n          <div class=\"summary-value\">${formattedValues.interestRate}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Number of Payments</div>\n          <div class=\"summary-value\">${formattedValues.numberOfPayments}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Payoff Date</div>\n          <div class=\"summary-value\">${formattedValues.payoffDate}</div>\n        </div>\n      </div>\n      ${inflationSection}\n    `;\n\n    summaryContainer.innerHTML = summaryHtml;\n\n    // Add interest rate indicator\n    this._addInterestRateIndicator(summary.interestRate);\n  }\n\n  /**\n   * Add visual indicator for interest rate\n   * @param {number} interestRate - Interest rate\n   * @private\n   */\n  _addInterestRateIndicator(interestRate) {\n    const interestRateElement = this.container.querySelector('.summary-item:nth-child(6) .summary-value');\n    if (!interestRateElement) return;\n\n    // Remove any existing indicators\n    interestRateElement.classList.remove('rate-low', 'rate-medium', 'rate-high');\n\n    // Add indicator based on rate\n    if (interestRate < 4) {\n      interestRateElement.classList.add('rate-low');\n      interestRateElement.setAttribute('title', 'This is a low interest rate');\n    } else if (interestRate < 7) {\n      interestRateElement.classList.add('rate-medium');\n      interestRateElement.setAttribute('title', 'This is an average interest rate');\n    } else {\n      interestRateElement.classList.add('rate-high');\n      interestRateElement.setAttribute('title', 'This is a high interest rate');\n    }\n  }\n\n  /**\n   * Display payment breakdown with visual indicators\n   * @param {Object} breakdown - Payment breakdown data\n   */\n  displayPaymentBreakdown(breakdown) {\n    const breakdownContainer = this.container.querySelector('#results-breakdown');\n    if (!breakdownContainer) return;\n\n    // Format values\n    const formattedValues = {\n      principal: this.formatters.currency(breakdown.principal),\n      interest: this.formatters.currency(breakdown.interest),\n      total: this.formatters.currency(breakdown.total),\n      interestPercentage: this.formatters.percentage(breakdown.interestRatio),\n      principalPercentage: this.formatters.percentage(breakdown.principalRatio),\n    };\n\n    // Calculate percentages for visual representation\n    const principalPercent = Math.round(breakdown.principalRatio * 100);\n    const interestPercent = Math.round(breakdown.interestRatio * 100);\n\n    // Create breakdown HTML\n    const breakdownHtml = `\n      <h3>Payment Breakdown</h3>\n      <div class=\"breakdown-chart\">\n        <div class=\"breakdown-bar\">\n          <div class=\"breakdown-principal\" style=\"width: ${principalPercent}%\" title=\"Principal: ${formattedValues.principalPercentage}\">\n            <span class=\"breakdown-label\">Principal</span>\n          </div>\n          <div class=\"breakdown-interest\" style=\"width: ${interestPercent}%\" title=\"Interest: ${formattedValues.interestPercentage}\">\n            <span class=\"breakdown-label\">Interest</span>\n          </div>\n        </div>\n        <div class=\"breakdown-legend\">\n          <div class=\"legend-item\">\n            <div class=\"legend-color principal-color\"></div>\n            <div class=\"legend-label\">Principal: ${formattedValues.principal} (${formattedValues.principalPercentage})</div>\n          </div>\n          <div class=\"legend-item\">\n            <div class=\"legend-color interest-color\"></div>\n            <div class=\"legend-label\">Interest: ${formattedValues.interest} (${formattedValues.interestPercentage})</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"breakdown-total\">\n        <span>Total Payment: ${formattedValues.total}</span>\n      </div>\n    `;\n\n    breakdownContainer.innerHTML = breakdownHtml;\n  }\n\n  /**\n   * Clear all results\n   */\n  clear() {\n    if (!this.container) return;\n\n    const summaryContainer = this.container.querySelector('#results-summary');\n    const breakdownContainer = this.container.querySelector('#results-breakdown');\n\n    if (summaryContainer) {\n      summaryContainer.innerHTML = '';\n    }\n\n    if (breakdownContainer) {\n      breakdownContainer.innerHTML = '';\n    }\n\n    // Clear charts if they exist\n    if (this.charts) {\n      this.charts.clear();\n    }\n\n    // Hide the results container\n    this.container.style.display = 'none';\n  }\n\n  /**\n   * Update results with new calculation\n   * @param {Object} calculationResults - Calculation results object\n   */\n  update(calculationResults) {\n    this.render(calculationResults);\n  }\n\n  /**\n   * Update results with loan and amortization schedule\n   * @param {Loan} loan - Loan object\n   * @param {AmortizationSchedule} amortizationSchedule - Amortization schedule\n   * @param {Object} [inflationAdjusted] - Inflation-adjusted payment data\n   */\n  updateResults(loan, amortizationSchedule, inflationAdjusted = null) {\n    this.render({\n      loan,\n      amortizationSchedule,\n      inflationAdjusted,\n    });\n  }\n}\n\nexport default ResultsDisplay;\n","/**\n * Amortization Schedule Model\n * Represents a loan amortization schedule with payment details\n * Implements requirements 1.1, 1.3, 4.3\n */\n\nclass AmortizationSchedule {\n  /**\n   * Create a new amortization schedule for a loan\n   * @param {Loan} loan - The loan to create a schedule for\n   * @param {boolean} [autoGenerate=true] - Whether to automatically generate the schedule\n   */\n  constructor(loan, autoGenerate = true) {\n    this.loan = loan;\n    this.payments = [];\n    this.isGenerating = false;\n    this.generationProgress = 0;\n\n    // Generate the schedule when the object is created (unless disabled)\n    if (autoGenerate) {\n      this.generateSchedule();\n    }\n  }\n\n  /**\n   * Generate the amortization schedule for the loan asynchronously\n   * @param {Object} options - Options for schedule generation\n   * @param {boolean} [options.includeAdditionalPayments=true] - Whether to include additional payments in the calculation\n   * @param {Function} [options.onProgress] - Progress callback function\n   * @param {number} [options.timeout=5000] - Timeout in milliseconds\n   * @returns {Promise<Array>} Promise that resolves to array of Payment objects\n   */\n  async generateScheduleAsync(options = {}) {\n    const includeAdditionalPayments = options.includeAdditionalPayments !== false;\n    const onProgress = options.onProgress || (() => {});\n    const timeout = options.timeout || 5000;\n    const batchSize = options.batchSize || 50; // Process payments in batches\n\n    // Set generation state\n    this.isGenerating = true;\n    this.generationProgress = 0;\n\n    try {\n      // Clear existing payments\n      this.payments = [];\n\n      // Validate loan parameters\n      const loanAmount = this.loan.totalLoanAmount();\n      if (loanAmount <= 0) {\n        throw new Error('Loan amount must be greater than zero.');\n      }\n\n      if (loanAmount > 100000000) { // 100 million limit\n        throw new Error('Loan amount is too large. Please enter a reasonable loan amount.');\n      }\n\n      const interestRate = this.loan.interestRate;\n      if (interestRate < 0 || interestRate > 50) {\n        throw new Error('Interest rate must be between 0% and 50%.');\n      }\n\n      const term = this.loan.term;\n      if (term <= 0 || term > 600) { // 50 years max\n        throw new Error('Loan term must be between 1 and 600 months.');\n      }\n\n      // Get loan parameters\n      const principal = this.loan.totalLoanAmount();\n      const periodicRate = this.loan.periodicInterestRate();\n      const regularPayment = this.loan.paymentAmount();\n      const additionalPayment = includeAdditionalPayments ? this.loan.additionalPayment : 0;\n      const maxPayments = this.loan.numberOfPayments() * 2; // Safety limit\n\n      // Validate calculated values\n      if (isNaN(periodicRate) || periodicRate < 0) {\n        throw new Error('Invalid interest rate calculation. Please check your interest rate.');\n      }\n\n      if (isNaN(regularPayment) || regularPayment <= 0) {\n        throw new Error('Invalid payment calculation. Please check your loan parameters.');\n      }\n\n      if (regularPayment <= principal * periodicRate) {\n        throw new Error('Monthly payment is too low to cover interest. Please increase the payment amount or reduce the loan amount.');\n      }\n\n      // Initialize variables for the schedule calculation\n      let balance = principal;\n      let paymentNumber = 1;\n      const currentDate = new Date(this.loan.startDate);\n      const paymentInterval = this.getPaymentInterval();\n\n      // Set up timeout\n      const startTime = Date.now();\n\n      // Generate payments until the balance is paid off\n      while (balance > 0 && paymentNumber <= maxPayments) {\n        // Check for timeout\n        if (Date.now() - startTime > timeout) {\n          throw new Error(`Calculation timeout after ${timeout}ms. The loan parameters may be invalid.`);\n        }\n\n        // Calculate interest for this period\n        const interestPayment = balance * periodicRate;\n\n        // Calculate principal for this period (ensure we don't overpay)\n        const totalPayment = Math.min(regularPayment + additionalPayment, balance + interestPayment);\n        const principalPayment = totalPayment - interestPayment;\n\n        // Update balance\n        balance = Math.max(0, balance - principalPayment);\n\n        // Create payment object\n        const payment = new Payment(\n          paymentNumber,\n          new Date(currentDate),\n          totalPayment,\n          principalPayment,\n          interestPayment,\n          balance,\n        );\n\n        // Add to payments array\n        this.payments.push(payment);\n\n        // Update progress\n        const estimatedTotalPayments = Math.min(this.loan.numberOfPayments(), maxPayments);\n        this.generationProgress = Math.min(95, (paymentNumber / estimatedTotalPayments) * 100);\n        \n        // Process in batches to avoid blocking the UI\n        if (paymentNumber % batchSize === 0) {\n          onProgress(this.generationProgress, `Processing payment ${paymentNumber}...`);\n          // Yield control back to the event loop\n          await new Promise(resolve => setTimeout(resolve, 0));\n        }\n\n        // Increment payment number\n        paymentNumber++;\n\n        // Advance date to next payment\n        this.advanceDate(currentDate, paymentInterval);\n\n        // If we're down to a very small balance, just pay it off\n        if (balance > 0 && balance < 0.01) {\n          balance = 0;\n        }\n      }\n\n      // Check if we hit the safety limit\n      if (paymentNumber > maxPayments && balance > 0) {\n        throw new Error('Maximum payment limit reached. Please check your loan parameters.');\n      }\n\n      // Complete\n      this.isGenerating = false;\n      this.generationProgress = 100;\n      onProgress(100, 'Complete');\n\n      return this.payments;\n\n    } catch (error) {\n      this.isGenerating = false;\n      this.generationProgress = 0;\n      throw error;\n    }\n  }\n\n  /**\n   * Generate the amortization schedule for the loan (synchronous version)\n   * @param {Object} options - Options for schedule generation\n   * @param {boolean} [options.includeAdditionalPayments=true] - Whether to include additional payments in the calculation\n   * @returns {Array} Array of Payment objects\n   */\n  generateSchedule(options = {}) {\n    const includeAdditionalPayments = options.includeAdditionalPayments !== false;\n\n    // Clear existing payments\n    this.payments = [];\n\n    // If loan amount is zero, return empty schedule\n    if (this.loan.totalLoanAmount() <= 0) {\n      return this.payments;\n    }\n\n    // Get loan parameters\n    const principal = this.loan.totalLoanAmount();\n    const periodicRate = this.loan.periodicInterestRate();\n    const regularPayment = this.loan.paymentAmount();\n    const additionalPayment = includeAdditionalPayments ? this.loan.additionalPayment : 0;\n\n    // Initialize variables for the schedule calculation\n    let balance = principal;\n    let paymentNumber = 1;\n    const currentDate = new Date(this.loan.startDate);\n\n    // Calculate payment interval based on frequency\n    const paymentInterval = this.getPaymentInterval();\n\n    // Generate payments until the balance is paid off\n    while (balance > 0) {\n      // Calculate interest for this period\n      const interestPayment = balance * periodicRate;\n\n      // Calculate principal for this period (ensure we don't overpay)\n      const totalPayment = Math.min(regularPayment + additionalPayment, balance + interestPayment);\n      const principalPayment = totalPayment - interestPayment;\n\n      // Update balance\n      balance = Math.max(0, balance - principalPayment);\n\n      // Create payment object\n      const payment = new Payment(\n        paymentNumber,\n        new Date(currentDate),\n        totalPayment,\n        principalPayment,\n        interestPayment,\n        balance,\n      );\n\n      // Add to payments array\n      this.payments.push(payment);\n\n      // Increment payment number\n      paymentNumber++;\n\n      // Advance date to next payment\n      this.advanceDate(currentDate, paymentInterval);\n\n      // Safety check to prevent infinite loops\n      if (paymentNumber > this.loan.numberOfPayments() * 2) {\n        // Maximum payment count exceeded, possible calculation error\n        break;\n      }\n\n      // If we're down to a very small balance, just pay it off\n      if (balance > 0 && balance < 0.01) {\n        balance = 0;\n      }\n    }\n\n    return this.payments;\n  }\n\n  /**\n   * Get the payment interval in days based on payment frequency\n   * @returns {Object} Object with days and type properties\n   */\n  getPaymentInterval() {\n    switch (this.loan.paymentFrequency) {\n      case 'weekly':\n        return { days: 7, type: 'days' };\n      case 'bi-weekly':\n        return { days: 14, type: 'days' };\n      case 'monthly':\n        return { days: 1, type: 'months' };\n      default:\n        return { days: 1, type: 'months' };\n    }\n  }\n\n  /**\n   * Advance a date by the specified interval\n   * @param {Date} date - Date to advance (modified in place)\n   * @param {Object} interval - Interval object with days and type properties\n   */\n  advanceDate(date, interval) {\n    if (interval.type === 'days') {\n      date.setDate(date.getDate() + interval.days);\n    } else if (interval.type === 'months') {\n      date.setMonth(date.getMonth() + interval.days);\n    }\n  }\n\n  /**\n   * Calculate the total interest paid over the life of the loan\n   * @returns {number} Total interest\n   */\n  totalInterest() {\n    return this.payments.reduce((sum, payment) => sum + payment.interest, 0);\n  }\n\n  /**\n   * Calculate the total amount paid over the life of the loan\n   * @returns {number} Total payment\n   */\n  totalPayment() {\n    return this.payments.reduce((sum, payment) => sum + payment.amount, 0);\n  }\n\n  /**\n   * Get the payoff date (date of the last payment)\n   * @returns {Date} Payoff date\n   */\n  payoffDate() {\n    if (this.payments.length === 0) {\n      return new Date(this.loan.startDate);\n    }\n\n    return new Date(this.payments[this.payments.length - 1].date);\n  }\n\n  /**\n   * Convert the amortization schedule to JSON for storage\n   * @returns {Object} JSON representation\n   */\n  toJSON() {\n    return {\n      loanId: this.loan.id,\n      payments: this.payments.map((payment) => payment.toJSON()),\n    };\n  }\n\n  /**\n   * Create an amortization schedule from JSON data\n   * @param {Object} json - JSON data\n   * @param {Loan} loan - Associated loan object\n   * @returns {AmortizationSchedule} New amortization schedule\n   */\n  static fromJSON(json, loan) {\n    if (!json || !json.payments || !Array.isArray(json.payments)) {\n      return new AmortizationSchedule(loan);\n    }\n\n    const schedule = new AmortizationSchedule(loan);\n    // Override the auto-generated schedule with the stored one\n    schedule.payments = json.payments.map((paymentJson) => Payment.fromJSON(paymentJson));\n    return schedule;\n  }\n}\n\n/**\n * Payment class representing a single payment in an amortization schedule\n */\nclass Payment {\n  /**\n   * Create a new payment\n   * @param {number} number - Payment number in sequence\n   * @param {Date} date - Date of payment\n   * @param {number} amount - Total payment amount\n   * @param {number} principal - Principal portion of payment\n   * @param {number} interest - Interest portion of payment\n   * @param {number} balance - Remaining balance after payment\n   */\n  constructor(number, date, amount, principal, interest, balance) {\n    this.number = number;\n    this.date = date;\n    this.amount = amount;\n    this.principal = principal;\n    this.interest = interest;\n    this.balance = balance;\n  }\n\n  /**\n   * Get the month of the payment (1-12)\n   * @returns {number} Month number\n   */\n  month() {\n    return this.date.getMonth() + 1; // JavaScript months are 0-indexed\n  }\n\n  /**\n   * Get the year of the payment\n   * @returns {number} Year\n   */\n  year() {\n    return this.date.getFullYear();\n  }\n\n  /**\n   * Get the cumulative principal paid so far (not implemented yet)\n   * This would require knowledge of previous payments\n   * @returns {number} Cumulative principal\n   */\n  cumulativePrincipal() {\n    // This would be implemented when we have access to previous payments\n    return this.principal;\n  }\n\n  /**\n   * Get the cumulative interest paid so far (not implemented yet)\n   * This would require knowledge of previous payments\n   * @returns {number} Cumulative interest\n   */\n  cumulativeInterest() {\n    // This would be implemented when we have access to previous payments\n    return this.interest;\n  }\n\n  /**\n   * Convert payment to JSON for storage\n   * @returns {Object} JSON representation\n   */\n  toJSON() {\n    return {\n      number: this.number,\n      date: this.date.toISOString(),\n      amount: this.amount,\n      principal: this.principal,\n      interest: this.interest,\n      balance: this.balance,\n    };\n  }\n\n  /**\n   * Create a payment from JSON data\n   * @param {Object} json - JSON data\n   * @returns {Payment} New payment instance\n   */\n  static fromJSON(json) {\n    if (!json) return null;\n\n    return new Payment(\n      json.number,\n      new Date(json.date),\n      json.amount,\n      json.principal,\n      json.interest,\n      json.balance,\n    );\n  }\n}\n\nexport { AmortizationSchedule, Payment };\n","/**\n * Validators Utility\n * Provides validation functions for form inputs\n */\n\n/**\n * Validate that a value is a number\n * @param {any} value - The value to validate\n * @returns {boolean} True if valid\n */\nexport function isNumber(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n}\n\n/**\n * Validate that a value is a positive number\n * @param {any} value - The value to validate\n * @returns {boolean} True if valid\n */\nexport function isPositiveNumber(value) {\n  return isNumber(value) && parseFloat(value) > 0;\n}\n\n/**\n * Validate that a value is within a range\n * @param {any} value - The value to validate\n * @param {number} min - Minimum value\n * @param {number} max - Maximum value\n * @returns {boolean} True if valid\n */\nexport function isInRange(value, min, max) {\n  return isNumber(value) && parseFloat(value) >= min && parseFloat(value) <= max;\n}\n\n/**\n * Validate that a value is a valid interest rate\n * @param {any} value - The value to validate\n * @returns {boolean} True if valid\n */\nexport function isValidInterestRate(value) {\n  return isInRange(value, 0, 100);\n}\n\n/**\n * Validate that a value is a valid inflation rate\n * @param {any} value - The value to validate\n * @returns {boolean} True if valid\n */\nexport function isValidInflationRate(value) {\n  return isInRange(value, 0, 20);\n}\n\n/**\n * Validate that a value is a valid loan term in months\n * @param {any} value - The value to validate\n * @returns {boolean} True if valid\n */\nexport function isValidLoanTerm(value) {\n  return isNumber(value) && Number.isInteger(parseFloat(value)) && parseFloat(value) > 0;\n}\n\n/**\n * Validate that a value is a valid date\n * @param {any} value - The value to validate\n * @returns {boolean} True if valid\n */\nexport function isValidDate(value) {\n  if (value instanceof Date) {\n    return !isNaN(value.getTime());\n  }\n\n  const date = new Date(value);\n  return !isNaN(date.getTime());\n}\n\n/**\n * Validate that a value is not empty\n * @param {any} value - The value to validate\n * @returns {boolean} True if valid\n */\nexport function isNotEmpty(value) {\n  return value !== null && value !== undefined && String(value).trim() !== '';\n}\n\n/**\n * Get validation error message\n * @param {string} validationType - Type of validation\n * @param {any} value - The value that failed validation\n * @param {Object} options - Additional options for error message\n * @returns {string} Error message\n */\nexport function getValidationErrorMessage(validationType, value, options = {}) {\n  const messages = {\n    isNumber: 'Please enter a valid number.',\n    isPositiveNumber: 'Please enter a positive number.',\n    isInRange: `Please enter a number between ${options.min} and ${options.max}.`,\n    isValidInterestRate: 'Please enter a valid interest rate between 0 and 100.',\n    isValidInflationRate: 'Please enter a valid inflation rate between 0 and 20.',\n    isValidLoanTerm: 'Please enter a valid loan term (positive whole number).',\n    isValidDate: 'Please enter a valid date.',\n    isNotEmpty: 'This field is required.',\n  };\n\n  return messages[validationType] || 'Invalid input.';\n}\n","/**\n * Market Rates Component\n * Displays average market rates for different loan types\n * Implements requirement 5.3\n */\n\nimport { getTranslation } from '../utils/translations.js';\nimport { LOAN_TYPES } from '../models/loan.model.js';\nimport * as formatters from '../utils/formatters.js';\n\nclass MarketRates {\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('market-rates-container');\n    this.language = options.language || 'en';\n    this.currentLoanType = options.loanType || 'mortgage';\n    this.currentRate = options.currentRate || 0;\n    this.onRateSelect = options.onRateSelect || (() => {});\n\n    // Market rates data - in a real application, this would come from an API\n    this.marketRatesData = {\n      mortgage: {\n        average: 6.75,\n        min: 5.85,\n        max: 7.65,\n        trend: 'stable',\n        lastUpdated: new Date('2025-07-15'),\n      },\n      auto: {\n        average: 7.25,\n        min: 6.50,\n        max: 9.75,\n        trend: 'up',\n        lastUpdated: new Date('2025-07-16'),\n      },\n      personal: {\n        average: 11.50,\n        min: 8.75,\n        max: 17.99,\n        trend: 'up',\n        lastUpdated: new Date('2025-07-16'),\n      },\n      student: {\n        average: 5.50,\n        min: 4.99,\n        max: 7.25,\n        trend: 'down',\n        lastUpdated: new Date('2025-07-14'),\n      },\n    };\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    this.render();\n    this.bindEvents();\n  }\n\n  /**\n   * Render the market rates component\n   */\n  render() {\n    if (!this.container) return;\n\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    // Get market rates for current loan type\n    const ratesData = this.marketRatesData[this.currentLoanType] || this.marketRatesData.mortgage;\n\n    // Format date based on locale\n    const locale = formatters.getLocaleFromLanguage(this.language);\n    const formattedDate = ratesData.lastUpdated.toLocaleDateString(locale, {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n\n    // Get trend icon\n    const trendIcon = this.getTrendIcon(ratesData.trend);\n\n    // Create market rates HTML\n    const marketRatesHtml = `\n      <div class=\"market-rates\">\n        <div class=\"market-rates-header\">\n          <h3>${t('marketRates.title')}</h3>\n          <div class=\"market-rates-disclaimer\">${t('marketRates.disclaimer')}</div>\n        </div>\n        \n        <div class=\"market-rates-content\">\n          <div class=\"market-rates-summary\">\n            <div class=\"market-rates-average\">\n              <span class=\"market-rates-label\">${t('marketRates.averageRate')}</span>\n              <span class=\"market-rates-value\">${ratesData.average.toFixed(2)}%</span>\n              <span class=\"market-rates-trend ${ratesData.trend}\">${trendIcon}</span>\n            </div>\n            <div class=\"market-rates-range\">\n              <span class=\"market-rates-label\">${t('marketRates.rateRange')}</span>\n              <span class=\"market-rates-value\">${ratesData.min.toFixed(2)}% - ${ratesData.max.toFixed(2)}%</span>\n            </div>\n          </div>\n          \n          <div class=\"market-rates-comparison\">\n            <div class=\"market-rates-your-rate\">\n              <span class=\"market-rates-label\">${t('marketRates.yourRate')}</span>\n              <span class=\"market-rates-value ${this.getRateComparisonClass(this.currentRate, ratesData.average)}\">\n                ${this.currentRate.toFixed(2)}%\n              </span>\n            </div>\n            <div class=\"market-rates-difference\">\n              <span class=\"market-rates-label\">${t('marketRates.difference')}</span>\n              <span class=\"market-rates-value ${this.getRateComparisonClass(this.currentRate, ratesData.average)}\">\n                ${this.formatRateDifference(this.currentRate, ratesData.average)}\n              </span>\n            </div>\n          </div>\n          \n          <div class=\"market-rates-actions\">\n            <button id=\"use-average-rate\" class=\"market-rates-button\">\n              ${t('marketRates.useAverageRate')}\n            </button>\n          </div>\n          \n          <div class=\"market-rates-footer\">\n            <span class=\"market-rates-updated\">${t('marketRates.lastUpdated')}: ${formattedDate}</span>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.container.innerHTML = marketRatesHtml;\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    if (!this.container) return;\n\n    // Use average rate button\n    const useAverageRateButton = this.container.querySelector('#use-average-rate');\n    if (useAverageRateButton) {\n      useAverageRateButton.addEventListener('click', () => {\n        const ratesData = this.marketRatesData[this.currentLoanType] || this.marketRatesData.mortgage;\n        this.onRateSelect(ratesData.average);\n      });\n    }\n  }\n\n  /**\n   * Get trend icon based on trend direction\n   * @param {string} trend - Trend direction (up, down, stable)\n   * @returns {string} HTML for trend icon\n   */\n  getTrendIcon(trend) {\n    switch (trend) {\n      case 'up':\n        return '<span class=\"trend-icon trend-up\" aria-hidden=\"true\">↑</span>';\n      case 'down':\n        return '<span class=\"trend-icon trend-down\" aria-hidden=\"true\">↓</span>';\n      default:\n        return '<span class=\"trend-icon trend-stable\" aria-hidden=\"true\">→</span>';\n    }\n  }\n\n  /**\n   * Get CSS class for rate comparison\n   * @param {number} currentRate - Current rate\n   * @param {number} averageRate - Average market rate\n   * @returns {string} CSS class\n   */\n  getRateComparisonClass(currentRate, averageRate) {\n    const difference = currentRate - averageRate;\n\n    if (Math.abs(difference) <= 0.25) {\n      return 'rate-average';\n    } if (difference < 0) {\n      return 'rate-below';\n    }\n    return 'rate-above';\n  }\n\n  /**\n   * Format rate difference\n   * @param {number} currentRate - Current rate\n   * @param {number} averageRate - Average market rate\n   * @returns {string} Formatted rate difference\n   */\n  formatRateDifference(currentRate, averageRate) {\n    const difference = currentRate - averageRate;\n    const t = (key) => getTranslation(key, this.language);\n\n    if (Math.abs(difference) <= 0.1) {\n      return t('marketRates.sameAsAverage');\n    } if (difference < 0) {\n      return `${Math.abs(difference).toFixed(2)}% ${t('marketRates.belowAverage')}`;\n    }\n    return `${difference.toFixed(2)}% ${t('marketRates.aboveAverage')}`;\n  }\n\n  /**\n   * Update current loan type and re-render\n   * @param {string} loanType - Loan type\n   */\n  updateLoanType(loanType) {\n    if (LOAN_TYPES[loanType] && this.currentLoanType !== loanType) {\n      this.currentLoanType = loanType;\n      this.render();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * Update current interest rate and re-render\n   * @param {number} rate - Interest rate\n   */\n  updateCurrentRate(rate) {\n    if (this.currentRate !== rate) {\n      this.currentRate = rate;\n      this.render();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * Update language and re-render component\n   * @param {string} language - Language code\n   */\n  updateLanguage(language) {\n    if (this.language !== language) {\n      this.language = language;\n      this.render();\n      this.bindEvents();\n    }\n  }\n}\n\nexport default MarketRates;\n","/**\n * Calculator Form Component\n * Handles user input for loan calculations\n * Implements requirements 1.1, 1.2, 2.1, 2.6\n */\n\nimport Loan, { LOAN_TYPES, PAYMENT_FREQUENCIES } from '../models/loan.model.js';\nimport * as validators from '../utils/validators.js';\nimport * as formatters from '../utils/formatters.js';\nimport { getTranslation } from '../utils/translations.js';\nimport { initTooltips } from '../utils/tooltips.js';\nimport MarketRates from './market-rates.js';\n\nclass CalculatorForm {\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('calculator-form-container');\n    this.onCalculate = options.onCalculate || (() => {});\n    this.validators = {\n      principal: validators.isPositiveNumber,\n      interestRate: validators.isValidInterestRate,\n      term: validators.isValidLoanTerm,\n      downPayment: validators.isNumber,\n      additionalPayment: validators.isNumber,\n      inflationRate: validators.isValidInflationRate,\n      ...options.validators,\n    };\n\n    // Language settings\n    this.language = options.language || 'en';\n    this.locale = formatters.getLocaleFromLanguage(this.language);\n\n    // Initialize with default loan\n    this.formData = Loan.createDefault('mortgage').toJSON();\n\n    // Set default inflation rate if not present\n    if (this.formData.inflationRate === undefined) {\n      this.formData.inflationRate = 2.5;\n    }\n\n    // Market rates component\n    this.marketRatesComponent = null;\n\n    this.init();\n  }\n\n  init() {\n    this.render();\n    this.bindEvents();\n\n    // Initialize market rates component\n    this.initMarketRates();\n\n    // Trigger initial calculation\n    this.handleCalculate();\n  }\n\n  /**\n   * Initialize market rates component\n   */\n  initMarketRates() {\n    const marketRatesContainer = this.container.querySelector('#market-rates-container');\n    if (!marketRatesContainer) return;\n\n    this.marketRatesComponent = new MarketRates({\n      container: marketRatesContainer,\n      language: this.language,\n      loanType: this.formData.type,\n      currentRate: this.formData.interestRate,\n      onRateSelect: (rate) => {\n        // Update interest rate input and slider\n        const interestRateInput = this.container.querySelector('#interestRate');\n        const interestRateSlider = this.container.querySelector('#interestRate-slider');\n\n        if (interestRateInput && interestRateSlider) {\n          interestRateInput.value = rate;\n          interestRateSlider.value = rate;\n\n          // Trigger calculation update\n          this.handleCalculate();\n        }\n      },\n    });\n  }\n\n  render() {\n    if (!this.container) return;\n\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    const formHtml = `\n      <div class=\"calculator-form\">\n        <h2>${t('form.title')}</h2>\n        <form id=\"loan-calculator-form\">\n          <!-- Loan Type Selector -->\n          <div class=\"form-group\">\n            <label for=\"loan-type\" class=\"form-label\">\n              ${t('form.loanType')}\n              <span class=\"info-icon\" data-tooltip=\"${t('tooltips.loanType')}\" data-tooltip-position=\"top\">?</span>\n            </label>\n            <select id=\"loan-type\" class=\"form-select\" name=\"type\">\n              ${Object.entries(LOAN_TYPES).map(([key, value]) => {\n    const translationKey = `form.${key}`;\n    const description = t(translationKey) !== translationKey ? t(translationKey) : value.description;\n    return `<option value=\"${key}\" ${this.formData.type === key ? 'selected' : ''}>${description}</option>`;\n  }).join('')}\n            </select>\n          </div>\n          \n          <!-- Loan Amount -->\n          <div class=\"form-group\">\n            <label for=\"principal\" class=\"form-label\">\n              ${t('form.loanAmount')} (${this.formData.currency || 'USD'})\n            </label>\n            <input \n              type=\"number\" \n              id=\"principal\" \n              class=\"form-input\" \n              name=\"principal\" \n              value=\"${this.formData.principal}\" \n              min=\"${LOAN_TYPES[this.formData.type].minAmount}\" \n              max=\"${LOAN_TYPES[this.formData.type].maxAmount}\" \n              step=\"1000\"\n            >\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"principal-slider\" \n                class=\"form-slider\" \n                min=\"${LOAN_TYPES[this.formData.type].minAmount}\" \n                max=\"${LOAN_TYPES[this.formData.type].maxAmount}\" \n                step=\"1000\" \n                value=\"${this.formData.principal}\"\n              >\n              <div class=\"range-values\">\n                <span>${formatters.formatCurrency(LOAN_TYPES[this.formData.type].minAmount, this.formData.currency || 'USD', this.locale)}</span>\n                <span>${formatters.formatCurrency(LOAN_TYPES[this.formData.type].maxAmount, this.formData.currency || 'USD', this.locale)}</span>\n              </div>\n            </div>\n            <div class=\"invalid-feedback\" id=\"principal-error\"></div>\n          </div>\n          \n          <!-- Down Payment -->\n          <div class=\"form-group\">\n            <label for=\"downPayment\" class=\"form-label\">${t('form.downPayment')} (${this.formData.currency || 'USD'})</label>\n            <input \n              type=\"number\" \n              id=\"downPayment\" \n              class=\"form-input\" \n              name=\"downPayment\" \n              value=\"${this.formData.downPayment}\" \n              min=\"0\" \n              max=\"${this.formData.principal}\" \n              step=\"1000\"\n            >\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"downPayment-slider\" \n                class=\"form-slider\" \n                min=\"0\" \n                max=\"${this.formData.principal}\" \n                step=\"1000\" \n                value=\"${this.formData.downPayment}\"\n              >\n              <div class=\"range-values\">\n                <span>${formatters.formatCurrency(0, this.formData.currency || 'USD', this.locale)}</span>\n                <span>${formatters.formatCurrency(this.formData.principal, this.formData.currency || 'USD', this.locale)}</span>\n              </div>\n            </div>\n            <div class=\"invalid-feedback\" id=\"downPayment-error\"></div>\n          </div>\n          \n          <!-- Interest Rate -->\n          <div class=\"form-group\">\n            <label for=\"interestRate\" class=\"form-label\">${t('form.interestRate')} (%)</label>\n            <input \n              type=\"number\" \n              id=\"interestRate\" \n              class=\"form-input\" \n              name=\"interestRate\" \n              value=\"${this.formData.interestRate}\" \n              min=\"0\" \n              max=\"30\" \n              step=\"0.125\"\n            >\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"interestRate-slider\" \n                class=\"form-slider\" \n                min=\"0\" \n                max=\"30\" \n                step=\"0.125\" \n                value=\"${this.formData.interestRate}\"\n              >\n              <div class=\"range-values\">\n                <span>0%</span>\n                <span>30%</span>\n              </div>\n            </div>\n            <div class=\"invalid-feedback\" id=\"interestRate-error\"></div>\n          </div>\n          \n          <!-- Market Rates -->\n          <div id=\"market-rates-container\" class=\"market-rates-container\"></div>\n          \n          <!-- Loan Term -->\n          <div class=\"form-group\">\n            <label for=\"term\" class=\"form-label\">${t('form.loanTerm')} (${t('form.months')})</label>\n            <input \n              type=\"number\" \n              id=\"term\" \n              class=\"form-input\" \n              name=\"term\" \n              value=\"${this.formData.term}\" \n              min=\"1\" \n              max=\"600\" \n              step=\"1\"\n            >\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"term-slider\" \n                class=\"form-slider\" \n                min=\"1\" \n                max=\"600\" \n                step=\"1\" \n                value=\"${this.formData.term}\"\n              >\n              <div class=\"range-values\">\n                <span>1 ${t('form.months')}</span>\n                <span>600 ${t('form.months')}</span>\n              </div>\n            </div>\n            <div class=\"term-presets\">\n              <button type=\"button\" class=\"term-preset\" data-term=\"60\">5 ${t('form.years')}</button>\n              <button type=\"button\" class=\"term-preset\" data-term=\"180\">15 ${t('form.years')}</button>\n              <button type=\"button\" class=\"term-preset\" data-term=\"360\">30 ${t('form.years')}</button>\n            </div>\n            <div class=\"invalid-feedback\" id=\"term-error\"></div>\n          </div>\n          \n          <!-- Payment Frequency -->\n          <div class=\"form-group\">\n            <label for=\"paymentFrequency\" class=\"form-label\">${t('form.paymentFrequency')}</label>\n            <select id=\"paymentFrequency\" class=\"form-select\" name=\"paymentFrequency\">\n              ${Object.entries(PAYMENT_FREQUENCIES).map(([key, value]) => {\n    const translationKey = `form.${key}`;\n    const description = t(translationKey) !== translationKey ? t(translationKey) : value.description;\n    return `<option value=\"${key}\" ${this.formData.paymentFrequency === key ? 'selected' : ''}>${description}</option>`;\n  }).join('')}\n            </select>\n          </div>\n          \n          <!-- Start Date -->\n          <div class=\"form-group\">\n            <label for=\"startDate\" class=\"form-label\">${t('form.startDate')}</label>\n            <input \n              type=\"date\" \n              id=\"startDate\" \n              class=\"form-input\" \n              name=\"startDate\" \n              value=\"${new Date(this.formData.startDate).toISOString().split('T')[0]}\"\n            >\n            <div class=\"invalid-feedback\" id=\"startDate-error\"></div>\n          </div>\n          \n          <!-- Additional Payment -->\n          <div class=\"form-group\">\n            <label for=\"additionalPayment\" class=\"form-label\">${t('form.additionalPayment')} (${this.formData.currency || 'USD'})</label>\n            <input \n              type=\"number\" \n              id=\"additionalPayment\" \n              class=\"form-input\" \n              name=\"additionalPayment\" \n              value=\"${this.formData.additionalPayment}\" \n              min=\"0\" \n              step=\"10\"\n            >\n            <div class=\"invalid-feedback\" id=\"additionalPayment-error\"></div>\n          </div>\n          \n          <!-- Inflation Rate -->\n          <div class=\"form-group\">\n            <label for=\"inflationRate\" class=\"form-label\">\n              ${t('form.inflationRate') || 'Inflation Rate'} (%)\n              <span class=\"info-icon\" data-tooltip=\"${t('tooltips.inflationRate') || 'Annual inflation rate used to calculate the real value of future payments.'}\" data-tooltip-position=\"top\">?</span>\n            </label>\n            <input \n              type=\"number\" \n              id=\"inflationRate\" \n              class=\"form-input\" \n              name=\"inflationRate\" \n              value=\"${this.formData.inflationRate || 2.5}\" \n              min=\"0\" \n              max=\"20\" \n              step=\"0.1\"\n            >\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"inflationRate-slider\" \n                class=\"form-slider\" \n                min=\"0\" \n                max=\"20\" \n                step=\"0.1\" \n                value=\"${this.formData.inflationRate || 2.5}\"\n              >\n              <div class=\"range-values\">\n                <span>0%</span>\n                <span>20%</span>\n              </div>\n            </div>\n            <div class=\"invalid-feedback\" id=\"inflationRate-error\"></div>\n          </div>\n          \n          <!-- Calculate Button -->\n          <div class=\"form-group\">\n            <button type=\"submit\" class=\"form-button\" id=\"calculate-button\">${t('form.calculate')}</button>\n            <button type=\"button\" class=\"form-button\" id=\"reset-button\">${t('form.reset')}</button>\n          </div>\n        </form>\n      </div>\n    `;\n\n    this.container.innerHTML = formHtml;\n  }\n\n  bindEvents() {\n    if (!this.container) return;\n\n    // Get form element\n    const form = this.container.querySelector('#loan-calculator-form');\n    if (!form) return;\n\n    // Form submission\n    form.addEventListener('submit', (e) => {\n      e.preventDefault();\n      this.handleCalculate();\n    });\n\n    // Reset button\n    const resetButton = this.container.querySelector('#reset-button');\n    if (resetButton) {\n      resetButton.addEventListener('click', () => this.reset());\n    }\n\n    // Loan type change\n    const loanTypeSelect = this.container.querySelector('#loan-type');\n    if (loanTypeSelect) {\n      loanTypeSelect.addEventListener('change', (e) => {\n        const loanType = e.target.value;\n        this.updateLoanTypeParameters(loanType);\n      });\n    }\n\n    // Sync sliders with input fields\n    this.bindSliderInputSync('principal');\n    this.bindSliderInputSync('downPayment');\n    this.bindSliderInputSync('interestRate');\n    this.bindSliderInputSync('term');\n    this.bindSliderInputSync('inflationRate');\n\n    // Term presets\n    const termPresets = this.container.querySelectorAll('.term-preset');\n    termPresets.forEach((preset) => {\n      preset.addEventListener('click', (e) => {\n        const term = parseInt(e.target.dataset.term, 10);\n        const termInput = this.container.querySelector('#term');\n        const termSlider = this.container.querySelector('#term-slider');\n\n        if (termInput && termSlider) {\n          termInput.value = term;\n          termSlider.value = term;\n\n          // Trigger validation and real-time update\n          this.validateField('term', term);\n          this.handleCalculate();\n        }\n      });\n    });\n\n    // Real-time validation for all inputs\n    const inputs = form.querySelectorAll('input, select');\n    inputs.forEach((input) => {\n      input.addEventListener('input', (e) => {\n        const field = e.target.name || e.target.id;\n        const { value } = e.target;\n\n        this.validateField(field, value);\n\n        // Update down payment max when principal changes\n        if (field === 'principal') {\n          const downPaymentInput = this.container.querySelector('#downPayment');\n          const downPaymentSlider = this.container.querySelector('#downPayment-slider');\n\n          if (downPaymentInput && downPaymentSlider) {\n            const principal = parseFloat(value);\n            downPaymentInput.max = principal;\n            downPaymentSlider.max = principal;\n\n            // Ensure down payment is not greater than principal\n            if (parseFloat(downPaymentInput.value) > principal) {\n              downPaymentInput.value = principal;\n              downPaymentSlider.value = principal;\n\n              // Trigger input event to update formData\n              const inputEvent = new Event('input');\n              downPaymentInput.dispatchEvent(inputEvent);\n            }\n          }\n        }\n\n        // Real-time calculation updates\n        this.handleCalculate();\n      });\n    });\n\n    // Initialize tooltips\n    initTooltips(this.container);\n  }\n\n  /**\n   * Bind slider and input field to sync with each other\n   * @param {string} fieldName - Name of the field\n   */\n  bindSliderInputSync(fieldName) {\n    const input = this.container.querySelector(`#${fieldName}`);\n    const slider = this.container.querySelector(`#${fieldName}-slider`);\n\n    if (input && slider) {\n      // Update input when slider changes\n      slider.addEventListener('input', (e) => {\n        input.value = e.target.value;\n        this.validateField(fieldName, e.target.value);\n      });\n\n      // Update slider when input changes\n      input.addEventListener('input', (e) => {\n        slider.value = e.target.value;\n      });\n    }\n  }\n\n  /**\n   * Update form parameters based on loan type\n   * @param {string} loanType - Type of loan\n   */\n  updateLoanTypeParameters(loanType) {\n    if (!LOAN_TYPES[loanType]) return;\n\n    const typeDefaults = LOAN_TYPES[loanType];\n\n    // Update principal min/max\n    const principalInput = this.container.querySelector('#principal');\n    const principalSlider = this.container.querySelector('#principal-slider');\n\n    if (principalInput && principalSlider) {\n      principalInput.min = typeDefaults.minAmount;\n      principalInput.max = typeDefaults.maxAmount;\n      principalSlider.min = typeDefaults.minAmount;\n      principalSlider.max = typeDefaults.maxAmount;\n\n      // Update range display\n      const rangeValues = principalSlider.parentElement.querySelector('.range-values');\n      if (rangeValues) {\n        rangeValues.innerHTML = `\n          <span>${formatters.formatCurrency(typeDefaults.minAmount, this.formData.currency || 'USD', this.locale)}</span>\n          <span>${formatters.formatCurrency(typeDefaults.maxAmount, this.formData.currency || 'USD', this.locale)}</span>\n        `;\n      }\n\n      // Adjust value if outside new range\n      const currentValue = parseFloat(principalInput.value);\n      if (currentValue < typeDefaults.minAmount) {\n        principalInput.value = typeDefaults.minAmount;\n        principalSlider.value = typeDefaults.minAmount;\n      } else if (currentValue > typeDefaults.maxAmount) {\n        principalInput.value = typeDefaults.maxAmount;\n        principalSlider.value = typeDefaults.maxAmount;\n      }\n    }\n\n    // Update term default\n    const termInput = this.container.querySelector('#term');\n    const termSlider = this.container.querySelector('#term-slider');\n\n    if (termInput && termSlider) {\n      termInput.value = typeDefaults.defaultTerm;\n      termSlider.value = typeDefaults.defaultTerm;\n    }\n\n    // Update interest rate default\n    const interestRateInput = this.container.querySelector('#interestRate');\n    const interestRateSlider = this.container.querySelector('#interestRate-slider');\n\n    if (interestRateInput && interestRateSlider) {\n      interestRateInput.value = typeDefaults.defaultRate;\n      interestRateSlider.value = typeDefaults.defaultRate;\n    }\n\n    // Update market rates component with new loan type\n    if (this.marketRatesComponent) {\n      this.marketRatesComponent.updateLoanType(loanType);\n      this.marketRatesComponent.updateCurrentRate(typeDefaults.defaultRate);\n    }\n\n    // Trigger calculation with new defaults\n    this.handleCalculate();\n  }\n\n  /**\n   * Validate a single field\n   * @param {string} field - Field name\n   * @param {any} value - Field value\n   * @returns {boolean} True if valid\n   */\n  validateField(field, value) {\n    const validator = this.validators[field];\n    if (!validator) return true;\n\n    let isValid = true;\n    let errorMessage = '';\n\n    try {\n      isValid = validator(value);\n      \n      if (!isValid) {\n        // Get appropriate error message based on field and value\n        errorMessage = this.getFieldErrorMessage(field, value);\n      }\n    } catch (error) {\n      isValid = false;\n      errorMessage = `Validation error: ${error.message}`;\n    }\n\n    // Update UI\n    const input = this.container.querySelector(`#${field}`);\n    const errorElement = this.container.querySelector(`#${field}-error`);\n\n    if (input && errorElement) {\n      if (isValid) {\n        input.classList.remove('is-invalid');\n        errorElement.textContent = '';\n      } else {\n        input.classList.add('is-invalid');\n        errorElement.textContent = errorMessage;\n      }\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Get appropriate error message for a field\n   * @param {string} field - Field name\n   * @param {any} value - Field value\n   * @returns {string} Error message\n   */\n  getFieldErrorMessage(field, value) {\n    const input = this.container.querySelector(`#${field}`);\n    const min = input ? parseFloat(input.min) : null;\n    const max = input ? parseFloat(input.max) : null;\n    const numValue = parseFloat(value);\n\n    switch (field) {\n      case 'principal':\n        if (isNaN(numValue) || numValue <= 0) {\n          return 'Please enter a valid loan amount greater than $0';\n        }\n        if (min !== null && numValue < min) {\n          return `Loan amount must be at least $${min.toLocaleString()}`;\n        }\n        if (max !== null && numValue > max) {\n          return `Loan amount cannot exceed $${max.toLocaleString()}`;\n        }\n        return 'Please enter a valid loan amount';\n\n      case 'interestRate':\n        if (isNaN(numValue) || numValue < 0) {\n          return 'Interest rate must be 0% or higher';\n        }\n        if (numValue > 50) {\n          return 'Interest rate seems unusually high. Please verify.';\n        }\n        return 'Please enter a valid interest rate';\n\n      case 'term':\n        if (isNaN(numValue) || numValue <= 0) {\n          return 'Loan term must be greater than 0 months';\n        }\n        if (numValue > 600) {\n          return 'Loan term cannot exceed 600 months (50 years)';\n        }\n        return 'Please enter a valid loan term';\n\n      case 'downPayment':\n        if (isNaN(numValue) || numValue < 0) {\n          return 'Down payment cannot be negative';\n        }\n        if (max !== null && numValue > max) {\n          return 'Down payment cannot exceed the loan amount';\n        }\n        return 'Please enter a valid down payment';\n\n      case 'additionalPayment':\n        if (isNaN(numValue) || numValue < 0) {\n          return 'Additional payment cannot be negative';\n        }\n        return 'Please enter a valid additional payment amount';\n\n      case 'inflationRate':\n        if (isNaN(numValue) || numValue < 0) {\n          return 'Inflation rate cannot be negative';\n        }\n        if (numValue > 20) {\n          return 'Inflation rate seems unusually high. Please verify.';\n        }\n        return 'Please enter a valid inflation rate';\n\n      default:\n        return 'Please enter a valid value';\n    }\n  }\n\n  /**\n   * Validate all form fields\n   * @returns {boolean} True if all fields are valid\n   */\n  validate() {\n    let isValid = true;\n    const form = this.container.querySelector('#loan-calculator-form');\n\n    if (!form) return false;\n\n    // Validate each field\n    const inputs = form.querySelectorAll('input, select');\n    inputs.forEach((input) => {\n      const field = input.name || input.id;\n      const { value } = input;\n\n      if (this.validators[field]) {\n        const fieldValid = this.validateField(field, value);\n        isValid = isValid && fieldValid;\n      }\n    });\n\n    return isValid;\n  }\n\n  /**\n   * Handle form calculation\n   */\n  async handleCalculate() {\n    const formData = this.getFormData();\n\n    // Validate form data before calculation\n    if (!this.validate()) {\n      this.showFormError('Please correct the errors in the form before calculating.');\n      return;\n    }\n\n    // Disable calculate button during calculation\n    const calculateButton = this.container.querySelector('#calculate-button');\n    if (calculateButton) {\n      calculateButton.disabled = true;\n      calculateButton.textContent = 'Calculating...';\n    }\n\n    // Create loan object from form data\n    try {\n      const loan = Loan.fromJSON(formData);\n\n      // Update market rates component with current interest rate\n      if (this.marketRatesComponent) {\n        this.marketRatesComponent.updateCurrentRate(formData.interestRate);\n      }\n\n      // Call the calculation callback\n      if (typeof this.onCalculate === 'function') {\n        await this.onCalculate(loan);\n      }\n    } catch (error) {\n      console.error('Error calculating loan:', error);\n      this.showFormError(`Calculation error: ${error.message || 'Unknown error occurred'}`);\n    } finally {\n      // Re-enable calculate button\n      if (calculateButton) {\n        calculateButton.disabled = false;\n        calculateButton.textContent = 'Calculate';\n      }\n    }\n  }\n\n  /**\n   * Show form error message\n   * @param {string} message - Error message to display\n   */\n  showFormError(message) {\n    // Remove any existing error messages\n    const existingError = this.container.querySelector('.form-error-message');\n    if (existingError) {\n      existingError.remove();\n    }\n\n    // Create error message element\n    const errorContainer = document.createElement('div');\n    errorContainer.className = 'form-error-message';\n    errorContainer.innerHTML = `\n      <div class=\"error-content\">\n        <span class=\"error-icon\">⚠️</span>\n        <span class=\"error-text\">${message}</span>\n        <button class=\"error-close\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\n      </div>\n    `;\n\n    // Insert at the top of the form\n    const form = this.container.querySelector('#loan-calculator-form');\n    if (form) {\n      form.insertBefore(errorContainer, form.firstChild);\n\n      // Auto-remove error message after 8 seconds\n      setTimeout(() => {\n        if (errorContainer.parentNode) {\n          errorContainer.remove();\n        }\n      }, 8000);\n    }\n  }\n\n  /**\n   * Get form data from inputs\n   * @returns {Object} Form data\n   */\n  getFormData() {\n    const form = this.container.querySelector('#loan-calculator-form');\n    if (!form) return this.formData;\n\n    const formData = {\n      ...this.formData,\n    };\n\n    // Get values from form inputs\n    const inputs = form.querySelectorAll('input, select');\n    inputs.forEach((input) => {\n      const field = input.name || input.id;\n      let { value } = input;\n\n      // Convert numeric values\n      if (input.type === 'number' || input.type === 'range') {\n        value = parseFloat(value);\n      }\n\n      // Convert date values\n      if (input.type === 'date') {\n        value = new Date(value);\n      }\n\n      formData[field] = value;\n    });\n\n    this.formData = formData;\n    return formData;\n  }\n\n  /**\n   * Set form data and update UI\n   * @param {Object} data - Form data\n   */\n  setFormData(data) {\n    this.formData = {\n      ...this.formData,\n      ...data,\n    };\n\n    // Update form inputs\n    const form = this.container.querySelector('#loan-calculator-form');\n    if (!form) return;\n\n    Object.entries(data).forEach(([field, value]) => {\n      const input = form.querySelector(`#${field}`);\n      const slider = form.querySelector(`#${field}-slider`);\n\n      if (input) {\n        // Handle date fields\n        if (input.type === 'date' && value instanceof Date) {\n          const [dateString] = value.toISOString().split('T');\n          input.value = dateString;\n        } else {\n          input.value = value;\n        }\n      }\n\n      // Update sliders\n      if (slider) {\n        slider.value = value;\n      }\n    });\n\n    // Validate and calculate\n    this.validate();\n    this.handleCalculate();\n  }\n\n  /**\n   * Reset form to defaults\n   */\n  reset() {\n    const loanType = this.formData.type || 'mortgage';\n    const defaultLoan = Loan.createDefault(loanType);\n\n    // Preserve inflation rate setting\n    const inflationRate = this.formData.inflationRate || 2.5;\n\n    this.setFormData({\n      ...defaultLoan.toJSON(),\n      inflationRate,\n    });\n  }\n\n  /**\n   * Update language and re-render component\n   * @param {string} language - Language code\n   */\n  updateLanguage(language) {\n    if (this.language !== language) {\n      this.language = language;\n      this.locale = formatters.getLocaleFromLanguage(language);\n      this.render();\n      this.bindEvents();\n\n      // Re-initialize market rates with new language\n      this.initMarketRates();\n\n      // Update market rates component language if it exists\n      if (this.marketRatesComponent) {\n        this.marketRatesComponent.updateLanguage(language);\n      }\n    }\n  }\n\n  /**\n   * Update currency format\n   * @param {string} currency - Currency code\n   */\n  updateCurrencyFormat(currency) {\n    if (this.formData.currency !== currency) {\n      this.formData.currency = currency;\n      this.render();\n      this.bindEvents();\n    }\n  }\n}\n\nexport default CalculatorForm;\n","/**\n * Translations Utility\n * Provides translations for the application in different languages\n */\n\n// English translations (default)\nconst en = {\n  // Calculator form\n  form: {\n    title: 'Loan Calculator',\n    loanAmount: 'Loan Amount',\n    interestRate: 'Interest Rate',\n    loanTerm: 'Loan Term',\n    loanType: 'Loan Type',\n    paymentFrequency: 'Payment Frequency',\n    downPayment: 'Down Payment',\n    additionalPayment: 'Additional Payment',\n    startDate: 'Start Date',\n    calculate: 'Calculate',\n    reset: 'Reset',\n    years: 'Years',\n    months: 'Months',\n    mortgage: 'Mortgage',\n    auto: 'Auto',\n    personal: 'Personal',\n    student: 'Student',\n    monthly: 'Monthly',\n    biWeekly: 'Bi-Weekly',\n    weekly: 'Weekly',\n  },\n\n  // Market rates\n  marketRates: {\n    title: 'Current Market Rates',\n    disclaimer: 'Rates are estimates based on national averages and may vary by location, credit score, and other factors.',\n    averageRate: 'Average Rate',\n    rateRange: 'Rate Range',\n    yourRate: 'Your Rate',\n    difference: 'Difference',\n    belowAverage: 'below average',\n    aboveAverage: 'above average',\n    sameAsAverage: 'same as average',\n    useAverageRate: 'Use Average Rate',\n    lastUpdated: 'Last Updated',\n    viewTrends: 'View Rate Trends',\n    compareRates: 'Compare Your Rate',\n  },\n\n  // Glossary\n  glossary: {\n    title: 'Financial Terms Glossary',\n    openGlossary: 'Open Financial Terms Glossary',\n    close: 'Close Glossary',\n    search: 'Search glossary terms',\n    searchPlaceholder: 'Search for terms...',\n    noResults: 'No matching terms found',\n    searchResults: '{count} terms found',\n    opened: 'Financial glossary opened',\n    closed: 'Financial glossary closed',\n  },\n\n  // Results display\n  results: {\n    monthlyPayment: 'Monthly Payment',\n    totalPayment: 'Total Payment',\n    totalInterest: 'Total Interest',\n    payoffDate: 'Payoff Date',\n    interestSavings: 'Interest Savings',\n    timeReduction: 'Time Reduction',\n    saveCalculation: 'Save Calculation',\n    share: 'Share',\n    export: 'Export',\n    print: 'Print',\n  },\n\n  // Amortization table\n  amortization: {\n    title: 'Amortization Schedule',\n    paymentNumber: 'Payment #',\n    paymentDate: 'Date',\n    payment: 'Payment',\n    principal: 'Principal',\n    interest: 'Interest',\n    balance: 'Balance',\n    totalPrincipal: 'Total Principal',\n    totalInterest: 'Total Interest',\n    filter: 'Filter',\n    showAll: 'Show All',\n    annual: 'Annual Summary',\n    noData: 'No data available',\n  },\n\n  // Charts\n  charts: {\n    title: 'Payment Charts',\n    principalVsInterest: 'Principal vs Interest',\n    paymentBreakdown: 'Payment Breakdown',\n    amortizationSchedule: 'Amortization Schedule',\n    principal: 'Principal',\n    interest: 'Interest',\n    balance: 'Balance',\n    time: 'Time',\n  },\n\n  // Saved calculations\n  savedCalculations: {\n    title: 'Saved Calculations',\n    noSavedCalculations: 'No saved calculations',\n    load: 'Load',\n    delete: 'Delete',\n    compare: 'Compare',\n    rename: 'Rename',\n    confirmDelete: 'Are you sure you want to delete this calculation?',\n    enterName: 'Enter a name for this calculation',\n    defaultName: 'Calculation',\n  },\n\n  // Settings\n  settings: {\n    title: 'Settings',\n    theme: 'Theme',\n    language: 'Language',\n    currency: 'Currency',\n    light: 'Light',\n    dark: 'Dark',\n    dateFormat: 'Date Format',\n    numberFormat: 'Number Format',\n  },\n\n  // Comparison view\n  comparison: {\n    title: 'Loan Comparison',\n    scenario: 'Scenario',\n    difference: 'Difference',\n    savings: 'Savings',\n  },\n\n  // Common\n  common: {\n    yes: 'Yes',\n    no: 'No',\n    ok: 'OK',\n    cancel: 'Cancel',\n    save: 'Save',\n    close: 'Close',\n    loading: 'Loading...',\n    error: 'An error occurred',\n    success: 'Success',\n    warning: 'Warning',\n    info: 'Information',\n  },\n\n  // Tooltips and guidance\n  tooltips: {\n    loanType: 'Select the type of loan you need. Different loan types have different default values and limits.',\n    loanAmount: 'Enter the total amount you wish to borrow.',\n    interestRate: 'The annual interest rate for your loan. Higher rates mean higher monthly payments.',\n    loanTerm: 'The length of time to repay the loan. Longer terms mean lower monthly payments but more interest paid overall.',\n    downPayment: 'Initial payment made upfront. A larger down payment reduces your loan amount and monthly payments.',\n    additionalPayment: 'Extra amount paid each period beyond the required payment. This reduces your loan term and total interest.',\n    paymentFrequency: 'How often you make payments. More frequent payments can reduce total interest paid.',\n    startDate: 'The date when your loan begins and first payment is due.',\n\n    // Results tooltips\n    monthlyPayment: 'The amount you need to pay each period to repay the loan on schedule.',\n    totalPayment: 'The total amount you will pay over the life of the loan, including principal and interest.',\n    totalInterest: 'The total amount of interest you will pay over the life of the loan.',\n    payoffDate: 'The date when your loan will be fully paid off if you make all scheduled payments.',\n    interestSavings: 'The amount of interest you save by making additional payments.',\n\n    // Tutorial\n    startTutorial: 'Start a guided tour of the loan calculator features.',\n    showGuidance: 'Show guidance for interpreting your loan results.',\n\n    // Guidance\n    interpretingResults: 'How to interpret your loan calculation results',\n    affordabilityGuidance: 'Understanding loan affordability',\n    refinanceGuidance: 'When to consider refinancing',\n  },\n\n  // Guidance\n  guidance: {\n    title: 'Loan Calculator Guidance',\n    help: 'Help & Tips',\n    tutorial: 'Interactive Tutorial',\n\n    interpretingResultsTitle: 'Interpreting Your Results',\n    interpretingResultsContent: 'Your loan calculation results show the monthly payment, total payment, total interest, and payoff date. The monthly payment is the amount you need to pay each period to repay the loan on schedule. The total payment is the sum of all payments over the life of the loan. The total interest is the cost of borrowing the money.',\n\n    affordabilityTitle: 'Understanding Loan Affordability',\n    affordabilityContent: 'When determining how much you can afford to borrow, consider the following:',\n    affordabilityTip1: 'Your monthly loan payment should ideally be less than 28% of your gross monthly income.',\n    affordabilityTip2: 'Consider all other debts and expenses when determining affordability.',\n    affordabilityTip3: 'Remember to account for taxes, insurance, and maintenance costs for mortgages.',\n\n    additionalPaymentsTitle: 'Benefits of Additional Payments',\n    additionalPaymentsContent: 'Making additional payments can significantly reduce your loan term and the total interest paid. Even small additional payments can make a big difference over time.',\n\n    refinanceTitle: 'When to Consider Refinancing',\n    refinanceContent: 'Refinancing may be beneficial in the following situations:',\n    refinanceTip1: 'When interest rates have dropped significantly since you obtained your loan.',\n    refinanceTip2: 'When you want to change the term of your loan (shorter or longer).',\n    refinanceTip3: 'When you want to switch from a variable to a fixed-rate loan or vice versa.',\n  },\n\n  // Tutorial\n  tutorial: {\n    loanTypeTitle: 'Loan Type',\n    loanTypeContent: 'Start by selecting the type of loan you need. This will set appropriate defaults for your loan calculation.',\n\n    loanAmountTitle: 'Loan Amount',\n    loanAmountContent: 'Enter the total amount you wish to borrow. You can use the slider or type the exact amount.',\n\n    interestRateTitle: 'Interest Rate',\n    interestRateContent: 'Enter the annual interest rate for your loan. This is the cost of borrowing the money, expressed as a percentage.',\n\n    loanTermTitle: 'Loan Term',\n    loanTermContent: 'Enter the length of time to repay the loan in months. Longer terms mean lower monthly payments but more interest paid overall.',\n\n    termPresetsTitle: 'Term Presets',\n    termPresetsContent: 'Click these buttons to quickly set common loan terms like 5, 15, or 30 years.',\n\n    additionalPaymentTitle: 'Additional Payment',\n    additionalPaymentContent: 'Enter any extra amount you plan to pay each period. This can significantly reduce your loan term and total interest.',\n\n    calculateTitle: 'Calculate',\n    calculateContent: 'Click this button to calculate your loan based on the entered parameters.',\n\n    resultsTitle: 'Results Summary',\n    resultsContent: 'This section shows your monthly payment, total payment, total interest, and payoff date.',\n\n    amortizationTitle: 'Amortization Schedule',\n    amortizationContent: 'This table shows the breakdown of each payment over the life of the loan, including how much goes to principal and interest.',\n\n    chartsTitle: 'Payment Charts',\n    chartsContent: 'These charts visualize your loan data, showing the breakdown of principal vs. interest and the amortization schedule over time.',\n\n    completedTitle: 'Tutorial Completed',\n    completedContent: 'You\\'ve completed the tutorial! You now know how to use the loan calculator to make informed financial decisions.',\n  },\n};\n\n// Spanish translations\nconst es = {\n  // Calculator form\n  form: {\n    title: 'Calculadora de Préstamos',\n    loanAmount: 'Monto del Préstamo',\n    interestRate: 'Tasa de Interés',\n    loanTerm: 'Plazo del Préstamo',\n    loanType: 'Tipo de Préstamo',\n    paymentFrequency: 'Frecuencia de Pago',\n    downPayment: 'Pago Inicial',\n    additionalPayment: 'Pago Adicional',\n    startDate: 'Fecha de Inicio',\n    calculate: 'Calcular',\n    reset: 'Reiniciar',\n    years: 'Años',\n    months: 'Meses',\n    mortgage: 'Hipoteca',\n    auto: 'Auto',\n    personal: 'Personal',\n    student: 'Estudiantil',\n    monthly: 'Mensual',\n    biWeekly: 'Quincenal',\n    weekly: 'Semanal',\n  },\n\n  // Market rates\n  marketRates: {\n    title: 'Tasas Actuales del Mercado',\n    disclaimer: 'Las tasas son estimaciones basadas en promedios nacionales y pueden variar según la ubicación, puntaje crediticio y otros factores.',\n    averageRate: 'Tasa Promedio',\n    rateRange: 'Rango de Tasas',\n    yourRate: 'Su Tasa',\n    difference: 'Diferencia',\n    belowAverage: 'por debajo del promedio',\n    aboveAverage: 'por encima del promedio',\n    sameAsAverage: 'igual al promedio',\n    useAverageRate: 'Usar Tasa Promedio',\n    lastUpdated: 'Última Actualización',\n    viewTrends: 'Ver Tendencias de Tasas',\n    compareRates: 'Comparar Su Tasa',\n  },\n\n  // Glossary\n  glossary: {\n    title: 'Glosario de Términos Financieros',\n    openGlossary: 'Abrir Glosario de Términos Financieros',\n    close: 'Cerrar Glosario',\n    search: 'Buscar términos en el glosario',\n    searchPlaceholder: 'Buscar términos...',\n    noResults: 'No se encontraron términos coincidentes',\n    searchResults: '{count} términos encontrados',\n    opened: 'Glosario financiero abierto',\n    closed: 'Glosario financiero cerrado',\n  },\n\n  // Results display\n  results: {\n    monthlyPayment: 'Pago Mensual',\n    totalPayment: 'Pago Total',\n    totalInterest: 'Interés Total',\n    payoffDate: 'Fecha de Liquidación',\n    interestSavings: 'Ahorro de Intereses',\n    timeReduction: 'Reducción de Tiempo',\n    saveCalculation: 'Guardar Cálculo',\n    share: 'Compartir',\n    export: 'Exportar',\n    print: 'Imprimir',\n  },\n\n  // Amortization table\n  amortization: {\n    title: 'Tabla de Amortización',\n    paymentNumber: '# de Pago',\n    paymentDate: 'Fecha',\n    payment: 'Pago',\n    principal: 'Capital',\n    interest: 'Interés',\n    balance: 'Saldo',\n    totalPrincipal: 'Capital Total',\n    totalInterest: 'Interés Total',\n    filter: 'Filtrar',\n    showAll: 'Mostrar Todo',\n    annual: 'Resumen Anual',\n    noData: 'No hay datos disponibles',\n  },\n\n  // Charts\n  charts: {\n    title: 'Gráficos de Pago',\n    principalVsInterest: 'Capital vs Interés',\n    paymentBreakdown: 'Desglose de Pagos',\n    amortizationSchedule: 'Calendario de Amortización',\n    principal: 'Capital',\n    interest: 'Interés',\n    balance: 'Saldo',\n    time: 'Tiempo',\n  },\n\n  // Saved calculations\n  savedCalculations: {\n    title: 'Cálculos Guardados',\n    noSavedCalculations: 'No hay cálculos guardados',\n    load: 'Cargar',\n    delete: 'Eliminar',\n    compare: 'Comparar',\n    rename: 'Renombrar',\n    confirmDelete: '¿Está seguro de que desea eliminar este cálculo?',\n    enterName: 'Ingrese un nombre para este cálculo',\n    defaultName: 'Cálculo',\n  },\n\n  // Settings\n  settings: {\n    title: 'Configuración',\n    theme: 'Tema',\n    language: 'Idioma',\n    currency: 'Moneda',\n    light: 'Claro',\n    dark: 'Oscuro',\n    dateFormat: 'Formato de Fecha',\n    numberFormat: 'Formato de Número',\n  },\n\n  // Comparison view\n  comparison: {\n    title: 'Comparación de Préstamos',\n    scenario: 'Escenario',\n    difference: 'Diferencia',\n    savings: 'Ahorros',\n  },\n\n  // Common\n  common: {\n    yes: 'Sí',\n    no: 'No',\n    ok: 'Aceptar',\n    cancel: 'Cancelar',\n    save: 'Guardar',\n    close: 'Cerrar',\n    loading: 'Cargando...',\n    error: 'Ocurrió un error',\n    success: 'Éxito',\n    warning: 'Advertencia',\n    info: 'Información',\n  },\n\n  // Tooltips and guidance\n  tooltips: {\n    loanType: 'Seleccione el tipo de préstamo que necesita. Diferentes tipos de préstamos tienen diferentes valores y límites predeterminados.',\n    loanAmount: 'Ingrese el monto total que desea pedir prestado.',\n    interestRate: 'La tasa de interés anual de su préstamo. Tasas más altas significan pagos mensuales más altos.',\n    loanTerm: 'El período de tiempo para pagar el préstamo. Plazos más largos significan pagos mensuales más bajos pero más intereses pagados en general.',\n    downPayment: 'Pago inicial realizado por adelantado. Un pago inicial más grande reduce el monto de su préstamo y los pagos mensuales.',\n    additionalPayment: 'Cantidad adicional pagada en cada período más allá del pago requerido. Esto reduce el plazo de su préstamo y el interés total.',\n    paymentFrequency: 'Con qué frecuencia realiza los pagos. Pagos más frecuentes pueden reducir el interés total pagado.',\n    startDate: 'La fecha en que comienza su préstamo y vence el primer pago.',\n\n    // Results tooltips\n    monthlyPayment: 'La cantidad que debe pagar en cada período para pagar el préstamo según lo programado.',\n    totalPayment: 'El monto total que pagará durante la vida del préstamo, incluido el capital y los intereses.',\n    totalInterest: 'El monto total de interés que pagará durante la vida del préstamo.',\n    payoffDate: 'La fecha en que su préstamo se pagará por completo si realiza todos los pagos programados.',\n    interestSavings: 'La cantidad de interés que ahorra al realizar pagos adicionales.',\n\n    // Tutorial\n    startTutorial: 'Inicie un recorrido guiado por las funciones de la calculadora de préstamos.',\n    showGuidance: 'Mostrar orientación para interpretar los resultados de su préstamo.',\n\n    // Guidance\n    interpretingResults: 'Cómo interpretar los resultados del cálculo de su préstamo',\n    affordabilityGuidance: 'Comprender la asequibilidad del préstamo',\n    refinanceGuidance: 'Cuándo considerar la refinanciación',\n  },\n\n  // Guidance\n  guidance: {\n    title: 'Guía de la Calculadora de Préstamos',\n    help: 'Ayuda y Consejos',\n    tutorial: 'Tutorial Interactivo',\n\n    interpretingResultsTitle: 'Interpretando Sus Resultados',\n    interpretingResultsContent: 'Los resultados del cálculo de su préstamo muestran el pago mensual, el pago total, el interés total y la fecha de liquidación. El pago mensual es la cantidad que debe pagar en cada período para pagar el préstamo según lo programado. El pago total es la suma de todos los pagos durante la vida del préstamo. El interés total es el costo de pedir prestado el dinero.',\n\n    affordabilityTitle: 'Entendiendo la Asequibilidad del Préstamo',\n    affordabilityContent: 'Al determinar cuánto puede permitirse pedir prestado, considere lo siguiente:',\n    affordabilityTip1: 'Su pago mensual del préstamo debería ser idealmente menos del 28% de su ingreso mensual bruto.',\n    affordabilityTip2: 'Considere todas las otras deudas y gastos al determinar la asequibilidad.',\n    affordabilityTip3: 'Recuerde tener en cuenta los impuestos, el seguro y los costos de mantenimiento para las hipotecas.',\n\n    additionalPaymentsTitle: 'Beneficios de los Pagos Adicionales',\n    additionalPaymentsContent: 'Hacer pagos adicionales puede reducir significativamente el plazo de su préstamo y el interés total pagado. Incluso pequeños pagos adicionales pueden hacer una gran diferencia con el tiempo.',\n\n    refinanceTitle: 'Cuándo Considerar la Refinanciación',\n    refinanceContent: 'La refinanciación puede ser beneficiosa en las siguientes situaciones:',\n    refinanceTip1: 'Cuando las tasas de interés han bajado significativamente desde que obtuvo su préstamo.',\n    refinanceTip2: 'Cuando desea cambiar el plazo de su préstamo (más corto o más largo).',\n    refinanceTip3: 'Cuando desea cambiar de un préstamo de tasa variable a uno de tasa fija o viceversa.',\n  },\n\n  // Tutorial\n  tutorial: {\n    loanTypeTitle: 'Tipo de Préstamo',\n    loanTypeContent: 'Comience seleccionando el tipo de préstamo que necesita. Esto establecerá los valores predeterminados apropiados para su cálculo de préstamo.',\n\n    loanAmountTitle: 'Monto del Préstamo',\n    loanAmountContent: 'Ingrese el monto total que desea pedir prestado. Puede usar el control deslizante o escribir el monto exacto.',\n\n    interestRateTitle: 'Tasa de Interés',\n    interestRateContent: 'Ingrese la tasa de interés anual para su préstamo. Este es el costo de pedir prestado el dinero, expresado como un porcentaje.',\n\n    loanTermTitle: 'Plazo del Préstamo',\n    loanTermContent: 'Ingrese el período de tiempo para pagar el préstamo en meses. Plazos más largos significan pagos mensuales más bajos pero más intereses pagados en general.',\n\n    termPresetsTitle: 'Plazos Preestablecidos',\n    termPresetsContent: 'Haga clic en estos botones para establecer rápidamente plazos comunes de préstamos como 5, 15 o 30 años.',\n\n    additionalPaymentTitle: 'Pago Adicional',\n    additionalPaymentContent: 'Ingrese cualquier cantidad adicional que planea pagar en cada período. Esto puede reducir significativamente el plazo de su préstamo y el interés total.',\n\n    calculateTitle: 'Calcular',\n    calculateContent: 'Haga clic en este botón para calcular su préstamo según los parámetros ingresados.',\n\n    resultsTitle: 'Resumen de Resultados',\n    resultsContent: 'Esta sección muestra su pago mensual, pago total, interés total y fecha de liquidación.',\n\n    amortizationTitle: 'Tabla de Amortización',\n    amortizationContent: 'Esta tabla muestra el desglose de cada pago durante la vida del préstamo, incluido cuánto va al capital y al interés.',\n\n    chartsTitle: 'Gráficos de Pago',\n    chartsContent: 'Estos gráficos visualizan los datos de su préstamo, mostrando el desglose de capital versus interés y el calendario de amortización a lo largo del tiempo.',\n\n    completedTitle: 'Tutorial Completado',\n    completedContent: '¡Ha completado el tutorial! Ahora sabe cómo usar la calculadora de préstamos para tomar decisiones financieras informadas.',\n  },\n};\n\n// Available translations\nconst translations = {\n  en,\n  es,\n};\n\n/**\n * Get translation for a key\n * @param {string} key - Translation key in dot notation (e.g., 'form.title')\n * @param {string} language - Language code\n * @returns {string} Translated text or key if translation not found\n */\nexport function getTranslation(key, language = 'en') {\n  const keys = key.split('.');\n  let translation = translations[language] || translations.en;\n\n  for (const k of keys) {\n    translation = translation[k];\n    if (translation === undefined) {\n      return key; // Return key if translation not found\n    }\n  }\n\n  return translation;\n}\n\n/**\n * Get all translations for a language\n * @param {string} language - Language code\n * @returns {Object} Translations object\n */\nexport function getTranslations(language = 'en') {\n  return translations[language] || translations.en;\n}\n\n/**\n * Get available languages\n * @returns {Array} Array of language objects with code and name\n */\nexport function getAvailableLanguages() {\n  return [\n    { code: 'en', name: 'English' },\n    { code: 'es', name: 'Español' },\n  ];\n}\n\nexport default {\n  getTranslation,\n  getTranslations,\n  getAvailableLanguages,\n};\n","/**\n * Tooltips Utility\n * Provides tooltip and guidance functionality for the application\n * Implements requirement 5.2\n */\n\n/**\n * Initialize tooltips for elements with data-tooltip attribute\n * @param {HTMLElement} container - Container element to search for tooltips\n */\nexport function initTooltips(container = document) {\n  const tooltipElements = container.querySelectorAll('[data-tooltip]');\n\n  tooltipElements.forEach((element) => {\n    // Create tooltip element if it doesn't exist\n    let tooltip = element.querySelector('.tooltip');\n    if (!tooltip) {\n      tooltip = document.createElement('div');\n      tooltip.className = 'tooltip';\n      tooltip.setAttribute('role', 'tooltip');\n      tooltip.setAttribute('aria-hidden', 'true');\n\n      // Add tooltip content\n      const tooltipContent = element.getAttribute('data-tooltip');\n      tooltip.textContent = tooltipContent;\n\n      // Add tooltip to element\n      element.appendChild(tooltip);\n\n      // Set position relative for proper tooltip positioning\n      if (getComputedStyle(element).position === 'static') {\n        element.style.position = 'relative';\n      }\n    }\n\n    // Add event listeners\n    element.addEventListener('mouseenter', showTooltip);\n    element.addEventListener('mouseleave', hideTooltip);\n    element.addEventListener('focus', showTooltip);\n    element.addEventListener('blur', hideTooltip);\n\n    // Add accessibility attributes\n    if (!element.hasAttribute('tabindex')) {\n      element.setAttribute('tabindex', '0');\n    }\n\n    const tooltipId = `tooltip-${Math.random().toString(36).substr(2, 9)}`;\n    tooltip.id = tooltipId;\n    element.setAttribute('aria-describedby', tooltipId);\n  });\n}\n\n/**\n * Show tooltip\n * @param {Event} event - Mouse or focus event\n */\nfunction showTooltip(event) {\n  const element = event.currentTarget;\n  const tooltip = element.querySelector('.tooltip');\n\n  if (tooltip) {\n    // Position tooltip\n    positionTooltip(element, tooltip);\n\n    // Show tooltip\n    tooltip.classList.add('visible');\n    tooltip.setAttribute('aria-hidden', 'false');\n\n    // Announce tooltip for screen readers\n    const tooltipContent = element.getAttribute('data-tooltip');\n    announceTooltip(tooltipContent);\n  }\n}\n\n/**\n * Hide tooltip\n * @param {Event} event - Mouse or blur event\n */\nfunction hideTooltip(event) {\n  const element = event.currentTarget;\n  const tooltip = element.querySelector('.tooltip');\n\n  if (tooltip) {\n    tooltip.classList.remove('visible');\n    tooltip.setAttribute('aria-hidden', 'true');\n  }\n}\n\n/**\n * Position tooltip relative to its parent element\n * @param {HTMLElement} element - Parent element\n * @param {HTMLElement} tooltip - Tooltip element\n */\nfunction positionTooltip(element, tooltip) {\n  // Get position preference from data attribute\n  const position = element.getAttribute('data-tooltip-position') || 'top';\n\n  // Remove all position classes\n  tooltip.classList.remove('tooltip-top', 'tooltip-bottom', 'tooltip-left', 'tooltip-right');\n\n  // Add position class\n  tooltip.classList.add(`tooltip-${position}`);\n\n  // Adjust position if tooltip would go off screen\n  setTimeout(() => {\n    const tooltipRect = tooltip.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    // Check if tooltip is off screen\n    if (tooltipRect.left < 0) {\n      tooltip.classList.remove(`tooltip-${position}`);\n      tooltip.classList.add('tooltip-right');\n    } else if (tooltipRect.right > viewportWidth) {\n      tooltip.classList.remove(`tooltip-${position}`);\n      tooltip.classList.add('tooltip-left');\n    } else if (tooltipRect.top < 0) {\n      tooltip.classList.remove(`tooltip-${position}`);\n      tooltip.classList.add('tooltip-bottom');\n    } else if (tooltipRect.bottom > viewportHeight) {\n      tooltip.classList.remove(`tooltip-${position}`);\n      tooltip.classList.add('tooltip-top');\n    }\n  }, 0);\n}\n\n/**\n * Announce tooltip content to screen readers\n * @param {string} content - Tooltip content\n */\nfunction announceTooltip(content) {\n  // Create or get the announcement element\n  let announcer = document.getElementById('tooltip-announcer');\n\n  if (!announcer) {\n    announcer = document.createElement('div');\n    announcer.id = 'tooltip-announcer';\n    announcer.setAttribute('aria-live', 'polite');\n    announcer.setAttribute('aria-atomic', 'true');\n    announcer.classList.add('sr-only');\n    document.body.appendChild(announcer);\n  }\n\n  // Set the message\n  announcer.textContent = '';\n\n  // Force a DOM reflow\n  void announcer.offsetWidth;\n\n  // Set the message\n  announcer.textContent = content;\n}\n\n/**\n * Add guidance tooltip to an element\n * @param {HTMLElement} element - Element to add tooltip to\n * @param {string} content - Tooltip content\n * @param {string} position - Tooltip position (top, bottom, left, right)\n */\nexport function addTooltip(element, content, position = 'top') {\n  if (!element) return;\n\n  element.setAttribute('data-tooltip', content);\n  element.setAttribute('data-tooltip-position', position);\n\n  // Initialize tooltip\n  initTooltips(element.parentNode);\n}\n\n/**\n * Create a guidance panel with detailed information\n * @param {HTMLElement} container - Container to append guidance panel to\n * @param {string} title - Guidance panel title\n * @param {string} content - Guidance panel content (can include HTML)\n * @param {string} id - Unique ID for the guidance panel\n * @returns {HTMLElement} The created guidance panel\n */\nexport function createGuidancePanel(container, title, content, id) {\n  if (!container) return null;\n\n  // Create guidance panel\n  const panel = document.createElement('div');\n  panel.className = 'guidance-panel';\n  panel.id = id || `guidance-${Math.random().toString(36).substr(2, 9)}`;\n\n  // Create panel content\n  panel.innerHTML = `\n    <div class=\"guidance-header\">\n      <h3>${title}</h3>\n      <button class=\"guidance-close\" aria-label=\"Close guidance\">×</button>\n    </div>\n    <div class=\"guidance-content\">\n      ${content}\n    </div>\n  `;\n\n  // Add event listener for close button\n  const closeButton = panel.querySelector('.guidance-close');\n  if (closeButton) {\n    closeButton.addEventListener('click', () => {\n      panel.classList.add('guidance-hidden');\n\n      // Remove panel after animation\n      setTimeout(() => {\n        panel.remove();\n      }, 300);\n    });\n  }\n\n  // Add panel to container\n  container.appendChild(panel);\n\n  // Show panel with animation\n  setTimeout(() => {\n    panel.classList.add('guidance-visible');\n  }, 10);\n\n  return panel;\n}\n\n/**\n * Create an interactive tutorial\n * @param {Array} steps - Array of tutorial steps\n * @param {Function} onComplete - Callback function when tutorial is complete\n */\nexport function createTutorial(steps, onComplete) {\n  if (!steps || !steps.length) return;\n\n  let currentStep = 0;\n\n  // Create tutorial overlay\n  const overlay = document.createElement('div');\n  overlay.className = 'tutorial-overlay';\n  document.body.appendChild(overlay);\n\n  // Show first step\n  showTutorialStep(steps[currentStep]);\n\n  /**\n   * Show a tutorial step\n   * @param {Object} step - Tutorial step\n   */\n  function showTutorialStep(step) {\n    // Find target element\n    const target = document.querySelector(step.selector);\n    if (!target) {\n      console.error(`Tutorial target not found: ${step.selector}`);\n      nextStep();\n      return;\n    }\n\n    // Position highlight around target\n    positionHighlight(target);\n\n    // Create tooltip\n    const tooltip = document.createElement('div');\n    tooltip.className = 'tutorial-tooltip';\n    tooltip.innerHTML = `\n      <div class=\"tutorial-content\">\n        <h3>${step.title}</h3>\n        <p>${step.content}</p>\n      </div>\n      <div class=\"tutorial-controls\">\n        <button class=\"tutorial-prev\" ${currentStep === 0 ? 'disabled' : ''}>Previous</button>\n        <span class=\"tutorial-progress\">${currentStep + 1}/${steps.length}</span>\n        <button class=\"tutorial-next\">${currentStep === steps.length - 1 ? 'Finish' : 'Next'}</button>\n      </div>\n    `;\n\n    // Position tooltip\n    positionTooltipNearTarget(tooltip, target, step.position || 'bottom');\n\n    // Add tooltip to document\n    document.body.appendChild(tooltip);\n\n    // Add event listeners\n    const prevButton = tooltip.querySelector('.tutorial-prev');\n    const nextButton = tooltip.querySelector('.tutorial-next');\n\n    if (prevButton) {\n      prevButton.addEventListener('click', prevStep);\n    }\n\n    if (nextButton) {\n      nextButton.addEventListener('click', nextStep);\n    }\n\n    // Execute step action if provided\n    if (step.action && typeof step.action === 'function') {\n      step.action(target);\n    }\n  }\n\n  /**\n   * Position highlight around target element\n   * @param {HTMLElement} target - Target element\n   */\n  function positionHighlight(target) {\n    const rect = target.getBoundingClientRect();\n\n    // Create highlight element if it doesn't exist\n    let highlight = document.querySelector('.tutorial-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.className = 'tutorial-highlight';\n      overlay.appendChild(highlight);\n    }\n\n    // Position highlight\n    highlight.style.top = `${rect.top - 10}px`;\n    highlight.style.left = `${rect.left - 10}px`;\n    highlight.style.width = `${rect.width + 20}px`;\n    highlight.style.height = `${rect.height + 20}px`;\n  }\n\n  /**\n   * Position tooltip near target element\n   * @param {HTMLElement} tooltip - Tooltip element\n   * @param {HTMLElement} target - Target element\n   * @param {string} position - Position (top, bottom, left, right)\n   */\n  function positionTooltipNearTarget(tooltip, target, position) {\n    const rect = target.getBoundingClientRect();\n    const tooltipRect = tooltip.getBoundingClientRect();\n\n    // Set initial position\n    switch (position) {\n      case 'top':\n        tooltip.style.top = `${rect.top - tooltipRect.height - 20}px`;\n        tooltip.style.left = `${rect.left + (rect.width / 2) - (tooltipRect.width / 2)}px`;\n        break;\n      case 'bottom':\n        tooltip.style.top = `${rect.bottom + 20}px`;\n        tooltip.style.left = `${rect.left + (rect.width / 2) - (tooltipRect.width / 2)}px`;\n        break;\n      case 'left':\n        tooltip.style.top = `${rect.top + (rect.height / 2) - (tooltipRect.height / 2)}px`;\n        tooltip.style.left = `${rect.left - tooltipRect.width - 20}px`;\n        break;\n      case 'right':\n        tooltip.style.top = `${rect.top + (rect.height / 2) - (tooltipRect.height / 2)}px`;\n        tooltip.style.left = `${rect.right + 20}px`;\n        break;\n      default:\n        tooltip.style.top = `${rect.bottom + 20}px`;\n        tooltip.style.left = `${rect.left + (rect.width / 2) - (tooltipRect.width / 2)}px`;\n    }\n\n    // Adjust if tooltip is off screen\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    if (parseFloat(tooltip.style.left) < 20) {\n      tooltip.style.left = '20px';\n    } else if (parseFloat(tooltip.style.left) + tooltipRect.width > viewportWidth - 20) {\n      tooltip.style.left = `${viewportWidth - tooltipRect.width - 20}px`;\n    }\n\n    if (parseFloat(tooltip.style.top) < 20) {\n      tooltip.style.top = '20px';\n    } else if (parseFloat(tooltip.style.top) + tooltipRect.height > viewportHeight - 20) {\n      tooltip.style.top = `${viewportHeight - tooltipRect.height - 20}px`;\n    }\n  }\n\n  /**\n   * Go to previous step\n   */\n  function prevStep() {\n    if (currentStep > 0) {\n      // Remove current tooltip\n      const tooltip = document.querySelector('.tutorial-tooltip');\n      if (tooltip) {\n        tooltip.remove();\n      }\n\n      // Go to previous step\n      currentStep--;\n      showTutorialStep(steps[currentStep]);\n    }\n  }\n\n  /**\n   * Go to next step\n   */\n  function nextStep() {\n    // Remove current tooltip\n    const tooltip = document.querySelector('.tutorial-tooltip');\n    if (tooltip) {\n      tooltip.remove();\n    }\n\n    // Check if tutorial is complete\n    if (currentStep === steps.length - 1) {\n      completeTutorial();\n      return;\n    }\n\n    // Go to next step\n    currentStep++;\n    showTutorialStep(steps[currentStep]);\n  }\n\n  /**\n   * Complete tutorial\n   */\n  function completeTutorial() {\n    // Remove overlay and highlight\n    overlay.remove();\n\n    // Call onComplete callback\n    if (onComplete && typeof onComplete === 'function') {\n      onComplete();\n    }\n  }\n}\n\nexport default {\n  initTooltips,\n  addTooltip,\n  createGuidancePanel,\n  createTutorial,\n};\n","/**\n * Charts Component\n * Creates interactive charts for loan data visualization\n * Implements requirement 2.3\n */\n\nimport { Chart } from 'chart.js/auto';\n\nclass Charts {\n  /**\n   * Create a new charts component\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement} [options.container] - Container element\n   * @param {Object} [options.colorScheme] - Custom color scheme\n   */\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('charts-container');\n    this.colorScheme = options.colorScheme || {\n      principal: '#007bff',\n      interest: '#dc3545',\n      balance: '#28a745',\n      comparison: ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e'],\n    };\n\n    this.chartInstances = {\n      principalVsInterest: null,\n      paymentBreakdown: null,\n      comparison: null,\n    };\n\n    this.theme = 'light';\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    if (!this.container) {\n      console.error('Charts container not found');\n      return;\n    }\n\n    // Create chart containers if they don't exist\n    this._createChartContainers();\n\n    // Register event listeners\n    this._initEventListeners();\n  }\n\n  /**\n   * Create chart containers if they don't exist\n   * @private\n   */\n  _createChartContainers() {\n    // Check if containers already exist\n    if (!this.container.querySelector('#principal-interest-chart')) {\n      const principalInterestContainer = document.createElement('div');\n      principalInterestContainer.id = 'principal-interest-chart';\n      principalInterestContainer.className = 'chart-container';\n      principalInterestContainer.innerHTML = `\n        <div class=\"chart-title\">Principal vs. Interest Over Time</div>\n        <canvas></canvas>\n        <div class=\"chart-legend\"></div>\n      `;\n      this.container.appendChild(principalInterestContainer);\n    }\n\n    if (!this.container.querySelector('#payment-breakdown-chart')) {\n      const paymentBreakdownContainer = document.createElement('div');\n      paymentBreakdownContainer.id = 'payment-breakdown-chart';\n      paymentBreakdownContainer.className = 'chart-container';\n      paymentBreakdownContainer.innerHTML = `\n        <div class=\"chart-title\">Payment Breakdown</div>\n        <canvas></canvas>\n        <div class=\"chart-legend\"></div>\n      `;\n      this.container.appendChild(paymentBreakdownContainer);\n    }\n\n    if (!this.container.querySelector('#comparison-chart')) {\n      const comparisonContainer = document.createElement('div');\n      comparisonContainer.id = 'comparison-chart';\n      comparisonContainer.className = 'chart-container';\n      comparisonContainer.style.display = 'none'; // Hidden by default\n      comparisonContainer.innerHTML = `\n        <div class=\"chart-title\">Loan Comparison</div>\n        <canvas></canvas>\n        <div class=\"chart-legend\"></div>\n      `;\n      this.container.appendChild(comparisonContainer);\n    }\n\n    if (!this.container.querySelector('#inflation-impact-chart')) {\n      const inflationImpactContainer = document.createElement('div');\n      inflationImpactContainer.id = 'inflation-impact-chart';\n      inflationImpactContainer.className = 'chart-container';\n      inflationImpactContainer.style.display = 'none'; // Hidden by default\n      inflationImpactContainer.innerHTML = `\n        <div class=\"chart-title\">Inflation Impact on Payments</div>\n        <canvas></canvas>\n        <div class=\"chart-legend\"></div>\n      `;\n      this.container.appendChild(inflationImpactContainer);\n    }\n  }\n\n  /**\n   * Initialize event listeners\n   * @private\n   */\n  _initEventListeners() {\n    // Add responsive behavior for charts\n    window.addEventListener('resize', () => {\n      this._resizeCharts();\n    });\n  }\n\n  /**\n   * Resize charts when window size changes\n   * @private\n   */\n  _resizeCharts() {\n    // Update chart sizes if they exist\n    Object.values(this.chartInstances).forEach((chart) => {\n      if (chart) {\n        chart.resize();\n      }\n    });\n  }\n\n  /**\n   * Render principal vs interest chart\n   * @param {Object} data - Calculation data\n   * @param {Loan} data.loan - Loan object\n   * @param {AmortizationSchedule} data.amortizationSchedule - Amortization schedule\n   */\n  renderPrincipalVsInterestChart(data) {\n    if (!this.container || !data || !data.loan || !data.amortizationSchedule) {\n      return;\n    }\n\n    const chartContainer = this.container.querySelector('#principal-interest-chart');\n    if (!chartContainer) return;\n\n    // Show the chart container\n    chartContainer.style.display = 'block';\n\n    // Get the canvas element\n    const canvas = chartContainer.querySelector('canvas');\n    if (!canvas) return;\n\n    // Prepare data for the chart\n    const { loan, amortizationSchedule } = data;\n    const { payments } = amortizationSchedule;\n\n    // We'll sample the payments to avoid too many data points\n    // For loans with many payments, we'll sample to have around 60 data points\n    const sampleInterval = Math.max(1, Math.floor(payments.length / 60));\n    const sampledPayments = payments.filter((_, index) => index % sampleInterval === 0 || index === payments.length - 1);\n\n    // Prepare datasets\n    const labels = sampledPayments.map((payment) => payment.number);\n    const principalData = sampledPayments.map((payment) => payment.principal);\n    const interestData = sampledPayments.map((payment) => payment.interest);\n    const balanceData = sampledPayments.map((payment) => payment.balance);\n\n    // Destroy previous chart if it exists\n    if (this.chartInstances.principalVsInterest) {\n      this.chartInstances.principalVsInterest.destroy();\n    }\n\n    // Create the chart\n    this.chartInstances.principalVsInterest = new Chart(canvas, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [\n          {\n            label: 'Principal',\n            data: principalData,\n            backgroundColor: this.colorScheme.principal,\n            borderColor: this.colorScheme.principal,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n          {\n            label: 'Interest',\n            data: interestData,\n            backgroundColor: this.colorScheme.interest,\n            borderColor: this.colorScheme.interest,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n          {\n            label: 'Remaining Balance',\n            data: balanceData,\n            backgroundColor: this.colorScheme.balance,\n            borderColor: this.colorScheme.balance,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            mode: 'index',\n            intersect: false,\n            callbacks: {\n              label(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += new Intl.NumberFormat('en-US', {\n                    style: 'currency',\n                    currency: 'USD',\n                  }).format(context.parsed.y);\n                }\n                return label;\n              },\n            },\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              boxWidth: 12,\n              padding: 15,\n            },\n          },\n          title: {\n            display: false,\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Payment Number',\n            },\n            ticks: {\n              maxTicksLimit: 10,\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Amount ($)',\n            },\n            ticks: {\n              callback(value) {\n                return new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD',\n                  maximumFractionDigits: 0,\n                }).format(value);\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Apply theme\n    this._applyChartTheme(this.chartInstances.principalVsInterest);\n  }\n\n  /**\n   * Render payment breakdown pie chart\n   * @param {Object} data - Calculation data\n   * @param {Loan} data.loan - Loan object\n   * @param {AmortizationSchedule} data.amortizationSchedule - Amortization schedule\n   */\n  renderPaymentBreakdownPieChart(data) {\n    if (!this.container || !data || !data.loan || !data.amortizationSchedule) {\n      return;\n    }\n\n    const chartContainer = this.container.querySelector('#payment-breakdown-chart');\n    if (!chartContainer) return;\n\n    // Show the chart container\n    chartContainer.style.display = 'block';\n\n    // Get the canvas element\n    const canvas = chartContainer.querySelector('canvas');\n    if (!canvas) return;\n\n    // Prepare data for the chart\n    const { loan, amortizationSchedule } = data;\n    const principal = loan.totalLoanAmount;\n    const interest = amortizationSchedule.totalInterest;\n\n    // Destroy previous chart if it exists\n    if (this.chartInstances.paymentBreakdown) {\n      this.chartInstances.paymentBreakdown.destroy();\n    }\n\n    // Create the chart\n    this.chartInstances.paymentBreakdown = new Chart(canvas, {\n      type: 'pie',\n      data: {\n        labels: ['Principal', 'Interest'],\n        datasets: [{\n          data: [principal, interest],\n          backgroundColor: [\n            this.colorScheme.principal,\n            this.colorScheme.interest,\n          ],\n          borderColor: [\n            this.theme === 'dark' ? '#2c3034' : '#ffffff',\n            this.theme === 'dark' ? '#2c3034' : '#ffffff',\n          ],\n          borderWidth: 1,\n        }],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label(context) {\n                const label = context.label || '';\n                const value = context.raw;\n                const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                const percentage = Math.round((value / total) * 100);\n\n                return `${label}: ${new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD',\n                }).format(value)} (${percentage}%)`;\n              },\n            },\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              boxWidth: 12,\n              padding: 15,\n            },\n          },\n        },\n      },\n    });\n\n    // Apply theme\n    this._applyChartTheme(this.chartInstances.paymentBreakdown);\n  }\n\n  /**\n   * Render comparison chart for multiple loan scenarios\n   * @param {Array} scenarios - Array of loan scenarios\n   */\n  renderComparisonChart(scenarios) {\n    if (!this.container || !scenarios || scenarios.length < 2) {\n      return;\n    }\n\n    const chartContainer = this.container.querySelector('#comparison-chart');\n    if (!chartContainer) return;\n\n    // Show the chart container\n    chartContainer.style.display = 'block';\n\n    // Get the canvas element\n    const canvas = chartContainer.querySelector('canvas');\n    if (!canvas) return;\n\n    // Prepare data for the chart\n    const labels = ['Monthly Payment', 'Total Interest', 'Total Payment'];\n    const datasets = scenarios.map((scenario, index) => {\n      const { loan, amortizationSchedule } = scenario;\n      const monthlyPayment = loan.paymentAmount;\n      const totalInterest = amortizationSchedule ? amortizationSchedule.totalInterest : loan.totalInterest;\n      const totalPayment = amortizationSchedule ? amortizationSchedule.totalPayment : (loan.paymentAmount * loan.numberOfPayments);\n\n      return {\n        label: scenario.name || `Scenario ${index + 1}`,\n        data: [monthlyPayment, totalInterest, totalPayment],\n        backgroundColor: this.colorScheme.comparison[index % this.colorScheme.comparison.length],\n        borderColor: this.theme === 'dark' ? '#2c3034' : '#ffffff',\n        borderWidth: 1,\n      };\n    });\n\n    // Destroy previous chart if it exists\n    if (this.chartInstances.comparison) {\n      this.chartInstances.comparison.destroy();\n    }\n\n    // Create the chart\n    this.chartInstances.comparison = new Chart(canvas, {\n      type: 'bar',\n      data: {\n        labels,\n        datasets,\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += new Intl.NumberFormat('en-US', {\n                    style: 'currency',\n                    currency: 'USD',\n                  }).format(context.parsed.y);\n                }\n                return label;\n              },\n            },\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              boxWidth: 12,\n              padding: 15,\n            },\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Metrics',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Amount ($)',\n            },\n            ticks: {\n              callback(value) {\n                return new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD',\n                  maximumFractionDigits: 0,\n                }).format(value);\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Apply theme\n    this._applyChartTheme(this.chartInstances.comparison);\n  }\n\n  /**\n   * Update chart theme\n   * @param {string} theme - Theme name ('light' or 'dark')\n   */\n  updateChartTheme(theme) {\n    if (theme !== 'light' && theme !== 'dark') {\n      return;\n    }\n\n    this.theme = theme;\n\n    // Update all charts\n    Object.values(this.chartInstances).forEach((chart) => {\n      if (chart) {\n        this._applyChartTheme(chart);\n      }\n    });\n  }\n\n  /**\n   * Apply theme to a chart\n   * @param {Chart} chart - Chart instance\n   * @private\n   */\n  _applyChartTheme(chart) {\n    if (!chart) return;\n\n    const isDark = this.theme === 'dark';\n    const textColor = isDark ? '#e9ecef' : '#212529';\n    const gridColor = isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';\n\n    // Update chart options\n    if (chart.options.scales) {\n      // For line and bar charts\n      Object.values(chart.options.scales).forEach((scale) => {\n        if (scale.ticks) {\n          scale.ticks.color = textColor;\n        }\n        if (scale.title) {\n          scale.title.color = textColor;\n        }\n        if (scale.grid) {\n          scale.grid.color = gridColor;\n        }\n      });\n    }\n\n    // Update legend\n    if (chart.options.plugins && chart.options.plugins.legend) {\n      chart.options.plugins.legend.labels.color = textColor;\n    }\n\n    // Update border colors for pie/doughnut charts\n    if (chart.config.type === 'pie' || chart.config.type === 'doughnut') {\n      chart.data.datasets.forEach((dataset) => {\n        dataset.borderColor = isDark ? '#2c3034' : '#ffffff';\n      });\n    }\n\n    // Update the chart\n    chart.update();\n  }\n\n  /**\n   * Render inflation impact chart\n   * @param {Object} data - Calculation data\n   * @param {Loan} data.loan - Loan object\n   * @param {AmortizationSchedule} data.amortizationSchedule - Amortization schedule\n   * @param {Object} data.inflationAdjusted - Inflation-adjusted payment data\n   */\n  renderInflationImpactChart(data) {\n    if (!this.container || !data || !data.loan || !data.amortizationSchedule || !data.inflationAdjusted) {\n      return;\n    }\n\n    const chartContainer = this.container.querySelector('#inflation-impact-chart');\n    if (!chartContainer) return;\n\n    // Show the chart container\n    chartContainer.style.display = 'block';\n\n    // Get the canvas element\n    const canvas = chartContainer.querySelector('canvas');\n    if (!canvas) return;\n\n    // Prepare data for the chart\n    const { loan, amortizationSchedule, inflationAdjusted } = data;\n    const { payments } = inflationAdjusted;\n\n    // We'll sample the payments to avoid too many data points\n    // For loans with many payments, we'll sample to have around 60 data points\n    const sampleInterval = Math.max(1, Math.floor(payments.length / 60));\n    const sampledPayments = payments.filter((_, index) => index % sampleInterval === 0 || index === payments.length - 1);\n\n    // Prepare datasets\n    const labels = sampledPayments.map((payment) => payment.number);\n    const nominalPayments = sampledPayments.map((payment) => payment.originalAmount);\n    const inflationAdjustedPayments = sampledPayments.map((payment) => payment.inflationAdjustedAmount);\n\n    // Destroy previous chart if it exists\n    if (this.chartInstances.inflationImpact) {\n      this.chartInstances.inflationImpact.destroy();\n    }\n\n    // Create the chart\n    this.chartInstances.inflationImpact = new Chart(canvas, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [\n          {\n            label: 'Nominal Payment',\n            data: nominalPayments,\n            backgroundColor: this.colorScheme.principal,\n            borderColor: this.colorScheme.principal,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n          {\n            label: 'Inflation-Adjusted Payment',\n            data: inflationAdjustedPayments,\n            backgroundColor: this.colorScheme.balance,\n            borderColor: this.colorScheme.balance,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            mode: 'index',\n            intersect: false,\n            callbacks: {\n              label(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += new Intl.NumberFormat('en-US', {\n                    style: 'currency',\n                    currency: 'USD',\n                  }).format(context.parsed.y);\n                }\n                return label;\n              },\n            },\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              boxWidth: 12,\n              padding: 15,\n            },\n          },\n          title: {\n            display: true,\n            text: `Inflation Rate: ${inflationAdjusted.summary.inflationRate}%`,\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Payment Number',\n            },\n            ticks: {\n              maxTicksLimit: 10,\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Payment Amount ($)',\n            },\n            ticks: {\n              callback(value) {\n                return new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD',\n                  maximumFractionDigits: 0,\n                }).format(value);\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Apply theme\n    this._applyChartTheme(this.chartInstances.inflationImpact);\n\n    // Add summary information below the chart\n    const legendContainer = chartContainer.querySelector('.chart-legend');\n    if (legendContainer) {\n      const savings = inflationAdjusted.summary.savingsFromInflation;\n      const originalTotal = inflationAdjusted.summary.totalOriginalPayment;\n      const adjustedTotal = inflationAdjusted.summary.totalInflationAdjustedPayment;\n      const savingsPercentage = (savings / originalTotal) * 100;\n\n      legendContainer.innerHTML = `\n        <div class=\"inflation-summary\">\n          <div class=\"summary-item\">\n            <span class=\"label\">Total Nominal Payments:</span>\n            <span class=\"value\">${new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(originalTotal)}</span>\n          </div>\n          <div class=\"summary-item\">\n            <span class=\"label\">Total Inflation-Adjusted Payments:</span>\n            <span class=\"value\">${new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(adjustedTotal)}</span>\n          </div>\n          <div class=\"summary-item highlight\">\n            <span class=\"label\">Real Savings Due to Inflation:</span>\n            <span class=\"value\">${new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(savings)} (${savingsPercentage.toFixed(1)}%)</span>\n          </div>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Clear all charts\n   */\n  clear() {\n    // Destroy all chart instances\n    Object.keys(this.chartInstances).forEach((key) => {\n      if (this.chartInstances[key]) {\n        this.chartInstances[key].destroy();\n        this.chartInstances[key] = null;\n      }\n    });\n\n    // Hide chart containers\n    const containers = [\n      '#principal-interest-chart',\n      '#payment-breakdown-chart',\n      '#comparison-chart',\n      '#inflation-impact-chart',\n    ];\n\n    containers.forEach((selector) => {\n      const container = this.container.querySelector(selector);\n      if (container) {\n        container.style.display = 'none';\n      }\n    });\n  }\n}\n\nexport default Charts;\n","/**\n * Financial Glossary Component\n * Provides a searchable glossary of financial terms\n * Implements requirement 5.1\n */\n\nimport { getTranslation } from '../utils/translations.js';\nimport { addKeyboardNavigation, announceToScreenReader } from '../utils/accessibility.js';\n\nclass FinancialGlossary {\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('glossary-container');\n    this.language = options.language || 'en';\n    this.isOpen = false;\n    this.terms = this.getGlossaryTerms();\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    this.render();\n    this.bindEvents();\n  }\n\n  /**\n   * Render the glossary component\n   */\n  render() {\n    if (!this.container) return;\n\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    // Create glossary button\n    const glossaryButtonHtml = `\n      <button id=\"glossary-toggle\" class=\"glossary-toggle\" aria-label=\"${t('glossary.openGlossary')}\">\n        <span class=\"glossary-icon\">📚</span>\n        <span class=\"glossary-text\">${t('glossary.title')}</span>\n      </button>\n    `;\n\n    // Create glossary modal\n    const glossaryModalHtml = `\n      <div id=\"glossary-modal\" class=\"glossary-modal\" aria-hidden=\"true\" role=\"dialog\" aria-labelledby=\"glossary-title\">\n        <div class=\"glossary-content\">\n          <div class=\"glossary-header\">\n            <h2 id=\"glossary-title\">${t('glossary.title')}</h2>\n            <button id=\"glossary-close\" class=\"glossary-close\" aria-label=\"${t('glossary.close')}\">×</button>\n          </div>\n          <div class=\"glossary-search\">\n            <input \n              type=\"text\" \n              id=\"glossary-search-input\" \n              class=\"glossary-search-input\" \n              placeholder=\"${t('glossary.searchPlaceholder')}\" \n              aria-label=\"${t('glossary.search')}\"\n            >\n          </div>\n          <div class=\"glossary-terms\" id=\"glossary-terms-list\">\n            ${this.renderTermsList()}\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Add to container\n    this.container.innerHTML = glossaryButtonHtml + glossaryModalHtml;\n  }\n\n  /**\n   * Render the list of glossary terms\n   * @returns {string} HTML for the terms list\n   */\n  renderTermsList(searchTerm = '') {\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    // Filter terms based on search\n    const filteredTerms = searchTerm\n      ? this.terms.filter((term) => term.term.toLowerCase().includes(searchTerm.toLowerCase())\n          || term.definition.toLowerCase().includes(searchTerm.toLowerCase()))\n      : this.terms;\n\n    // Sort terms alphabetically\n    filteredTerms.sort((a, b) => a.term.localeCompare(b.term));\n\n    // Group terms by first letter\n    const groupedTerms = filteredTerms.reduce((acc, term) => {\n      const firstLetter = term.term.charAt(0).toUpperCase();\n      if (!acc[firstLetter]) {\n        acc[firstLetter] = [];\n      }\n      acc[firstLetter].push(term);\n      return acc;\n    }, {});\n\n    // Generate HTML\n    let html = '';\n\n    if (filteredTerms.length === 0) {\n      html = `<p class=\"glossary-no-results\">${t('glossary.noResults')}</p>`;\n    } else {\n      Object.keys(groupedTerms).sort().forEach((letter) => {\n        html += `\n          <div class=\"glossary-letter-group\">\n            <h3 class=\"glossary-letter\">${letter}</h3>\n            <dl class=\"glossary-definitions\">\n              ${groupedTerms[letter].map((term) => `\n                <div class=\"glossary-term\">\n                  <dt>${term.term}</dt>\n                  <dd>${term.definition}</dd>\n                </div>\n              `).join('')}\n            </dl>\n          </div>\n        `;\n      });\n    }\n\n    return html;\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    if (!this.container) return;\n\n    // Toggle button\n    const toggleButton = this.container.querySelector('#glossary-toggle');\n    if (toggleButton) {\n      toggleButton.addEventListener('click', () => this.toggleGlossary());\n    }\n\n    // Close button\n    const closeButton = this.container.querySelector('#glossary-close');\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.closeGlossary());\n    }\n\n    // Search input\n    const searchInput = this.container.querySelector('#glossary-search-input');\n    if (searchInput) {\n      searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));\n    }\n\n    // Close on click outside\n    const modal = this.container.querySelector('#glossary-modal');\n    if (modal) {\n      modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n          this.closeGlossary();\n        }\n      });\n    }\n\n    // Close on escape key\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape' && this.isOpen) {\n        this.closeGlossary();\n      }\n    });\n\n    // Add keyboard navigation\n    const modalContent = this.container.querySelector('.glossary-content');\n    if (modalContent) {\n      addKeyboardNavigation(modalContent);\n    }\n  }\n\n  /**\n   * Toggle glossary visibility\n   */\n  toggleGlossary() {\n    if (this.isOpen) {\n      this.closeGlossary();\n    } else {\n      this.openGlossary();\n    }\n  }\n\n  /**\n   * Open the glossary\n   */\n  openGlossary() {\n    const modal = this.container.querySelector('#glossary-modal');\n    const toggleButton = this.container.querySelector('#glossary-toggle');\n\n    if (modal && toggleButton) {\n      modal.classList.add('open');\n      modal.setAttribute('aria-hidden', 'false');\n      toggleButton.setAttribute('aria-expanded', 'true');\n\n      // Focus on search input\n      const searchInput = this.container.querySelector('#glossary-search-input');\n      if (searchInput) {\n        setTimeout(() => searchInput.focus(), 100);\n      }\n\n      this.isOpen = true;\n\n      // Announce to screen readers\n      announceToScreenReader(getTranslation('glossary.opened', this.language));\n    }\n  }\n\n  /**\n   * Close the glossary\n   */\n  closeGlossary() {\n    const modal = this.container.querySelector('#glossary-modal');\n    const toggleButton = this.container.querySelector('#glossary-toggle');\n\n    if (modal && toggleButton) {\n      modal.classList.remove('open');\n      modal.setAttribute('aria-hidden', 'true');\n      toggleButton.setAttribute('aria-expanded', 'false');\n\n      // Return focus to toggle button\n      toggleButton.focus();\n\n      this.isOpen = false;\n\n      // Announce to screen readers\n      announceToScreenReader(getTranslation('glossary.closed', this.language));\n    }\n  }\n\n  /**\n   * Handle search input\n   * @param {string} searchTerm - Search term\n   */\n  handleSearch(searchTerm) {\n    const termsList = this.container.querySelector('#glossary-terms-list');\n    if (termsList) {\n      termsList.innerHTML = this.renderTermsList(searchTerm);\n\n      // Announce search results to screen readers\n      const t = (key) => getTranslation(key, this.language);\n      const filteredTerms = this.terms.filter((term) => term.term.toLowerCase().includes(searchTerm.toLowerCase())\n        || term.definition.toLowerCase().includes(searchTerm.toLowerCase()));\n\n      announceToScreenReader(\n        t('glossary.searchResults').replace('{count}', filteredTerms.length),\n      );\n    }\n  }\n\n  /**\n   * Update language and re-render component\n   * @param {string} language - Language code\n   */\n  updateLanguage(language) {\n    if (this.language !== language) {\n      this.language = language;\n      this.terms = this.getGlossaryTerms();\n      this.render();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * Get glossary terms based on current language\n   * @returns {Array} Array of term objects\n   */\n  getGlossaryTerms() {\n    // Terms are the same for all languages, but could be translated in the future\n    return [\n      {\n        term: 'Amortization',\n        definition: 'The process of spreading out a loan into a series of fixed payments over time. Each payment is allocated between the principal and the interest.',\n      },\n      {\n        term: 'Annual Percentage Rate (APR)',\n        definition: 'The yearly cost of a loan, including interest and fees, expressed as a percentage.',\n      },\n      {\n        term: 'Balloon Payment',\n        definition: 'A large payment due at the end of a loan term, common in certain mortgage and auto loans.',\n      },\n      {\n        term: 'Collateral',\n        definition: 'An asset that a borrower offers as a way for a lender to secure the loan. If the borrower stops making payments, the lender can seize the collateral.',\n      },\n      {\n        term: 'Compound Interest',\n        definition: 'Interest calculated on both the initial principal and the accumulated interest from previous periods.',\n      },\n      {\n        term: 'Down Payment',\n        definition: 'An initial upfront payment made when purchasing an expensive item such as a home or car using a loan.',\n      },\n      {\n        term: 'Equity',\n        definition: 'The difference between the current market value of an asset and the amount owed on it.',\n      },\n      {\n        term: 'Fixed-Rate Loan',\n        definition: 'A loan where the interest rate remains the same throughout the term of the loan.',\n      },\n      {\n        term: 'Grace Period',\n        definition: 'A set period of time after a payment due date during which a late fee will not be charged.',\n      },\n      {\n        term: 'Interest',\n        definition: 'The cost of borrowing money, typically expressed as an annual percentage rate.',\n      },\n      {\n        term: 'Loan Term',\n        definition: 'The period of time during which a borrower makes monthly payments towards a loan.',\n      },\n      {\n        term: 'Loan-to-Value (LTV) Ratio',\n        definition: 'The ratio of a loan amount to the value of the asset purchased, typically expressed as a percentage.',\n      },\n      {\n        term: 'Mortgage',\n        definition: 'A loan used to purchase real estate, where the property serves as collateral.',\n      },\n      {\n        term: 'Principal',\n        definition: 'The original amount of money borrowed in a loan, or the amount still owed, not including interest.',\n      },\n      {\n        term: 'Refinancing',\n        definition: 'The process of replacing an existing loan with a new loan, typically with better terms.',\n      },\n      {\n        term: 'Simple Interest',\n        definition: 'Interest calculated only on the principal amount, not on accumulated interest.',\n      },\n      {\n        term: 'Underwriting',\n        definition: 'The process a lender uses to determine if the risk of offering a loan to a particular borrower under certain parameters is acceptable.',\n      },\n      {\n        term: 'Variable-Rate Loan',\n        definition: 'A loan where the interest rate can change over time, based on an underlying benchmark or index.',\n      },\n      {\n        term: 'Debt-to-Income Ratio',\n        definition: 'A personal finance measure that compares the amount of debt you have to your overall income.',\n      },\n      {\n        term: 'Escrow',\n        definition: 'An account held by a third party on behalf of two other parties in a transaction.',\n      },\n      {\n        term: 'Foreclosure',\n        definition: 'The legal process by which a lender takes control of a property, evicts the homeowner, and sells the home after the homeowner is unable to make full principal and interest payments on their mortgage.',\n      },\n      {\n        term: 'Origination Fee',\n        definition: 'A fee charged by a lender for processing a new loan application, often expressed as a percentage of the loan amount.',\n      },\n      {\n        term: 'Points',\n        definition: 'Fees paid to the lender at closing in exchange for a reduced interest rate. One point equals one percent of the loan amount.',\n      },\n      {\n        term: 'Prepayment Penalty',\n        definition: 'A fee charged by some lenders when a borrower pays off a loan before the end of the loan term.',\n      },\n      {\n        term: 'Private Mortgage Insurance (PMI)',\n        definition: 'Insurance that protects the lender if a borrower stops making payments on a loan. PMI is typically required for loans with a down payment of less than 20%.',\n      },\n    ];\n  }\n}\n\nexport default FinancialGlossary;\n","/**\n * Accessibility Utility\n * Provides functions for improving application accessibility\n * Implements requirements 6.1, 6.2, 6.5, 6.6\n */\n\n/**\n * Set focus to an element\n * @param {HTMLElement} element - Element to focus\n */\nexport function setFocus(element) {\n  if (element && typeof element.focus === 'function') {\n    element.focus();\n  }\n}\n\n/**\n * Add keyboard navigation to a component\n * @param {HTMLElement} container - Container element\n * @param {string} selector - Selector for focusable elements\n * @param {boolean} loop - Whether to loop from last to first element\n */\nexport function addKeyboardNavigation(container, selector = 'a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])', loop = true) {\n  if (!container) return;\n\n  const focusableElements = container.querySelectorAll(selector);\n  if (focusableElements.length === 0) return;\n\n  container.addEventListener('keydown', (e) => {\n    // Tab key navigation\n    if (e.key === 'Tab') {\n      const firstElement = focusableElements[0];\n      const lastElement = focusableElements[focusableElements.length - 1];\n\n      // Shift + Tab on first element\n      if (e.shiftKey && document.activeElement === firstElement) {\n        if (loop) {\n          e.preventDefault();\n          lastElement.focus();\n        }\n      } else if (!e.shiftKey && document.activeElement === lastElement) { // Tab on last element\n        if (loop) {\n          e.preventDefault();\n          firstElement.focus();\n        }\n      }\n    }\n  });\n}\n\n/**\n * Make an element announce a message to screen readers\n * @param {string} message - Message to announce\n * @param {string} ariaLive - ARIA live value ('polite' or 'assertive')\n */\nexport function announceToScreenReader(message, ariaLive = 'polite') {\n  // Create or get the announcement element\n  let announcer = document.getElementById('screen-reader-announcer');\n\n  if (!announcer) {\n    announcer = document.createElement('div');\n    announcer.id = 'screen-reader-announcer';\n    announcer.setAttribute('aria-live', ariaLive);\n    announcer.setAttribute('aria-atomic', 'true');\n    announcer.classList.add('sr-only');\n    document.body.appendChild(announcer);\n  }\n\n  // Set the message\n  announcer.textContent = '';\n\n  // Force a DOM reflow\n  void announcer.offsetWidth;\n\n  // Set the message\n  announcer.textContent = message;\n}\n\n/**\n * Add internationalization support to an element\n * @param {HTMLElement} element - Element to update\n * @param {string} textContent - Text content to set\n * @param {string} language - Language code\n */\nexport function setInternationalizedText(element, textContent, language = 'en') {\n  if (!element) return;\n\n  element.textContent = textContent;\n  element.setAttribute('lang', language);\n\n  // Set text direction based on language\n  const rtlLanguages = ['ar', 'he', 'fa', 'ur'];\n  if (rtlLanguages.includes(language)) {\n    element.setAttribute('dir', 'rtl');\n  } else {\n    element.setAttribute('dir', 'ltr');\n  }\n}\n\n/**\n * Update document language\n * @param {string} language - Language code\n */\nexport function updateDocumentLanguage(language = 'en') {\n  document.documentElement.setAttribute('lang', language);\n\n  // Set text direction based on language\n  const rtlLanguages = ['ar', 'he', 'fa', 'ur'];\n  if (rtlLanguages.includes(language)) {\n    document.documentElement.setAttribute('dir', 'rtl');\n  } else {\n    document.documentElement.setAttribute('dir', 'ltr');\n  }\n}\n\nexport default {\n  setFocus,\n  addKeyboardNavigation,\n  announceToScreenReader,\n  setInternationalizedText,\n  updateDocumentLanguage,\n};\n","/**\n * Calculation Manager Service\n * Manages saved loan calculations with naming, organization, and comparison features\n * Implements requirements 1.4, 3.3\n */\n\nimport StorageService from './storage.service.js';\nimport Loan from '../models/loan.model.js';\nimport { AmortizationSchedule } from '../models/amortization.model.js';\n\nclass CalculationManagerService {\n  /**\n   * Create a new calculation manager service\n   * @param {Object} options - Configuration options\n   * @param {StorageService} [options.storageService] - Storage service instance\n   * @param {number} [options.maxComparisons] - Maximum number of calculations that can be compared\n   */\n  constructor(options = {}) {\n    this.storageService = options.storageService || new StorageService();\n    this.maxComparisons = options.maxComparisons || 3;\n    this.selectedCalculations = [];\n  }\n\n  /**\n   * Get all saved calculations with additional metadata\n   * @returns {Array} Array of calculation objects with metadata\n   */\n  getAllCalculations() {\n    const calculations = this.storageService.getCalculations();\n\n    // Add additional metadata and sort by date (newest first)\n    return calculations\n      .map((calc) => ({\n        ...calc,\n        isSelected: this.isSelected(calc.loan.id),\n        formattedDate: this._formatDate(calc.savedAt),\n      }))\n      .sort((a, b) => b.savedAt - a.savedAt);\n  }\n\n  /**\n   * Get a calculation by ID with full details\n   * @param {string} id - Calculation ID\n   * @returns {Object|null} Calculation object with loan and amortization schedule\n   */\n  getCalculation(id) {\n    return this.storageService.getCalculationById(id);\n  }\n\n  /**\n   * Save a calculation with a custom name\n   * @param {Loan} loan - Loan object\n   * @param {AmortizationSchedule} [amortizationSchedule] - Amortization schedule\n   * @param {string} [name] - Custom name for the calculation\n   * @returns {string} ID of the saved calculation\n   */\n  saveCalculation(loan, amortizationSchedule = null, name = null) {\n    // Update the loan name if provided\n    if (name && name.trim()) {\n      loan = loan.update({ name: name.trim() });\n    }\n\n    return this.storageService.saveCalculation(loan, amortizationSchedule);\n  }\n\n  /**\n   * Update an existing calculation\n   * @param {string} id - Calculation ID\n   * @param {Object} updates - Updates to apply\n   * @param {string} [updates.name] - New name\n   * @param {Object} [updates.loanUpdates] - Updates to apply to the loan\n   * @returns {boolean} Success status\n   */\n  updateCalculation(id, updates = {}) {\n    // Get the existing calculation\n    const calculation = this.storageService.getCalculationById(id);\n    if (!calculation) {\n      return false;\n    }\n\n    // Apply updates\n    let updatedLoan = calculation.loan;\n\n    // Update name if provided\n    if (updates.name) {\n      updatedLoan = updatedLoan.update({ name: updates.name.trim() });\n    }\n\n    // Apply other loan updates if provided\n    if (updates.loanUpdates) {\n      updatedLoan = updatedLoan.update(updates.loanUpdates);\n    }\n\n    // Generate new amortization schedule if needed\n    let updatedSchedule = calculation.amortizationSchedule;\n    if (updates.loanUpdates) {\n      updatedSchedule = new AmortizationSchedule(updatedLoan);\n    }\n\n    // Save the updated calculation\n    return this.storageService.updateCalculation(id, updatedLoan, updatedSchedule);\n  }\n\n  /**\n   * Delete a calculation\n   * @param {string} id - Calculation ID\n   * @returns {boolean} Success status\n   */\n  deleteCalculation(id) {\n    // Remove from selected calculations if present\n    this.deselectCalculation(id);\n\n    // Delete from storage\n    return this.storageService.deleteCalculation(id);\n  }\n\n  /**\n   * Select a calculation for comparison\n   * @param {string} id - Calculation ID\n   * @returns {boolean} Success status\n   */\n  selectCalculation(id) {\n    // Check if already selected\n    if (this.isSelected(id)) {\n      return true;\n    }\n\n    // Check if we've reached the maximum number of comparisons\n    if (this.selectedCalculations.length >= this.maxComparisons) {\n      return false;\n    }\n\n    // Add to selected calculations\n    this.selectedCalculations.push(id);\n    return true;\n  }\n\n  /**\n   * Deselect a calculation\n   * @param {string} id - Calculation ID\n   * @returns {boolean} Success status\n   */\n  deselectCalculation(id) {\n    const index = this.selectedCalculations.indexOf(id);\n    if (index !== -1) {\n      this.selectedCalculations.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Check if a calculation is selected\n   * @param {string} id - Calculation ID\n   * @returns {boolean} Whether the calculation is selected\n   */\n  isSelected(id) {\n    return this.selectedCalculations.includes(id);\n  }\n\n  /**\n   * Clear all selected calculations\n   */\n  clearSelection() {\n    this.selectedCalculations = [];\n  }\n\n  /**\n   * Get selected calculations for comparison\n   * @returns {Array} Array of selected calculation objects\n   */\n  getSelectedCalculations() {\n    return this.selectedCalculations.map((id) => {\n      const calculation = this.storageService.getCalculationById(id);\n      return calculation ? {\n        id,\n        loan: calculation.loan,\n        amortizationSchedule: calculation.amortizationSchedule,\n        savedAt: calculation.savedAt,\n      } : null;\n    }).filter((calc) => calc !== null);\n  }\n\n  /**\n   * Compare selected calculations\n   * @returns {Object} Comparison results\n   */\n  compareCalculations() {\n    const selected = this.getSelectedCalculations();\n\n    if (selected.length < 2) {\n      return {\n        success: false,\n        message: 'At least two calculations must be selected for comparison',\n      };\n    }\n\n    // Create comparison data structure\n    const comparison = {\n      calculations: selected,\n      metrics: this._generateComparisonMetrics(selected),\n      differences: this._calculateDifferences(selected),\n    };\n\n    return {\n      success: true,\n      comparison,\n    };\n  }\n\n  /**\n   * Generate metrics for comparison\n   * @param {Array} calculations - Array of calculation objects\n   * @returns {Object} Comparison metrics\n   * @private\n   */\n  _generateComparisonMetrics(calculations) {\n    return calculations.map((calc) => {\n      const { loan } = calc;\n      const schedule = calc.amortizationSchedule;\n\n      return {\n        id: calc.id,\n        name: loan.name,\n        principal: loan.principal,\n        downPayment: loan.downPayment,\n        loanAmount: loan.totalLoanAmount,\n        interestRate: loan.interestRate,\n        term: loan.term,\n        paymentFrequency: loan.paymentFrequency,\n        paymentAmount: loan.paymentAmount,\n        totalInterest: schedule ? schedule.totalInterest : loan.totalInterest,\n        totalPayment: schedule ? schedule.totalPayment : (loan.paymentAmount * loan.numberOfPayments),\n        payoffDate: schedule ? schedule.payoffDate : loan.payoffDate,\n      };\n    });\n  }\n\n  /**\n   * Calculate differences between calculations\n   * @param {Array} calculations - Array of calculation objects\n   * @returns {Object} Differences between calculations\n   * @private\n   */\n  _calculateDifferences(calculations) {\n    if (calculations.length < 2) {\n      return {};\n    }\n\n    // Use the first calculation as the baseline\n    const baseline = calculations[0];\n    const differences = {};\n\n    // Compare each calculation to the baseline\n    for (let i = 1; i < calculations.length; i++) {\n      const current = calculations[i];\n      const diff = {\n        paymentDifference: current.loan.paymentAmount - baseline.loan.paymentAmount,\n        interestDifference: 0,\n        totalPaymentDifference: 0,\n        termDifference: current.loan.term - baseline.loan.term,\n      };\n\n      // Calculate interest and total payment differences if schedules are available\n      if (baseline.amortizationSchedule && current.amortizationSchedule) {\n        diff.interestDifference = current.amortizationSchedule.totalInterest - baseline.amortizationSchedule.totalInterest;\n        diff.totalPaymentDifference = current.amortizationSchedule.totalPayment - baseline.amortizationSchedule.totalPayment;\n      } else {\n        // Estimate if schedules aren't available\n        diff.interestDifference = (current.loan.paymentAmount * current.loan.numberOfPayments)\n          - (baseline.loan.paymentAmount * baseline.loan.numberOfPayments);\n        diff.totalPaymentDifference = diff.interestDifference;\n      }\n\n      differences[current.id] = diff;\n    }\n\n    return differences;\n  }\n\n  /**\n   * Format a date for display\n   * @param {Date} date - Date to format\n   * @returns {string} Formatted date string\n   * @private\n   */\n  _formatDate(date) {\n    if (!date) return '';\n\n    return date.toLocaleDateString(undefined, {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  }\n\n  /**\n   * Organize calculations by creating categories/folders (for future implementation)\n   * @param {Array} calculationIds - Array of calculation IDs\n   * @param {string} category - Category name\n   * @returns {boolean} Success status\n   */\n  organizeCalculations(calculationIds, category) {\n    // This is a placeholder for future implementation\n    // Would require extending the storage service to support categories\n    console.log(`Organizing calculations ${calculationIds.join(', ')} into category \"${category}\"`);\n    return true;\n  }\n\n  /**\n   * Get storage statistics\n   * @returns {Object} Storage statistics\n   */\n  getStorageStats() {\n    return this.storageService.getStorageStats();\n  }\n}\n\nexport default CalculationManagerService;\n","/**\n * Language Service\n * Manages language settings and translations for the application\n * Implements requirements 6.3, 6.4\n */\n\nimport { getTranslation, getTranslations, getAvailableLanguages } from '../utils/translations.js';\nimport { getLocaleFromLanguage } from '../utils/formatters.js';\nimport { updateDocumentLanguage } from '../utils/accessibility.js';\n\nclass LanguageService {\n  /**\n   * Create a new language service\n   * @param {Object} options - Configuration options\n   */\n  constructor(options = {}) {\n    this.currentLanguage = options.defaultLanguage || 'en';\n    this.storageKey = 'loan-calculator-language';\n    this.listeners = [];\n\n    // Load saved language\n    this.loadLanguage();\n  }\n\n  /**\n   * Load language from local storage\n   */\n  loadLanguage() {\n    try {\n      const savedLanguage = localStorage.getItem(this.storageKey);\n      if (savedLanguage) {\n        this.currentLanguage = savedLanguage;\n      }\n    } catch (error) {\n      console.error('Error loading language setting:', error);\n    }\n  }\n\n  /**\n   * Save language to local storage\n   */\n  saveLanguage() {\n    try {\n      localStorage.setItem(this.storageKey, this.currentLanguage);\n    } catch (error) {\n      console.error('Error saving language setting:', error);\n    }\n  }\n\n  /**\n   * Get current language\n   * @returns {string} Current language code\n   */\n  getLanguage() {\n    return this.currentLanguage;\n  }\n\n  /**\n   * Get current locale based on language\n   * @returns {string} Current locale\n   */\n  getLocale() {\n    return getLocaleFromLanguage(this.currentLanguage);\n  }\n\n  /**\n   * Set language\n   * @param {string} language - Language code\n   */\n  setLanguage(language) {\n    if (this.currentLanguage !== language) {\n      this.currentLanguage = language;\n      this.saveLanguage();\n\n      // Update document language for accessibility\n      updateDocumentLanguage(language);\n\n      this.notifyListeners();\n\n      // Dispatch a custom event for components to react to language change\n      const languageChangeEvent = new CustomEvent('languagechange', {\n        detail: { language },\n      });\n      document.dispatchEvent(languageChangeEvent);\n    }\n  }\n\n  /**\n   * Get translation for a key\n   * @param {string} key - Translation key\n   * @returns {string} Translated text\n   */\n  translate(key) {\n    return getTranslation(key, this.currentLanguage);\n  }\n\n  /**\n   * Get all translations for current language\n   * @returns {Object} Translations object\n   */\n  getAllTranslations() {\n    return getTranslations(this.currentLanguage);\n  }\n\n  /**\n   * Get available languages\n   * @returns {Array} Array of language objects\n   */\n  getAvailableLanguages() {\n    return getAvailableLanguages();\n  }\n\n  /**\n   * Add language change listener\n   * @param {Function} listener - Callback function\n   */\n  addListener(listener) {\n    if (typeof listener === 'function' && !this.listeners.includes(listener)) {\n      this.listeners.push(listener);\n    }\n  }\n\n  /**\n   * Remove language change listener\n   * @param {Function} listener - Callback function to remove\n   */\n  removeListener(listener) {\n    const index = this.listeners.indexOf(listener);\n    if (index !== -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Notify all listeners of language change\n   */\n  notifyListeners() {\n    this.listeners.forEach((listener) => {\n      try {\n        listener(this.currentLanguage);\n      } catch (error) {\n        console.error('Error in language change listener:', error);\n      }\n    });\n  }\n}\n\nexport default LanguageService;\n","/**\n * Settings Panel Component\n * Manages application settings and preferences\n * Implements requirements 2.5, 6.3, 6.4\n */\n\nclass SettingsPanel {\n  /**\n   * Create a new settings panel\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement|string} [options.container] - Container element or ID\n   * @param {Function} [options.onThemeChange] - Callback when theme changes\n   * @param {Function} [options.onLanguageChange] - Callback when language changes\n   * @param {Function} [options.onCurrencyChange] - Callback when currency format changes\n   */\n  constructor(options = {}) {\n    this.container = typeof options.container === 'string'\n      ? document.getElementById(options.container)\n      : options.container || document.getElementById('settings-container');\n\n    this.onThemeChange = options.onThemeChange || (() => {});\n    this.onLanguageChange = options.onLanguageChange || (() => {});\n    this.onCurrencyChange = options.onCurrencyChange || (() => {});\n\n    // Default settings\n    this.settings = {\n      theme: 'light',\n      language: 'en',\n      currency: 'USD',\n    };\n\n    // Available options\n    this.availableLanguages = [\n      { code: 'en', name: 'English' },\n      { code: 'es', name: 'Español' },\n    ];\n\n    this.availableCurrencies = [\n      { code: 'USD', symbol: '$', name: 'US Dollar' },\n      { code: 'EUR', symbol: '€', name: 'Euro' },\n      { code: 'GBP', symbol: '£', name: 'British Pound' },\n      { code: 'JPY', symbol: '¥', name: 'Japanese Yen' },\n      { code: 'CAD', symbol: 'C$', name: 'Canadian Dollar' },\n      { code: 'AUD', symbol: 'A$', name: 'Australian Dollar' },\n      { code: 'MXN', symbol: 'MX$', name: 'Mexican Peso' },\n    ];\n\n    // Storage key for settings\n    this.storageKey = 'loan-calculator-settings';\n\n    // Initialize\n    this.init();\n  }\n\n  /**\n   * Initialize the settings panel\n   */\n  init() {\n    // Load saved settings\n    this.loadSettings();\n\n    // Apply current settings\n    this.applyTheme(this.settings.theme);\n\n    // Render the panel\n    this.render();\n\n    console.log('Settings Panel component initialized');\n  }\n\n  /**\n   * Render the settings panel\n   */\n  render() {\n    if (!this.container) {\n      console.error('Settings panel container not found');\n      return;\n    }\n\n    // Create the settings panel structure\n    const panel = document.createElement('div');\n    panel.className = 'settings-panel';\n\n    // Create settings toggle button\n    const toggleButton = document.createElement('button');\n    toggleButton.className = 'settings-toggle';\n    toggleButton.setAttribute('aria-label', 'Open settings');\n    toggleButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n        <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>\n      </svg>\n    `;\n\n    // Create dropdown container\n    const dropdown = document.createElement('div');\n    dropdown.className = 'settings-dropdown';\n    dropdown.setAttribute('aria-hidden', 'true');\n\n    // Add theme toggle section\n    const themeSection = document.createElement('div');\n    themeSection.className = 'settings-section';\n    themeSection.appendChild(this.createThemeToggle());\n    dropdown.appendChild(themeSection);\n\n    // Add language selector section\n    const languageSection = document.createElement('div');\n    languageSection.className = 'settings-section';\n    languageSection.appendChild(this.createLanguageSelector());\n    dropdown.appendChild(languageSection);\n\n    // Add currency selector section\n    const currencySection = document.createElement('div');\n    currencySection.className = 'settings-section';\n    currencySection.appendChild(this.createCurrencySelector());\n    dropdown.appendChild(currencySection);\n\n    // Add toggle button and dropdown to panel\n    panel.appendChild(toggleButton);\n    panel.appendChild(dropdown);\n\n    // Add panel to container\n    this.container.innerHTML = '';\n    this.container.appendChild(panel);\n\n    // Add event listener for toggle button\n    toggleButton.addEventListener('click', () => {\n      const isActive = dropdown.classList.contains('active');\n      dropdown.classList.toggle('active');\n      dropdown.setAttribute('aria-hidden', isActive ? 'true' : 'false');\n      toggleButton.setAttribute('aria-label', isActive ? 'Open settings' : 'Close settings');\n    });\n\n    // Close dropdown when clicking outside\n    document.addEventListener('click', (event) => {\n      if (!panel.contains(event.target) && dropdown.classList.contains('active')) {\n        dropdown.classList.remove('active');\n        dropdown.setAttribute('aria-hidden', 'true');\n        toggleButton.setAttribute('aria-label', 'Open settings');\n      }\n    });\n  }\n\n  /**\n   * Create theme toggle element\n   * @returns {HTMLElement} Theme toggle section\n   */\n  createThemeToggle() {\n    const section = document.createElement('div');\n\n    const heading = document.createElement('h3');\n    heading.textContent = 'Theme';\n    section.appendChild(heading);\n\n    const toggleContainer = document.createElement('div');\n    toggleContainer.className = 'theme-toggle';\n\n    const lightLabel = document.createElement('span');\n    lightLabel.textContent = 'Light';\n\n    const toggleSwitch = document.createElement('label');\n    toggleSwitch.className = 'toggle-switch';\n\n    const checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.checked = this.settings.theme === 'dark';\n    checkbox.setAttribute('aria-label', 'Toggle dark theme');\n\n    const slider = document.createElement('span');\n    slider.className = 'toggle-slider';\n\n    const darkLabel = document.createElement('span');\n    darkLabel.textContent = 'Dark';\n\n    toggleSwitch.appendChild(checkbox);\n    toggleSwitch.appendChild(slider);\n\n    toggleContainer.appendChild(lightLabel);\n    toggleContainer.appendChild(toggleSwitch);\n    toggleContainer.appendChild(darkLabel);\n\n    section.appendChild(toggleContainer);\n\n    // Add event listener\n    checkbox.addEventListener('change', () => {\n      const newTheme = checkbox.checked ? 'dark' : 'light';\n      this.settings.theme = newTheme;\n      this.saveSettings();\n      this.applyTheme(newTheme);\n      this.onThemeChange(newTheme);\n    });\n\n    return section;\n  }\n\n  /**\n   * Create language selector element\n   * @returns {HTMLElement} Language selector section\n   */\n  createLanguageSelector() {\n    const section = document.createElement('div');\n\n    const heading = document.createElement('h3');\n    heading.textContent = 'Language';\n    section.appendChild(heading);\n\n    const select = document.createElement('select');\n    select.className = 'settings-select';\n    select.setAttribute('aria-label', 'Select language');\n\n    // Add language options\n    this.availableLanguages.forEach((lang) => {\n      const option = document.createElement('option');\n      option.value = lang.code;\n      option.textContent = lang.name;\n      option.selected = this.settings.language === lang.code;\n      select.appendChild(option);\n    });\n\n    section.appendChild(select);\n\n    // Add event listener\n    select.addEventListener('change', () => {\n      const newLanguage = select.value;\n      this.settings.language = newLanguage;\n      this.saveSettings();\n      this.onLanguageChange(newLanguage);\n    });\n\n    return section;\n  }\n\n  /**\n   * Create currency selector element\n   * @returns {HTMLElement} Currency selector section\n   */\n  createCurrencySelector() {\n    const section = document.createElement('div');\n\n    const heading = document.createElement('h3');\n    heading.textContent = 'Currency';\n    section.appendChild(heading);\n\n    const select = document.createElement('select');\n    select.className = 'settings-select';\n    select.setAttribute('aria-label', 'Select currency');\n\n    // Add currency options\n    this.availableCurrencies.forEach((currency) => {\n      const option = document.createElement('option');\n      option.value = currency.code;\n      option.textContent = `${currency.symbol} - ${currency.name}`;\n      option.selected = this.settings.currency === currency.code;\n      select.appendChild(option);\n    });\n\n    section.appendChild(select);\n\n    // Add event listener\n    select.addEventListener('change', () => {\n      const newCurrency = select.value;\n      this.settings.currency = newCurrency;\n      this.saveSettings();\n      this.onCurrencyChange(newCurrency);\n    });\n\n    return section;\n  }\n\n  /**\n   * Apply theme to the document\n   * @param {string} theme - Theme name ('light' or 'dark')\n   */\n  applyTheme(theme) {\n    if (theme === 'dark') {\n      document.body.classList.add('dark-theme');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.body.classList.remove('dark-theme');\n      localStorage.setItem('theme', 'light');\n    }\n\n    // Dispatch a custom event for other components to react to theme change\n    const themeChangeEvent = new CustomEvent('themechange', {\n      detail: { theme },\n    });\n    document.dispatchEvent(themeChangeEvent);\n  }\n\n  /**\n   * Load settings from local storage\n   */\n  loadSettings() {\n    try {\n      const savedSettings = localStorage.getItem(this.storageKey);\n      if (savedSettings) {\n        const parsedSettings = JSON.parse(savedSettings);\n        this.settings = {\n          ...this.settings,\n          ...parsedSettings,\n        };\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    }\n  }\n\n  /**\n   * Save settings to local storage\n   */\n  saveSettings() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.settings));\n    } catch (error) {\n      console.error('Error saving settings:', error);\n    }\n  }\n\n  /**\n   * Get current settings\n   * @returns {Object} Current settings object\n   */\n  getSettings() {\n    return { ...this.settings };\n  }\n\n  /**\n   * Update settings\n   * @param {Object} newSettings - New settings to apply\n   */\n  updateSettings(newSettings) {\n    this.settings = {\n      ...this.settings,\n      ...newSettings,\n    };\n\n    // Apply theme if it changed\n    if (newSettings.theme) {\n      this.applyTheme(newSettings.theme);\n    }\n\n    this.saveSettings();\n  }\n}\n\nexport default SettingsPanel;\n","/**\n * Saved Calculations Manager Component\n * Provides UI for viewing, loading, deleting, and comparing saved calculations\n * Implements requirements 1.4, 3.2, 3.3\n */\n\nimport CalculationManagerService from '../services/calculation-manager.service.js';\n\nclass SavedCalculationsManager {\n  /**\n   * Create a new saved calculations manager\n   * @param {Object} options - Configuration options\n   * @param {string} [options.containerId] - ID of the container element\n   * @param {CalculationManagerService} [options.calculationManager] - Calculation manager service\n   * @param {Function} [options.onLoadCalculation] - Callback when a calculation is loaded\n   * @param {Function} [options.onCompareCalculations] - Callback when calculations are compared\n   */\n  constructor(options = {}) {\n    this.containerId = options.containerId || 'saved-calculations-container';\n    this.calculationManager = options.calculationManager || new CalculationManagerService();\n    this.onLoadCalculation = options.onLoadCalculation || (() => {});\n    this.onCompareCalculations = options.onCompareCalculations || (() => {});\n\n    this.container = null;\n    this.calculationsList = null;\n    this.comparisonView = null;\n    this.isComparisonMode = false;\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the component\n   */\n  initialize() {\n    // Find or create the container\n    this.container = document.getElementById(this.containerId);\n    if (!this.container) {\n      console.error(`Container with ID \"${this.containerId}\" not found`);\n      return;\n    }\n\n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Render the component\n   */\n  render() {\n    // Clear the container\n    this.container.innerHTML = '';\n\n    // Create the main structure\n    const template = `\n      <div class=\"saved-calculations-manager\">\n        <div class=\"saved-calculations-header\">\n          <h2>Saved Calculations</h2>\n          <div class=\"saved-calculations-actions\">\n            <button id=\"compare-button\" class=\"btn btn-secondary\" disabled>Compare Selected</button>\n            <button id=\"clear-selection-button\" class=\"btn btn-outline-secondary\" disabled>Clear Selection</button>\n          </div>\n        </div>\n        \n        <div class=\"saved-calculations-content\">\n          <div id=\"saved-calculations-list\" class=\"saved-calculations-list\">\n            <p class=\"empty-state-message\">No saved calculations yet. Save a calculation to see it here.</p>\n          </div>\n          \n          <div id=\"comparison-view\" class=\"comparison-view\" style=\"display: none;\">\n            <div class=\"comparison-header\">\n              <h3>Comparison</h3>\n              <button id=\"close-comparison-button\" class=\"btn btn-outline-secondary\">Close</button>\n            </div>\n            <div id=\"comparison-content\" class=\"comparison-content\"></div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.container.innerHTML = template;\n\n    // Store references to elements\n    this.calculationsList = document.getElementById('saved-calculations-list');\n    this.comparisonView = document.getElementById('comparison-view');\n    this.comparisonContent = document.getElementById('comparison-content');\n    this.compareButton = document.getElementById('compare-button');\n    this.clearSelectionButton = document.getElementById('clear-selection-button');\n\n    // Load saved calculations\n    this.loadCalculations();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  attachEventListeners() {\n    // Compare button\n    const compareButton = document.getElementById('compare-button');\n    if (compareButton) {\n      compareButton.addEventListener('click', () => this.showComparison());\n    }\n\n    // Clear selection button\n    const clearSelectionButton = document.getElementById('clear-selection-button');\n    if (clearSelectionButton) {\n      clearSelectionButton.addEventListener('click', () => this.clearSelection());\n    }\n\n    // Close comparison button\n    const closeComparisonButton = document.getElementById('close-comparison-button');\n    if (closeComparisonButton) {\n      closeComparisonButton.addEventListener('click', () => this.hideComparison());\n    }\n  }\n\n  /**\n   * Load and display saved calculations\n   */\n  loadCalculations() {\n    const calculations = this.calculationManager.getAllCalculations();\n\n    if (calculations.length === 0) {\n      // Show empty state\n      this.calculationsList.innerHTML = `\n        <p class=\"empty-state-message\">No saved calculations yet. Save a calculation to see it here.</p>\n      `;\n      return;\n    }\n\n    // Clear the list\n    this.calculationsList.innerHTML = '';\n\n    // Create a card for each calculation\n    calculations.forEach((calc) => {\n      const card = this.createCalculationCard(calc);\n      this.calculationsList.appendChild(card);\n    });\n\n    // Update button states\n    this.updateButtonStates();\n  }\n\n  /**\n   * Create a card element for a calculation\n   * @param {Object} calculation - Calculation object\n   * @returns {HTMLElement} Card element\n   */\n  createCalculationCard(calculation) {\n    const { loan, savedAt, isSelected } = calculation;\n\n    // Format currency\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    });\n\n    const card = document.createElement('div');\n    card.className = `calculation-card ${isSelected ? 'selected' : ''}`;\n    card.dataset.id = loan.id;\n\n    card.innerHTML = `\n      <div class=\"calculation-card-header\">\n        <h3 class=\"calculation-name\">${loan.name || 'Unnamed Calculation'}</h3>\n        <div class=\"calculation-date\">${calculation.formattedDate}</div>\n      </div>\n      \n      <div class=\"calculation-card-content\">\n        <div class=\"calculation-details\">\n          <div class=\"detail-row\">\n            <span class=\"detail-label\">Loan Amount:</span>\n            <span class=\"detail-value\">${formatter.format(loan.totalLoanAmount)}</span>\n          </div>\n          <div class=\"detail-row\">\n            <span class=\"detail-label\">Interest Rate:</span>\n            <span class=\"detail-value\">${loan.interestRate}%</span>\n          </div>\n          <div class=\"detail-row\">\n            <span class=\"detail-label\">Term:</span>\n            <span class=\"detail-value\">${loan.term} months</span>\n          </div>\n          <div class=\"detail-row\">\n            <span class=\"detail-label\">Payment:</span>\n            <span class=\"detail-value\">${formatter.format(loan.paymentAmount)}</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"calculation-card-actions\">\n        <button class=\"btn btn-primary load-btn\">Load</button>\n        <button class=\"btn btn-outline-danger delete-btn\">Delete</button>\n        <div class=\"select-calculation\">\n          <input type=\"checkbox\" id=\"select-${loan.id}\" class=\"select-checkbox\" ${isSelected ? 'checked' : ''}>\n          <label for=\"select-${loan.id}\">Select for comparison</label>\n        </div>\n      </div>\n    `;\n\n    // Add event listeners\n    const loadBtn = card.querySelector('.load-btn');\n    loadBtn.addEventListener('click', () => this.loadCalculation(loan.id));\n\n    const deleteBtn = card.querySelector('.delete-btn');\n    deleteBtn.addEventListener('click', () => this.deleteCalculation(loan.id));\n\n    const selectCheckbox = card.querySelector('.select-checkbox');\n    selectCheckbox.addEventListener('change', (e) => {\n      if (e.target.checked) {\n        this.selectCalculation(loan.id, card);\n      } else {\n        this.deselectCalculation(loan.id, card);\n      }\n    });\n\n    return card;\n  }\n\n  /**\n   * Load a calculation\n   * @param {string} id - Calculation ID\n   */\n  loadCalculation(id) {\n    const calculation = this.calculationManager.getCalculation(id);\n    if (calculation) {\n      this.onLoadCalculation(calculation);\n    }\n  }\n\n  /**\n   * Delete a calculation\n   * @param {string} id - Calculation ID\n   */\n  deleteCalculation(id) {\n    if (confirm('Are you sure you want to delete this calculation?')) {\n      const success = this.calculationManager.deleteCalculation(id);\n      if (success) {\n        this.loadCalculations();\n      }\n    }\n  }\n\n  /**\n   * Select a calculation for comparison\n   * @param {string} id - Calculation ID\n   * @param {HTMLElement} card - Card element\n   */\n  selectCalculation(id, card) {\n    const success = this.calculationManager.selectCalculation(id);\n\n    if (!success) {\n      // If selection failed (e.g., max comparisons reached), uncheck the checkbox\n      const checkbox = card.querySelector('.select-checkbox');\n      checkbox.checked = false;\n\n      alert(`You can only select up to ${this.calculationManager.maxComparisons} calculations for comparison.`);\n      return;\n    }\n\n    // Add selected class to card\n    card.classList.add('selected');\n\n    // Update button states\n    this.updateButtonStates();\n  }\n\n  /**\n   * Deselect a calculation\n   * @param {string} id - Calculation ID\n   * @param {HTMLElement} card - Card element\n   */\n  deselectCalculation(id, card) {\n    this.calculationManager.deselectCalculation(id);\n\n    // Remove selected class from card\n    card.classList.remove('selected');\n\n    // Update button states\n    this.updateButtonStates();\n  }\n\n  /**\n   * Clear all selected calculations\n   */\n  clearSelection() {\n    this.calculationManager.clearSelection();\n\n    // Update UI\n    const selectedCards = this.calculationsList.querySelectorAll('.calculation-card.selected');\n    selectedCards.forEach((card) => {\n      card.classList.remove('selected');\n      const checkbox = card.querySelector('.select-checkbox');\n      checkbox.checked = false;\n    });\n\n    // Update button states\n    this.updateButtonStates();\n  }\n\n  /**\n   * Update button states based on selection\n   */\n  updateButtonStates() {\n    const selectedCount = this.calculationManager.selectedCalculations.length;\n\n    // Compare button\n    this.compareButton.disabled = selectedCount < 2;\n\n    // Clear selection button\n    this.clearSelectionButton.disabled = selectedCount === 0;\n  }\n\n  /**\n   * Show comparison view\n   */\n  showComparison() {\n    const result = this.calculationManager.compareCalculations();\n\n    if (!result.success) {\n      alert(result.message);\n      return;\n    }\n\n    // Switch to comparison mode\n    this.isComparisonMode = true;\n    this.calculationsList.style.display = 'none';\n    this.comparisonView.style.display = 'block';\n\n    // Render comparison\n    this.renderComparison(result.comparison);\n\n    // Notify parent component\n    this.onCompareCalculations(result.comparison);\n  }\n\n  /**\n   * Hide comparison view\n   */\n  hideComparison() {\n    // Switch back to list mode\n    this.isComparisonMode = false;\n    this.calculationsList.style.display = 'block';\n    this.comparisonView.style.display = 'none';\n  }\n\n  /**\n   * Render comparison view\n   * @param {Object} comparison - Comparison data\n   */\n  renderComparison(comparison) {\n    const { calculations, metrics, differences } = comparison;\n\n    // Format currency\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    });\n\n    // Create table header\n    let tableHtml = `\n      <table class=\"comparison-table\">\n        <thead>\n          <tr>\n            <th>Metric</th>\n            ${metrics.map((m) => `<th>${m.name || 'Unnamed'}</th>`).join('')}\n          </tr>\n        </thead>\n        <tbody>\n    `;\n\n    // Add rows for each metric\n    const metricRows = [\n      { label: 'Loan Amount', key: 'loanAmount', format: (val) => formatter.format(val) },\n      { label: 'Interest Rate', key: 'interestRate', format: (val) => `${val}%` },\n      { label: 'Term', key: 'term', format: (val) => `${val} months` },\n      { label: 'Payment Frequency', key: 'paymentFrequency', format: (val) => val },\n      { label: 'Payment Amount', key: 'paymentAmount', format: (val) => formatter.format(val) },\n      { label: 'Total Interest', key: 'totalInterest', format: (val) => formatter.format(val) },\n      { label: 'Total Payment', key: 'totalPayment', format: (val) => formatter.format(val) },\n    ];\n\n    metricRows.forEach((row) => {\n      tableHtml += `\n        <tr>\n          <td>${row.label}</td>\n          ${metrics.map((m) => `<td>${row.format(m[row.key])}</td>`).join('')}\n        </tr>\n      `;\n    });\n\n    // Add difference rows if there are multiple calculations\n    if (metrics.length > 1) {\n      tableHtml += `\n        <tr class=\"comparison-separator\">\n          <td colspan=\"${metrics.length + 1}\">Differences (compared to ${metrics[0].name || 'first calculation'})</td>\n        </tr>\n      `;\n\n      // Skip the first calculation (baseline)\n      for (let i = 1; i < metrics.length; i++) {\n        const metric = metrics[i];\n        const diff = differences[metric.id];\n\n        if (diff) {\n          tableHtml += `\n            <tr>\n              <td>Monthly Payment Difference</td>\n              ${Array(i).fill('<td></td>').join('')}\n              <td class=\"${diff.paymentDifference < 0 ? 'positive' : 'negative'}\">${formatter.format(diff.paymentDifference)}</td>\n              ${Array(metrics.length - i - 1).fill('<td></td>').join('')}\n            </tr>\n            <tr>\n              <td>Total Interest Difference</td>\n              ${Array(i).fill('<td></td>').join('')}\n              <td class=\"${diff.interestDifference < 0 ? 'positive' : 'negative'}\">${formatter.format(diff.interestDifference)}</td>\n              ${Array(metrics.length - i - 1).fill('<td></td>').join('')}\n            </tr>\n            <tr>\n              <td>Total Payment Difference</td>\n              ${Array(i).fill('<td></td>').join('')}\n              <td class=\"${diff.totalPaymentDifference < 0 ? 'positive' : 'negative'}\">${formatter.format(diff.totalPaymentDifference)}</td>\n              ${Array(metrics.length - i - 1).fill('<td></td>').join('')}\n            </tr>\n          `;\n        }\n      }\n    }\n\n    tableHtml += `\n        </tbody>\n      </table>\n    `;\n\n    this.comparisonContent.innerHTML = tableHtml;\n  }\n\n  /**\n   * Refresh the component\n   */\n  refresh() {\n    this.loadCalculations();\n  }\n}\n\nexport default SavedCalculationsManager;\n"],"names":["constructor","options","this","storageKey","version","_initializeStorage","data","localStorage","getItem","parsedData","JSON","parse","_migrateData","defaultData","lastUpdated","Date","toISOString","calculations","setItem","stringify","error","oldData","migratedData","_getData","_saveData","name","code","_handleStorageLimit","length","sort","a","b","updatedAt","shift","saveCalculation","loan","amortizationSchedule","Error","calculationData","toJSON","savedAt","existingIndex","findIndex","calc","id","push","getCalculations","map","Loan","fromJSON","getCalculationById","find","AmortizationSchedule","updateCalculation","updatedLoan","updatedSchedule","deleteCalculation","index","splice","clearAllCalculations","isStorageAvailable","testKey","result","removeItem","e","getStorageStats","allData","serializedData","usedBytes","Blob","size","totalBytes","usedKB","Math","round","totalKB","percentUsed","itemCount","isNearingLimit","LOAN_TYPES","mortgage","defaultTerm","defaultRate","minAmount","maxAmount","description","auto","personal","student","PAYMENT_FREQUENCIES","monthly","paymentsPerYear","weekly","generateUniqueId","type","validateLoanType","typeDefaults","principal","validateNumber","interestRate","term","paymentFrequency","validatePaymentFrequency","downPayment","additionalPayment","inflationRate","startDate","createdAt","validate","totalLoanAmount","max","numberOfPayments","ceil","periodicInterestRate","paymentAmount","P","r","n","totalInterest","payoffDate","setMonth","getMonth","setDate","getDate","now","floor","random","validTypes","Object","keys","join","frequency","validFrequencies","value","defaultValue","min","num","parseFloat","isNaN","warnings","isValid","update","updates","getTime","calculateAdditionalPaymentImpact","baselineLoan","enhancedLoan","then","baselineSchedule","enhancedSchedule","paymentsSaved","payments","baselineInterest","enhancedInterest","interestSaved","timeSavedMonths","timeSavedYears","newPayoffDate","originalTerm","newTerm","originalPayment","newPayment","originalTotalInterest","newTotalInterest","calculateRefinance","newLoanOptions","currentSchedule","currentBalance","balance","refinanceOptions","newLoan","newSchedule","remainingPayments","remainingInterest","newPayments","newInterest","oldPayment","monthlySavings","closingCosts","currentTotalCost","newTotalCost","lifetimeSavings","breakEvenMonths","Infinity","currentLoan","payment","remainingBalance","totalCost","totalPayments","comparison","isWorthwhile","refinanceLoan","json","parsedJson","createDefault","defaults","calculateAffordableLoan","desiredPayment","tempLoan","affordablePrincipal","totalPurchasePrice","affordableLoan","monthlyPayment","getLocaleFromLanguage","language","en","es","formatNumber","decimals","locale","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","formatCurrency","currencyCode","style","currency","formatDate","date","dateObj","DateTimeFormat","getDateFormatForLocale","month","String","padStart","day","year","getFullYear","formatted","replace","formatPercentage","Number","toFixed","formatDuration","months","years","remainingMonths","container","document","getElementById","calculatorForm","resultsDisplay","init","render","bindEvents","initializeTooltips","t","key","getTranslation","guidanceHtml","innerHTML","tutorialButton","querySelector","addEventListener","startTutorial","guidanceButton","showGuidance","initTooltips","addFormTooltips","addResultsTooltips","formContainer","addTooltipToField","fieldId","tooltipKey","position","label","infoIcon","createElement","className","textContent","setAttribute","appendChild","resultsContainer","addTooltipToResult","selector","element","tutorialSteps","title","content","createTutorial","showGuidancePanel","guidanceContent","panelContainer","body","createGuidancePanel","updateLanguage","containerId","formatters","percentage","number","duration","onSave","charts","Charts","_initEventListeners","saveButton","exportButton","_currentLoan","_currentAmortizationSchedule","calculationResults","inflationAdjusted","comparisonScenarios","summary","loanAmount","totalPayment","totalInflationAdjustedPayment","totalInflationAdjustedInterest","savingsFromInflation","breakdown","interest","total","interestRatio","principalRatio","displaySummary","displayPaymentBreakdown","clear","renderPrincipalVsInterestChart","renderPaymentBreakdownPieChart","scenarios","forEach","scenario","renderComparisonChart","display","summaryContainer","formattedValues","inflationSection","inflationValues","totalAdjustedPayment","savingsPercentage","summaryHtml","_addInterestRateIndicator","interestRateElement","classList","remove","add","breakdownContainer","breakdownHtml","updateResults","autoGenerate","isGenerating","generationProgress","generateSchedule","generateScheduleAsync","includeAdditionalPayments","onProgress","timeout","batchSize","periodicRate","regularPayment","maxPayments","paymentNumber","currentDate","paymentInterval","getPaymentInterval","startTime","interestPayment","principalPayment","Payment","estimatedTotalPayments","Promise","resolve","setTimeout","advanceDate","days","interval","reduce","sum","amount","loanId","Array","isArray","schedule","paymentJson","cumulativePrincipal","cumulativeInterest","isNumber","isFinite","isPositiveNumber","isInRange","isValidInterestRate","isValidInflationRate","isValidLoanTerm","isInteger","currentLoanType","loanType","currentRate","onRateSelect","marketRatesData","average","trend","ratesData","formattedDate","toLocaleDateString","trendIcon","getTrendIcon","marketRatesHtml","getRateComparisonClass","formatRateDifference","useAverageRateButton","averageRate","difference","abs","updateLoanType","updateCurrentRate","rate","onCalculate","validators","formData","undefined","marketRatesComponent","initMarketRates","handleCalculate","marketRatesContainer","MarketRates","interestRateInput","interestRateSlider","formHtml","entries","translationKey","split","form","preventDefault","resetButton","reset","loanTypeSelect","target","updateLoanTypeParameters","bindSliderInputSync","querySelectorAll","preset","parseInt","dataset","termInput","termSlider","validateField","input","field","downPaymentInput","downPaymentSlider","inputEvent","Event","dispatchEvent","fieldName","slider","principalInput","principalSlider","rangeValues","parentElement","currentValue","validator","errorMessage","getFieldErrorMessage","message","errorElement","numValue","toLocaleString","fieldValid","getFormData","showFormError","calculateButton","disabled","existingError","errorContainer","insertBefore","firstChild","parentNode","setFormData","dateString","defaultLoan","updateCurrencyFormat","translations","loanTerm","calculate","biWeekly","marketRates","disclaimer","rateRange","yourRate","belowAverage","aboveAverage","sameAsAverage","useAverageRate","viewTrends","compareRates","glossary","openGlossary","close","search","searchPlaceholder","noResults","searchResults","opened","closed","results","interestSavings","timeReduction","share","export","print","amortization","paymentDate","totalPrincipal","filter","showAll","annual","noData","principalVsInterest","paymentBreakdown","time","savedCalculations","noSavedCalculations","load","delete","compare","rename","confirmDelete","enterName","defaultName","settings","theme","light","dark","dateFormat","numberFormat","savings","common","yes","no","ok","cancel","save","loading","success","warning","info","tooltips","interpretingResults","affordabilityGuidance","refinanceGuidance","guidance","help","tutorial","interpretingResultsTitle","interpretingResultsContent","affordabilityTitle","affordabilityContent","affordabilityTip1","affordabilityTip2","affordabilityTip3","additionalPaymentsTitle","additionalPaymentsContent","refinanceTitle","refinanceContent","refinanceTip1","refinanceTip2","refinanceTip3","loanTypeTitle","loanTypeContent","loanAmountTitle","loanAmountContent","interestRateTitle","interestRateContent","loanTermTitle","loanTermContent","termPresetsTitle","termPresetsContent","additionalPaymentTitle","additionalPaymentContent","calculateTitle","calculateContent","resultsTitle","resultsContent","amortizationTitle","amortizationContent","chartsTitle","chartsContent","completedTitle","completedContent","translation","k","getTranslations","getAvailableLanguages","tooltip","tooltipContent","getAttribute","getComputedStyle","showTooltip","hideTooltip","hasAttribute","tooltipId","toString","substr","event","currentTarget","tooltipRect","getBoundingClientRect","viewportWidth","window","innerWidth","viewportHeight","innerHeight","left","right","top","bottom","positionTooltip","announcer","offsetWidth","announceTooltip","panel","closeButton","steps","onComplete","currentStep","overlay","showTutorialStep","step","nextStep","rect","highlight","width","height","positionHighlight","positionTooltipNearTarget","prevButton","nextButton","prevStep","action","colorScheme","chartInstances","_createChartContainers","principalInterestContainer","paymentBreakdownContainer","comparisonContainer","inflationImpactContainer","_resizeCharts","values","chart","resize","chartContainer","canvas","sampleInterval","sampledPayments","_","labels","principalData","interestData","balanceData","destroy","Chart","datasets","backgroundColor","borderColor","borderWidth","fill","tension","responsive","maintainAspectRatio","plugins","mode","intersect","callbacks","context","parsed","y","legend","boxWidth","padding","scales","x","text","ticks","maxTicksLimit","callback","_applyChartTheme","raw","updateChartTheme","isDark","textColor","gridColor","scale","color","grid","config","renderInflationImpactChart","nominalPayments","originalAmount","inflationAdjustedPayments","inflationAdjustedAmount","inflationImpact","legendContainer","originalTotal","totalOriginalPayment","adjustedTotal","isOpen","terms","getGlossaryTerms","glossaryButtonHtml","glossaryModalHtml","renderTermsList","searchTerm","filteredTerms","toLowerCase","includes","definition","localeCompare","groupedTerms","acc","firstLetter","charAt","toUpperCase","html","letter","toggleButton","toggleGlossary","closeGlossary","searchInput","handleSearch","modal","modalContent","addKeyboardNavigation","focus","announceToScreenReader","termsList","loop","focusableElements","firstElement","lastElement","shiftKey","activeElement","ariaLive","updateDocumentLanguage","documentElement","storageService","StorageService","maxComparisons","selectedCalculations","getAllCalculations","isSelected","_formatDate","getCalculation","trim","calculation","loanUpdates","deselectCalculation","selectCalculation","indexOf","clearSelection","getSelectedCalculations","compareCalculations","selected","metrics","_generateComparisonMetrics","differences","_calculateDifferences","baseline","i","current","diff","paymentDifference","interestDifference","totalPaymentDifference","termDifference","hour","minute","organizeCalculations","calculationIds","category","currentLanguage","defaultLanguage","listeners","loadLanguage","savedLanguage","saveLanguage","getLanguage","getLocale","setLanguage","notifyListeners","languageChangeEvent","CustomEvent","detail","translate","getAllTranslations","addListener","listener","removeListener","onThemeChange","onLanguageChange","onCurrencyChange","availableLanguages","availableCurrencies","symbol","loadSettings","applyTheme","dropdown","themeSection","createThemeToggle","languageSection","createLanguageSelector","currencySection","createCurrencySelector","isActive","contains","toggle","section","heading","toggleContainer","lightLabel","toggleSwitch","checkbox","checked","darkLabel","newTheme","saveSettings","select","lang","option","newLanguage","newCurrency","themeChangeEvent","savedSettings","parsedSettings","getSettings","updateSettings","newSettings","calculationManager","CalculationManagerService","onLoadCalculation","onCompareCalculations","calculationsList","comparisonView","isComparisonMode","initialize","attachEventListeners","comparisonContent","compareButton","clearSelectionButton","loadCalculations","showComparison","closeComparisonButton","hideComparison","card","createCalculationCard","updateButtonStates","formatter","loadCalculation","confirm","alert","selectedCount","renderComparison","tableHtml","m","val","row","refresh"],"sourceRoot":""}