{"version":3,"file":"js/calculator-service.73d8e65b1fdec0fe1b5e.chunk.js","mappings":"6HAoIA,UA/HA,MACEA,WAAAA,GAGA,CAEAC,gBAAAA,CAAiBC,EAAWC,EAAMC,EAAMC,GAEtC,MAAMC,EAAgBH,EAAO,IAAOI,KAAKC,oBAAoBH,GAGvDI,EAAmBF,KAAKG,2BAA2BN,EAAMC,GAG/D,GAAIH,GAAa,EAAG,OAAO,EAC3B,GAAII,GAAgB,EAAG,OAAOJ,EAAYO,EAM1C,OAHsBP,EAAYI,GAAgB,EAAIA,IAAiBG,IAC9C,EAAIH,IAAiBG,EAAmB,EAGnE,CAEAE,6BAAAA,CAA8BT,EAAWC,EAAMC,EAAMC,EAAWO,GAE9D,MAAO,EACT,CAEAC,sBAAAA,CAAuBC,EAAgBX,EAAMC,GAE3C,OAAO,CACT,CAEAW,kBAAAA,CAAmBC,EAAaC,EAASC,EAASC,GAEhD,MAAO,CAAC,CACV,CAEAC,mBAAAA,CAAoBC,GAElB,MAAO,CAAC,CACV,CAcAb,mBAAAA,CAAoBH,GAClB,OAAQA,GACN,IAAK,SACH,OAAO,GACT,IAAK,YACH,OAAO,GAET,QACE,OAAO,GAEb,CASAK,0BAAAA,CAA2BN,EAAMC,GAC/B,MAAMiB,EAAkBf,KAAKC,oBAAoBH,GACjD,OAAOkB,KAAKC,KAAKpB,EAAOkB,EAAkB,GAC5C,CAEAG,0BAAAA,CAA2BC,EAAUC,GACnC,IAAKD,IAAaA,EAASE,WAAaC,MAAMC,QAAQJ,EAASE,WAA0C,IAA7BF,EAASE,SAASG,OAC5F,MAAO,GAIT,MAAMC,GAAwB,EAAKL,EAAgB,OAAU,EAAI,IAAM,EAGjEM,EAAmBP,EAASE,SAASM,IAAI,CAACC,EAASC,KAGvD,MAAMC,GAAmB,EAAIL,KAA0BI,EAGvD,MAAO,IACFD,EACHG,wBAAyBH,EAAQI,OAASF,EAC1CG,2BAA4BL,EAAQjC,UAAYmC,EAChDI,0BAA2BN,EAAQO,SAAWL,EAC9CA,kBACAM,eAAgBR,EAAQI,OACxBK,kBAAmBT,EAAQjC,UAC3B2C,iBAAkBV,EAAQO,YAKxBI,EAAuBb,EAAiBc,OAAO,CAACC,EAAKb,IAAYa,EAAMb,EAAQQ,eAAgB,GAC/FM,EAAgChB,EAAiBc,OAAO,CAACC,EAAKb,IAAYa,EAAMb,EAAQG,wBAAyB,GACjHY,EAAwBjB,EAAiBc,OAAO,CAACC,EAAKb,IAAYa,EAAMb,EAAQU,iBAAkB,GAClGM,EAAiClB,EAAiBc,OAAO,CAACC,EAAKb,IAAYa,EAAMb,EAAQM,0BAA2B,GAE1H,MAAO,CACLb,SAAUK,EACVmB,QAAS,CACPN,uBACAG,gCACAC,wBACAC,iCACAE,qBAAsBP,EAAuBG,EAC7CtB,iBAGN,E","sources":["webpack://loan-calculator/./src/js/services/calculator.service.js"],"sourcesContent":["/**\n * Calculator Service\n * Handles loan calculations and amortization schedule generation\n */\n\nclass CalculatorService {\n  constructor() {\n    // Service will be implemented in task 2.2 and 2.3\n    console.log('Calculator Service initialized');\n  }\n\n  calculatePayment(principal, rate, term, frequency) {\n    // Convert annual rate to decimal and then to periodic rate\n    const periodicRate = (rate / 100) / this._getPaymentsPerYear(frequency);\n\n    // Calculate number of payments\n    const numberOfPayments = this._calculateNumberOfPayments(term, frequency);\n\n    // Handle edge cases\n    if (principal <= 0) return 0;\n    if (periodicRate <= 0) return principal / numberOfPayments;\n\n    // Standard loan payment formula: P * r * (1 + r)^n / ((1 + r)^n - 1)\n    const paymentAmount = principal * periodicRate * (1 + periodicRate) ** numberOfPayments\n                         / ((1 + periodicRate) ** numberOfPayments - 1);\n\n    return paymentAmount;\n  }\n\n  calculateAmortizationSchedule(principal, rate, term, frequency, additionalPayments) {\n    // Amortization schedule calculation will be implemented in task 2.2\n    return [];\n  }\n\n  calculateAffordability(desiredPayment, rate, term) {\n    // Affordability calculation will be implemented in task 2.3\n    return 0;\n  }\n\n  calculateRefinance(currentLoan, newRate, newTerm, closingCosts) {\n    // Refinance calculation will be implemented in task 2.3\n    return {};\n  }\n\n  calculateComparison(loanScenarios) {\n    // Comparison calculation will be implemented in task 2.3\n    return {};\n  }\n\n  /**\n   * Calculate inflation-adjusted values for an amortization schedule\n   * @param {AmortizationSchedule} schedule - Amortization schedule\n   * @param {number} inflationRate - Annual inflation rate as a percentage (e.g., 2.5 for 2.5%)\n   * @returns {Array} Array of inflation-adjusted payment objects\n   */\n  /**\n   * Helper method to get payments per year based on frequency\n   * @private\n   * @param {string} frequency - Payment frequency (monthly, bi-weekly, weekly)\n   * @returns {number} Payments per year\n   */\n  _getPaymentsPerYear(frequency) {\n    switch (frequency) {\n      case 'weekly':\n        return 52;\n      case 'bi-weekly':\n        return 26;\n      case 'monthly':\n      default:\n        return 12;\n    }\n  }\n\n  /**\n   * Helper method to calculate number of payments\n   * @private\n   * @param {number} term - Loan term in months\n   * @param {string} frequency - Payment frequency\n   * @returns {number} Total number of payments\n   */\n  _calculateNumberOfPayments(term, frequency) {\n    const paymentsPerYear = this._getPaymentsPerYear(frequency);\n    return Math.ceil(term * paymentsPerYear / 12);\n  }\n\n  calculateInflationAdjusted(schedule, inflationRate) {\n    if (!schedule || !schedule.payments || !Array.isArray(schedule.payments) || schedule.payments.length === 0) {\n      return [];\n    }\n\n    // Convert annual inflation rate to monthly rate\n    const monthlyInflationRate = (1 + (inflationRate / 100)) ** (1 / 12) - 1;\n\n    // Clone the payments array to avoid modifying the original\n    const adjustedPayments = schedule.payments.map((payment, index) => {\n      // Calculate inflation factor based on payment number\n      // The first payment is not adjusted (factor = 1)\n      const inflationFactor = (1 + monthlyInflationRate) ** -index;\n\n      // Create a new payment object with adjusted values\n      return {\n        ...payment,\n        inflationAdjustedAmount: payment.amount * inflationFactor,\n        inflationAdjustedPrincipal: payment.principal * inflationFactor,\n        inflationAdjustedInterest: payment.interest * inflationFactor,\n        inflationFactor,\n        originalAmount: payment.amount,\n        originalPrincipal: payment.principal,\n        originalInterest: payment.interest,\n      };\n    });\n\n    // Calculate totals\n    const totalOriginalPayment = adjustedPayments.reduce((sum, payment) => sum + payment.originalAmount, 0);\n    const totalInflationAdjustedPayment = adjustedPayments.reduce((sum, payment) => sum + payment.inflationAdjustedAmount, 0);\n    const totalOriginalInterest = adjustedPayments.reduce((sum, payment) => sum + payment.originalInterest, 0);\n    const totalInflationAdjustedInterest = adjustedPayments.reduce((sum, payment) => sum + payment.inflationAdjustedInterest, 0);\n\n    return {\n      payments: adjustedPayments,\n      summary: {\n        totalOriginalPayment,\n        totalInflationAdjustedPayment,\n        totalOriginalInterest,\n        totalInflationAdjustedInterest,\n        savingsFromInflation: totalOriginalPayment - totalInflationAdjustedPayment,\n        inflationRate,\n      },\n    };\n  }\n}\n\nexport default CalculatorService;\n"],"names":["constructor","calculatePayment","principal","rate","term","frequency","periodicRate","this","_getPaymentsPerYear","numberOfPayments","_calculateNumberOfPayments","calculateAmortizationSchedule","additionalPayments","calculateAffordability","desiredPayment","calculateRefinance","currentLoan","newRate","newTerm","closingCosts","calculateComparison","loanScenarios","paymentsPerYear","Math","ceil","calculateInflationAdjusted","schedule","inflationRate","payments","Array","isArray","length","monthlyInflationRate","adjustedPayments","map","payment","index","inflationFactor","inflationAdjustedAmount","amount","inflationAdjustedPrincipal","inflationAdjustedInterest","interest","originalAmount","originalPrincipal","originalInterest","totalOriginalPayment","reduce","sum","totalInflationAdjustedPayment","totalOriginalInterest","totalInflationAdjustedInterest","summary","savingsFromInflation"],"sourceRoot":""}