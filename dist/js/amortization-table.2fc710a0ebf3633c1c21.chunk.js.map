{"version":3,"file":"js/amortization-table.2fc710a0ebf3633c1c21.chunk.js","mappings":"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","sources":["webpack://loan-calculator/./src/js/components/amortization-table.js"],"sourcesContent":["/**\n * Amortization Table Component\n * Displays detailed payment schedule\n * Implements requirement 2.2\n */\n\nimport * as formatters from '../utils/formatters.js';\n\nclass AmortizationTable {\n  /**\n   * Create a new amortization table component\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement} [options.container] - Container element\n   * @param {Object} [options.formatters] - Custom formatters\n   * @param {number} [options.pageSize] - Number of items per page\n   */\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('amortization-table');\n    this.formatters = {\n      currency: formatters.formatCurrency,\n      percentage: formatters.formatPercentage,\n      number: formatters.formatNumber,\n      date: formatters.formatDate,\n      ...options.formatters,\n    };\n    this.pageSize = options.pageSize || 12;\n    this.currentPage = 1;\n    this.sortColumn = 'number';\n    this.sortDirection = 'asc';\n    this.filters = {};\n    this.currentData = [];\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    if (!this.container) {\n      console.error('Amortization table container not found');\n      return;\n    }\n\n    // Create filter controls\n    this.createFilterControls();\n  }\n\n  /**\n   * Create filter controls for the table\n   */\n  createFilterControls() {\n    const filterControls = document.createElement('div');\n    filterControls.className = 'filter-controls';\n    filterControls.innerHTML = `\n      <div class=\"filter-row\">\n        <div class=\"filter-group\">\n          <label for=\"year-filter\">Filter by Year:</label>\n          <select id=\"year-filter\">\n            <option value=\"\">All Years</option>\n          </select>\n        </div>\n        <div class=\"filter-group\">\n          <label for=\"payment-range\">Payment Range:</label>\n          <input type=\"number\" id=\"min-payment\" placeholder=\"Min\" min=\"0\" step=\"100\">\n          <span>to</span>\n          <input type=\"number\" id=\"max-payment\" placeholder=\"Max\" min=\"0\" step=\"100\">\n        </div>\n        <button id=\"apply-filters\" class=\"btn-filter\">Apply Filters</button>\n        <button id=\"reset-filters\" class=\"btn-filter\">Reset</button>\n      </div>\n    `;\n\n    // Add event listeners for filter controls\n    const applyButton = filterControls.querySelector('#apply-filters');\n    const resetButton = filterControls.querySelector('#reset-filters');\n\n    if (applyButton) {\n      applyButton.addEventListener('click', () => this.applyFilters());\n    }\n\n    if (resetButton) {\n      resetButton.addEventListener('click', () => this.resetFilters());\n    }\n\n    // Store filter controls for later use\n    this.filterControls = filterControls;\n  }\n\n  /**\n   * Apply filters to the table data\n   */\n  applyFilters() {\n    if (!this.filterControls) return;\n\n    const yearFilter = this.filterControls.querySelector('#year-filter').value;\n    const minPayment = parseFloat(this.filterControls.querySelector('#min-payment').value) || 0;\n    const maxPayment = parseFloat(this.filterControls.querySelector('#max-payment').value) || Infinity;\n\n    this.filters = {};\n\n    if (yearFilter) {\n      this.filters.year = parseInt(yearFilter);\n    }\n\n    if (minPayment > 0 || maxPayment < Infinity) {\n      this.filters.paymentRange = { min: minPayment, max: maxPayment };\n    }\n\n    // Re-render with current data and new filters\n    if (this.currentData.length > 0) {\n      this.render({ payments: this.currentData });\n    }\n  }\n\n  /**\n   * Reset all filters\n   */\n  resetFilters() {\n    if (!this.filterControls) return;\n\n    // Reset filter form\n    this.filterControls.querySelector('#year-filter').value = '';\n    this.filterControls.querySelector('#min-payment').value = '';\n    this.filterControls.querySelector('#max-payment').value = '';\n\n    // Clear filters object\n    this.filters = {};\n\n    // Re-render with current data\n    if (this.currentData.length > 0) {\n      this.render({ payments: this.currentData });\n    }\n  }\n\n  /**\n   * Update year filter options based on available data\n   * @param {Array} payments - Payment data\n   */\n  updateYearFilterOptions(payments) {\n    if (!this.filterControls) return;\n\n    const yearFilter = this.filterControls.querySelector('#year-filter');\n    if (!yearFilter) return;\n\n    // Clear existing options except the first one\n    while (yearFilter.options.length > 1) {\n      yearFilter.remove(1);\n    }\n\n    // Get unique years from payments\n    const years = [...new Set(payments.map((payment) => payment.date.getFullYear()))].sort();\n\n    // Add year options\n    years.forEach((year) => {\n      const option = document.createElement('option');\n      option.value = year;\n      option.textContent = year;\n      yearFilter.appendChild(option);\n    });\n  }\n\n  /**\n   * Render the amortization schedule\n   * @param {Object} amortizationSchedule - Amortization schedule object\n   */\n  render(amortizationSchedule) {\n    if (!this.container || !amortizationSchedule) {\n      return;\n    }\n\n    // Store the full data set\n    this.currentData = amortizationSchedule.payments || [];\n\n    // Clear the container\n    this.container.innerHTML = '';\n\n    // Add filter controls\n    this.container.appendChild(this.filterControls);\n\n    // Update year filter options\n    this.updateYearFilterOptions(this.currentData);\n\n    // Create table container\n    const tableContainer = document.createElement('div');\n    tableContainer.className = 'table-container';\n\n    // Create table\n    const table = document.createElement('table');\n    table.className = 'table table-responsive';\n\n    // Create table header\n    const tableHeader = this.createTableHeader();\n    table.appendChild(tableHeader);\n\n    // Filter and sort data\n    const filteredData = this.filterData(this.currentData, this.filters);\n    const sortedData = this.sortData(filteredData, this.sortColumn, this.sortDirection);\n\n    // Paginate data\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    const endIndex = startIndex + this.pageSize;\n    const paginatedData = sortedData.slice(startIndex, endIndex);\n\n    // Create table body\n    const tableBody = this.createTableBody(paginatedData);\n    table.appendChild(tableBody);\n\n    // Add table to container\n    tableContainer.appendChild(table);\n    this.container.appendChild(tableContainer);\n\n    // Create pagination\n    this.createPagination(sortedData.length);\n\n    // Add highlighting for key information\n    this.highlightKeyInformation();\n  }\n\n  /**\n   * Create the table header\n   * @returns {HTMLTableSectionElement} Table header element\n   */\n  createTableHeader() {\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n\n    // Define columns\n    const columns = [\n      { id: 'number', label: '#', sortable: true },\n      { id: 'date', label: 'Date', sortable: true },\n      { id: 'amount', label: 'Payment', sortable: true },\n      { id: 'principal', label: 'Principal', sortable: true },\n      { id: 'interest', label: 'Interest', sortable: true },\n      { id: 'balance', label: 'Remaining Balance', sortable: true },\n    ];\n\n    // Create header cells\n    columns.forEach((column) => {\n      const th = document.createElement('th');\n      th.textContent = column.label;\n\n      if (column.sortable) {\n        th.className = 'sortable';\n\n        // Add sort indicator if this is the current sort column\n        if (column.id === this.sortColumn) {\n          th.classList.add(this.sortDirection === 'asc' ? 'sorted-asc' : 'sorted-desc');\n        }\n\n        // Add click event for sorting\n        th.addEventListener('click', () => {\n          // Toggle direction if already sorting by this column\n          if (this.sortColumn === column.id) {\n            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n          } else {\n            this.sortColumn = column.id;\n            this.sortDirection = 'asc';\n          }\n\n          // Re-render with new sort\n          this.render({ payments: this.currentData });\n        });\n      }\n\n      headerRow.appendChild(th);\n    });\n\n    thead.appendChild(headerRow);\n    return thead;\n  }\n\n  /**\n   * Create the table body\n   * @param {Array} payments - Payment data\n   * @returns {HTMLTableSectionElement} Table body element\n   */\n  createTableBody(payments) {\n    const tbody = document.createElement('tbody');\n\n    if (!payments || payments.length === 0) {\n      const emptyRow = document.createElement('tr');\n      const emptyCell = document.createElement('td');\n      emptyCell.colSpan = 6;\n      emptyCell.textContent = 'No payment data available';\n      emptyCell.className = 'empty-table-message';\n      emptyRow.appendChild(emptyCell);\n      tbody.appendChild(emptyRow);\n      return tbody;\n    }\n\n    // Create rows for each payment\n    payments.forEach((payment) => {\n      const row = document.createElement('tr');\n\n      // Add data cells\n      const cells = [\n        { value: payment.number },\n        { value: this.formatters.date(payment.date) },\n        { value: this.formatters.currency(payment.amount), raw: payment.amount },\n        { value: this.formatters.currency(payment.principal), raw: payment.principal },\n        { value: this.formatters.currency(payment.interest), raw: payment.interest },\n        { value: this.formatters.currency(payment.balance), raw: payment.balance },\n      ];\n\n      cells.forEach((cell, index) => {\n        const td = document.createElement('td');\n        td.textContent = cell.value;\n\n        // Add data attributes for sorting and filtering\n        if (cell.raw !== undefined) {\n          td.setAttribute('data-value', cell.raw);\n        }\n\n        // Add class for the column type\n        const columnTypes = ['number', 'date', 'amount', 'principal', 'interest', 'balance'];\n        td.classList.add(`col-${columnTypes[index]}`);\n\n        row.appendChild(td);\n      });\n\n      // Add data attributes to the row for filtering\n      row.setAttribute('data-payment-number', payment.number);\n      row.setAttribute('data-payment-year', payment.date.getFullYear());\n      row.setAttribute('data-payment-month', payment.date.getMonth() + 1);\n\n      tbody.appendChild(row);\n    });\n\n    return tbody;\n  }\n\n  /**\n   * Create pagination controls\n   * @param {number} totalItems - Total number of items\n   */\n  createPagination(totalItems) {\n    if (!this.container) return;\n\n    // Calculate total pages\n    const totalPages = Math.ceil(totalItems / this.pageSize);\n\n    // Don't show pagination if only one page\n    if (totalPages <= 1) {\n      return;\n    }\n\n    // Create pagination container\n    const pagination = document.createElement('div');\n    pagination.className = 'pagination';\n\n    // Previous button\n    const prevButton = document.createElement('div');\n    prevButton.className = 'pagination-item';\n    prevButton.textContent = '«';\n    prevButton.addEventListener('click', () => {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.render({ payments: this.currentData });\n      }\n    });\n    pagination.appendChild(prevButton);\n\n    // Page numbers\n    const maxVisiblePages = 5;\n    let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));\n    const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n\n    // Adjust start page if we're near the end\n    if (endPage - startPage + 1 < maxVisiblePages) {\n      startPage = Math.max(1, endPage - maxVisiblePages + 1);\n    }\n\n    // First page button if not visible\n    if (startPage > 1) {\n      const firstPageButton = document.createElement('div');\n      firstPageButton.className = 'pagination-item';\n      firstPageButton.textContent = '1';\n      firstPageButton.addEventListener('click', () => {\n        this.currentPage = 1;\n        this.render({ payments: this.currentData });\n      });\n      pagination.appendChild(firstPageButton);\n\n      // Ellipsis if needed\n      if (startPage > 2) {\n        const ellipsis = document.createElement('div');\n        ellipsis.className = 'pagination-ellipsis';\n        ellipsis.textContent = '...';\n        pagination.appendChild(ellipsis);\n      }\n    }\n\n    // Page buttons\n    for (let i = startPage; i <= endPage; i++) {\n      const pageButton = document.createElement('div');\n      pageButton.className = 'pagination-item';\n      if (i === this.currentPage) {\n        pageButton.classList.add('active');\n      }\n      pageButton.textContent = i;\n      pageButton.addEventListener('click', () => {\n        this.currentPage = i;\n        this.render({ payments: this.currentData });\n      });\n      pagination.appendChild(pageButton);\n    }\n\n    // Last page button if not visible\n    if (endPage < totalPages) {\n      // Ellipsis if needed\n      if (endPage < totalPages - 1) {\n        const ellipsis = document.createElement('div');\n        ellipsis.className = 'pagination-ellipsis';\n        ellipsis.textContent = '...';\n        pagination.appendChild(ellipsis);\n      }\n\n      const lastPageButton = document.createElement('div');\n      lastPageButton.className = 'pagination-item';\n      lastPageButton.textContent = totalPages;\n      lastPageButton.addEventListener('click', () => {\n        this.currentPage = totalPages;\n        this.render({ payments: this.currentData });\n      });\n      pagination.appendChild(lastPageButton);\n    }\n\n    // Next button\n    const nextButton = document.createElement('div');\n    nextButton.className = 'pagination-item';\n    nextButton.textContent = '»';\n    nextButton.addEventListener('click', () => {\n      if (this.currentPage < totalPages) {\n        this.currentPage++;\n        this.render({ payments: this.currentData });\n      }\n    });\n    pagination.appendChild(nextButton);\n\n    // Add pagination to container\n    this.container.appendChild(pagination);\n  }\n\n  /**\n   * Sort data by column\n   * @param {Array} data - Data to sort\n   * @param {string} column - Column to sort by\n   * @param {string} direction - Sort direction ('asc' or 'desc')\n   * @returns {Array} Sorted data\n   */\n  sortData(data, column, direction) {\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return [];\n    }\n\n    const sortedData = [...data];\n\n    sortedData.sort((a, b) => {\n      let valueA; let\n        valueB;\n\n      // Get values based on column\n      switch (column) {\n        case 'date':\n          valueA = a.date.getTime();\n          valueB = b.date.getTime();\n          break;\n        case 'number':\n        case 'amount':\n        case 'principal':\n        case 'interest':\n        case 'balance':\n          valueA = a[column];\n          valueB = b[column];\n          break;\n        default:\n          valueA = a.number;\n          valueB = b.number;\n      }\n\n      // Compare values\n      if (valueA < valueB) {\n        return direction === 'asc' ? -1 : 1;\n      }\n      if (valueA > valueB) {\n        return direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n\n    return sortedData;\n  }\n\n  /**\n   * Filter data based on criteria\n   * @param {Array} data - Data to filter\n   * @param {Object} filters - Filter criteria\n   * @returns {Array} Filtered data\n   */\n  filterData(data, filters) {\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return [];\n    }\n\n    if (!filters || Object.keys(filters).length === 0) {\n      return data;\n    }\n\n    return data.filter((payment) => {\n      // Filter by year\n      if (filters.year && payment.date.getFullYear() !== filters.year) {\n        return false;\n      }\n\n      // Filter by payment range\n      if (filters.paymentRange) {\n        const { min, max } = filters.paymentRange;\n        if (payment.amount < min || payment.amount > max) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  /**\n   * Highlight key information in the table\n   */\n  highlightKeyInformation() {\n    if (!this.container) return;\n\n    // Highlight rows with significant principal reduction\n    const rows = this.container.querySelectorAll('tbody tr');\n    rows.forEach((row) => {\n      const principalCell = row.querySelector('.col-principal');\n      const interestCell = row.querySelector('.col-interest');\n\n      if (principalCell && interestCell) {\n        const principal = parseFloat(principalCell.getAttribute('data-value') || 0);\n        const interest = parseFloat(interestCell.getAttribute('data-value') || 0);\n\n        // If principal is significantly higher than interest\n        if (principal > interest * 2) {\n          row.classList.add('highlight-principal');\n          principalCell.setAttribute('title', 'Significant principal reduction');\n        }\n\n        // If interest is higher than principal\n        if (interest > principal) {\n          row.classList.add('highlight-interest');\n          interestCell.setAttribute('title', 'Interest exceeds principal');\n        }\n      }\n    });\n\n    // Highlight milestone payments (e.g., every 12th payment)\n    rows.forEach((row) => {\n      const numberCell = row.querySelector('.col-number');\n      if (numberCell) {\n        const paymentNumber = parseInt(numberCell.textContent);\n        if (paymentNumber % 12 === 0) {\n          row.classList.add('highlight-milestone');\n          row.setAttribute('title', 'Annual milestone payment');\n        }\n      }\n    });\n  }\n\n  /**\n   * Update the table with new amortization schedule\n   * @param {Object} amortizationSchedule - Amortization schedule object\n   */\n  updateTable(amortizationSchedule) {\n    // Reset to first page when updating data\n    this.currentPage = 1;\n\n    // Reset filters\n    this.filters = {};\n\n    // Render with new data\n    this.render(amortizationSchedule);\n  }\n\n  /**\n   * Clear the table\n   */\n  clear() {\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n\n    // Reset pagination\n    this.currentPage = 1;\n\n    // Clear current data\n    this.currentData = [];\n  }\n}\n\nexport default AmortizationTable;\n"],"names":["constructor","options","this","container","document","getElementById","formatters","currency","percentage","number","date","pageSize","currentPage","sortColumn","sortDirection","filters","currentData","init","createFilterControls","filterControls","createElement","className","innerHTML","applyButton","querySelector","resetButton","addEventListener","applyFilters","resetFilters","yearFilter","value","minPayment","parseFloat","maxPayment","Infinity","year","parseInt","paymentRange","min","max","length","render","payments","updateYearFilterOptions","remove","Set","map","payment","getFullYear","sort","forEach","option","textContent","appendChild","amortizationSchedule","tableContainer","table","tableHeader","createTableHeader","filteredData","filterData","sortedData","sortData","startIndex","endIndex","paginatedData","slice","tableBody","createTableBody","createPagination","highlightKeyInformation","thead","headerRow","id","label","sortable","column","th","classList","add","tbody","emptyRow","emptyCell","colSpan","row","amount","raw","principal","interest","balance","cell","index","td","undefined","setAttribute","getMonth","totalItems","totalPages","Math","ceil","pagination","prevButton","startPage","floor","maxVisiblePages","endPage","firstPageButton","ellipsis","i","pageButton","lastPageButton","nextButton","data","direction","Array","isArray","a","b","valueA","valueB","getTime","Object","keys","filter","rows","querySelectorAll","principalCell","interestCell","getAttribute","numberCell","updateTable","clear"],"sourceRoot":""}