{"version":3,"file":"js/main-30c3a00b.99b7d4e13640680d5932.js","mappings":"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","sources":["webpack://loan-calculator/./src/js/components/market-rates.js","webpack://loan-calculator/./src/js/components/calculator-form.js","webpack://loan-calculator/./src/js/models/loan.model.js","webpack://loan-calculator/./src/js/components/guidance-manager.js","webpack://loan-calculator/./src/js/components/results-display.js","webpack://loan-calculator/./src/js/models/amortization.model.js","webpack://loan-calculator/./src/js/components/charts.js","webpack://loan-calculator/./src/js/components/financial-glossary.js","webpack://loan-calculator/./src/js/components/settings-panel.js","webpack://loan-calculator/./src/js/components/saved-calculations-manager.js"],"sourcesContent":["/**\n * Market Rates Component\n * Displays average market rates for different loan types\n * Implements requirement 5.3\n */\n\nimport { getTranslation } from '../utils/translations.js';\nimport { LOAN_TYPES } from '../models/loan.model.js';\nimport * as formatters from '../utils/formatters.js';\n\nclass MarketRates {\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('market-rates-container');\n    this.language = options.language || 'en';\n    this.currentLoanType = options.loanType || 'mortgage';\n    this.currentRate = options.currentRate || 0;\n    this.onRateSelect = options.onRateSelect || (() => {});\n\n    // Market rates data - in a real application, this would come from an API\n    this.marketRatesData = {\n      mortgage: {\n        average: 6.75,\n        min: 5.85,\n        max: 7.65,\n        trend: 'stable',\n        lastUpdated: new Date('2025-07-15'),\n      },\n      auto: {\n        average: 7.25,\n        min: 6.50,\n        max: 9.75,\n        trend: 'up',\n        lastUpdated: new Date('2025-07-16'),\n      },\n      personal: {\n        average: 11.50,\n        min: 8.75,\n        max: 17.99,\n        trend: 'up',\n        lastUpdated: new Date('2025-07-16'),\n      },\n      student: {\n        average: 5.50,\n        min: 4.99,\n        max: 7.25,\n        trend: 'down',\n        lastUpdated: new Date('2025-07-14'),\n      },\n    };\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    this.render();\n    this.bindEvents();\n  }\n\n  /**\n   * Render the market rates component\n   */\n  render() {\n    if (!this.container) return;\n\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    // Get market rates for current loan type\n    const ratesData = this.marketRatesData[this.currentLoanType] || this.marketRatesData.mortgage;\n\n    // Format date based on locale\n    const locale = formatters.getLocaleFromLanguage(this.language);\n    const formattedDate = ratesData.lastUpdated.toLocaleDateString(locale, {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n\n    // Get trend icon\n    const trendIcon = this.getTrendIcon(ratesData.trend);\n\n    // Create market rates HTML\n    const marketRatesHtml = `\n      <div class=\"market-rates\">\n        <div class=\"market-rates-header\">\n          <h3>${t('marketRates.title')}</h3>\n          <div class=\"market-rates-disclaimer\">${t('marketRates.disclaimer')}</div>\n        </div>\n        \n        <div class=\"market-rates-content\">\n          <div class=\"market-rates-summary\">\n            <div class=\"market-rates-average\">\n              <span class=\"market-rates-label\">${t('marketRates.averageRate')}</span>\n              <span class=\"market-rates-value\">${ratesData.average.toFixed(2)}%</span>\n              <span class=\"market-rates-trend ${ratesData.trend}\">${trendIcon}</span>\n            </div>\n            <div class=\"market-rates-range\">\n              <span class=\"market-rates-label\">${t('marketRates.rateRange')}</span>\n              <span class=\"market-rates-value\">${ratesData.min.toFixed(2)}% - ${ratesData.max.toFixed(2)}%</span>\n            </div>\n          </div>\n          \n          <div class=\"market-rates-comparison\">\n            <div class=\"market-rates-your-rate\">\n              <span class=\"market-rates-label\">${t('marketRates.yourRate')}</span>\n              <span class=\"market-rates-value ${this.getRateComparisonClass(this.currentRate, ratesData.average)}\">\n                ${this.currentRate.toFixed(2)}%\n              </span>\n            </div>\n            <div class=\"market-rates-difference\">\n              <span class=\"market-rates-label\">${t('marketRates.difference')}</span>\n              <span class=\"market-rates-value ${this.getRateComparisonClass(this.currentRate, ratesData.average)}\">\n                ${this.formatRateDifference(this.currentRate, ratesData.average)}\n              </span>\n            </div>\n          </div>\n          \n          <div class=\"market-rates-actions\">\n            <button id=\"use-average-rate\" class=\"market-rates-button\">\n              ${t('marketRates.useAverageRate')}\n            </button>\n          </div>\n          \n          <div class=\"market-rates-footer\">\n            <span class=\"market-rates-updated\">${t('marketRates.lastUpdated')}: ${formattedDate}</span>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.container.innerHTML = marketRatesHtml;\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    if (!this.container) return;\n\n    // Use average rate button\n    const useAverageRateButton = this.container.querySelector('#use-average-rate');\n    if (useAverageRateButton) {\n      useAverageRateButton.addEventListener('click', () => {\n        const ratesData = this.marketRatesData[this.currentLoanType] || this.marketRatesData.mortgage;\n        this.onRateSelect(ratesData.average);\n      });\n    }\n  }\n\n  /**\n   * Get trend icon based on trend direction\n   * @param {string} trend - Trend direction (up, down, stable)\n   * @returns {string} HTML for trend icon\n   */\n  getTrendIcon(trend) {\n    switch (trend) {\n      case 'up':\n        return '<span class=\"trend-icon trend-up\" aria-hidden=\"true\">↑</span>';\n      case 'down':\n        return '<span class=\"trend-icon trend-down\" aria-hidden=\"true\">↓</span>';\n      default:\n        return '<span class=\"trend-icon trend-stable\" aria-hidden=\"true\">→</span>';\n    }\n  }\n\n  /**\n   * Get CSS class for rate comparison\n   * @param {number} currentRate - Current rate\n   * @param {number} averageRate - Average market rate\n   * @returns {string} CSS class\n   */\n  getRateComparisonClass(currentRate, averageRate) {\n    const difference = currentRate - averageRate;\n\n    if (Math.abs(difference) <= 0.25) {\n      return 'rate-average';\n    } if (difference < 0) {\n      return 'rate-below';\n    }\n    return 'rate-above';\n  }\n\n  /**\n   * Format rate difference\n   * @param {number} currentRate - Current rate\n   * @param {number} averageRate - Average market rate\n   * @returns {string} Formatted rate difference\n   */\n  formatRateDifference(currentRate, averageRate) {\n    const difference = currentRate - averageRate;\n    const t = (key) => getTranslation(key, this.language);\n\n    if (Math.abs(difference) <= 0.1) {\n      return t('marketRates.sameAsAverage');\n    } if (difference < 0) {\n      return `${Math.abs(difference).toFixed(2)}% ${t('marketRates.belowAverage')}`;\n    }\n    return `${difference.toFixed(2)}% ${t('marketRates.aboveAverage')}`;\n  }\n\n  /**\n   * Update current loan type and re-render\n   * @param {string} loanType - Loan type\n   */\n  updateLoanType(loanType) {\n    if (LOAN_TYPES[loanType] && this.currentLoanType !== loanType) {\n      this.currentLoanType = loanType;\n      this.render();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * Update current interest rate and re-render\n   * @param {number} rate - Interest rate\n   */\n  updateCurrentRate(rate) {\n    if (this.currentRate !== rate) {\n      this.currentRate = rate;\n      this.render();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * Update language and re-render component\n   * @param {string} language - Language code\n   */\n  updateLanguage(language) {\n    if (this.language !== language) {\n      this.language = language;\n      this.render();\n      this.bindEvents();\n    }\n  }\n}\n\nexport default MarketRates;\n","/**\n * Calculator Form Component\n * Handles user input for loan calculations\n * Implements requirements 1.1, 1.2, 2.1, 2.6\n */\n\nimport Loan, { LOAN_TYPES, PAYMENT_FREQUENCIES } from '../models/loan.model.js';\nimport * as validators from '../utils/validators.js';\nimport * as formatters from '../utils/formatters.js';\nimport { getTranslation } from '../utils/translations.js';\nimport { initTooltips } from '../utils/tooltips.js';\nimport MarketRates from './market-rates.js';\nimport loadingManager from '../utils/loading-manager.js';\nimport animationManager from '../utils/animation-manager.js';\n\nclass CalculatorForm {\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('calculator-form-container');\n    this.onCalculate = options.onCalculate || (() => {});\n    this.validators = {\n      principal: validators.isPositiveNumber,\n      interestRate: validators.isValidInterestRate,\n      term: validators.isValidLoanTerm,\n      downPayment: validators.isNumber,\n      additionalPayment: validators.isNumber,\n      inflationRate: validators.isValidInflationRate,\n      ...options.validators,\n    };\n\n    // Language settings\n    this.language = options.language || 'en';\n    this.locale = formatters.getLocaleFromLanguage(this.language);\n\n    // Initialize with default loan\n    this.formData = Loan.createDefault('mortgage').toJSON();\n\n    // Set default inflation rate if not present\n    if (this.formData.inflationRate === undefined) {\n      this.formData.inflationRate = 2.5;\n    }\n\n    // Market rates component\n    this.marketRatesComponent = null;\n\n    this.init();\n  }\n\n  init() {\n    this.render();\n    this.bindEvents();\n\n    // Initialize market rates component\n    this.initMarketRates();\n\n    // Trigger initial calculation\n    this.handleCalculate();\n  }\n\n  /**\n   * Initialize market rates component\n   */\n  initMarketRates() {\n    const marketRatesContainer = this.container.querySelector('#market-rates-container');\n    if (!marketRatesContainer) return;\n\n    this.marketRatesComponent = new MarketRates({\n      container: marketRatesContainer,\n      language: this.language,\n      loanType: this.formData.type,\n      currentRate: this.formData.interestRate,\n      onRateSelect: (rate) => {\n        // Update interest rate input and slider\n        const interestRateInput = this.container.querySelector('#interestRate');\n        const interestRateSlider = this.container.querySelector('#interestRate-slider');\n\n        if (interestRateInput && interestRateSlider) {\n          interestRateInput.value = rate;\n          interestRateSlider.value = rate;\n\n          // Trigger calculation update\n          this.handleCalculate();\n        }\n      },\n    });\n  }\n\n  render() {\n    if (!this.container) return;\n\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    const formHtml = `\n      <div class=\"calculator-form\">\n        <h2>${t('form.title')}</h2>\n        <form id=\"loan-calculator-form\">\n          <!-- Loan Type Selector -->\n          <div class=\"form-group\">\n            <div class=\"form-input-wrapper\">\n              <select id=\"loan-type\" class=\"form-select\" name=\"type\">\n                ${Object.entries(LOAN_TYPES).map(([key, value]) => {\n    const translationKey = `form.${key}`;\n    const description = t(translationKey) !== translationKey ? t(translationKey) : value.description;\n    return `<option value=\"${key}\" ${this.formData.type === key ? 'selected' : ''}>${description}</option>`;\n  }).join('')}\n              </select>\n              <label for=\"loan-type\" class=\"form-label floating\">\n                ${t('form.loanType')}\n                <span class=\"info-icon\" data-tooltip=\"${t('tooltips.loanType')}\" data-tooltip-position=\"top\">?</span>\n              </label>\n            </div>\n          </div>\n          \n          <!-- Loan Amount -->\n          <div class=\"form-group\">\n            <div class=\"form-input-wrapper\">\n              <input \n                type=\"number\" \n                id=\"principal\" \n                class=\"form-input\" \n                name=\"principal\" \n                value=\"${this.formData.principal}\" \n                min=\"${LOAN_TYPES[this.formData.type].minAmount}\" \n                max=\"${LOAN_TYPES[this.formData.type].maxAmount}\" \n                step=\"1000\"\n                placeholder=\" \"\n              >\n              <label for=\"principal\" class=\"form-label\">\n                ${t('form.loanAmount')} (${this.formData.currency || 'USD'})\n              </label>\n            </div>\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"principal-slider\" \n                class=\"form-slider\" \n                min=\"${LOAN_TYPES[this.formData.type].minAmount}\" \n                max=\"${LOAN_TYPES[this.formData.type].maxAmount}\" \n                step=\"1000\" \n                value=\"${this.formData.principal}\"\n              >\n              <div class=\"range-values\">\n                <span>${formatters.formatCurrency(LOAN_TYPES[this.formData.type].minAmount, this.formData.currency || 'USD', this.locale)}</span>\n                <span>${formatters.formatCurrency(LOAN_TYPES[this.formData.type].maxAmount, this.formData.currency || 'USD', this.locale)}</span>\n              </div>\n            </div>\n            <div class=\"invalid-feedback\" id=\"principal-error\"></div>\n          </div>\n          \n          <!-- Down Payment -->\n          <div class=\"form-group\">\n            <div class=\"form-input-wrapper\">\n              <input \n                type=\"number\" \n                id=\"downPayment\" \n                class=\"form-input\" \n                name=\"downPayment\" \n                value=\"${this.formData.downPayment}\" \n                min=\"0\" \n                max=\"${this.formData.principal}\" \n                step=\"1000\"\n                placeholder=\" \"\n              >\n              <label for=\"downPayment\" class=\"form-label\">${t('form.downPayment')} (${this.formData.currency || 'USD'})</label>\n            </div>\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"downPayment-slider\" \n                class=\"form-slider\" \n                min=\"0\" \n                max=\"${this.formData.principal}\" \n                step=\"1000\" \n                value=\"${this.formData.downPayment}\"\n              >\n              <div class=\"range-values\">\n                <span>${formatters.formatCurrency(0, this.formData.currency || 'USD', this.locale)}</span>\n                <span>${formatters.formatCurrency(this.formData.principal, this.formData.currency || 'USD', this.locale)}</span>\n              </div>\n            </div>\n            <div class=\"invalid-feedback\" id=\"downPayment-error\"></div>\n          </div>\n          \n          <!-- Interest Rate -->\n          <div class=\"form-group\">\n            <div class=\"form-input-wrapper\">\n              <input \n                type=\"number\" \n                id=\"interestRate\" \n                class=\"form-input\" \n                name=\"interestRate\" \n                value=\"${this.formData.interestRate}\" \n                min=\"0\" \n                max=\"30\" \n                step=\"0.125\"\n                placeholder=\" \"\n              >\n              <label for=\"interestRate\" class=\"form-label\">${t('form.interestRate')} (%)</label>\n            </div>\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"interestRate-slider\" \n                class=\"form-slider\" \n                min=\"0\" \n                max=\"30\" \n                step=\"0.125\" \n                value=\"${this.formData.interestRate}\"\n              >\n              <div class=\"range-values\">\n                <span>0%</span>\n                <span>30%</span>\n              </div>\n            </div>\n            <div class=\"invalid-feedback\" id=\"interestRate-error\"></div>\n          </div>\n          \n          <!-- Market Rates -->\n          <div id=\"market-rates-container\" class=\"market-rates-container\"></div>\n          \n          <!-- Loan Term -->\n          <div class=\"form-group\">\n            <div class=\"form-input-wrapper\">\n              <input \n                type=\"number\" \n                id=\"term\" \n                class=\"form-input\" \n                name=\"term\" \n                value=\"${this.formData.term}\" \n                min=\"1\" \n                max=\"600\" \n                step=\"1\"\n                placeholder=\" \"\n              >\n              <label for=\"term\" class=\"form-label\">${t('form.loanTerm')} (${t('form.months')})</label>\n            </div>\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"term-slider\" \n                class=\"form-slider\" \n                min=\"1\" \n                max=\"600\" \n                step=\"1\" \n                value=\"${this.formData.term}\"\n              >\n              <div class=\"range-values\">\n                <span>1 ${t('form.months')}</span>\n                <span>600 ${t('form.months')}</span>\n              </div>\n            </div>\n            <div class=\"term-presets\">\n              <button type=\"button\" class=\"term-preset outline small\" data-term=\"60\">5 ${t('form.years')}</button>\n              <button type=\"button\" class=\"term-preset outline small\" data-term=\"180\">15 ${t('form.years')}</button>\n              <button type=\"button\" class=\"term-preset outline small\" data-term=\"360\">30 ${t('form.years')}</button>\n            </div>\n            <div class=\"invalid-feedback\" id=\"term-error\"></div>\n          </div>\n          \n          <!-- Payment Frequency -->\n          <div class=\"form-group\">\n            <div class=\"form-input-wrapper\">\n              <select id=\"paymentFrequency\" class=\"form-select\" name=\"paymentFrequency\">\n                ${Object.entries(PAYMENT_FREQUENCIES).map(([key, value]) => {\n    const translationKey = `form.${key}`;\n    const description = t(translationKey) !== translationKey ? t(translationKey) : value.description;\n    return `<option value=\"${key}\" ${this.formData.paymentFrequency === key ? 'selected' : ''}>${description}</option>`;\n  }).join('')}\n              </select>\n              <label for=\"paymentFrequency\" class=\"form-label floating\">${t('form.paymentFrequency')}</label>\n            </div>\n          </div>\n          \n          <!-- Start Date -->\n          <div class=\"form-group\">\n            <div class=\"form-input-wrapper\">\n              <input \n                type=\"date\" \n                id=\"startDate\" \n                class=\"form-input\" \n                name=\"startDate\" \n                value=\"${new Date(this.formData.startDate).toISOString().split('T')[0]}\"\n                placeholder=\" \"\n              >\n              <label for=\"startDate\" class=\"form-label\">${t('form.startDate')}</label>\n            </div>\n            <div class=\"invalid-feedback\" id=\"startDate-error\"></div>\n          </div>\n          \n          <!-- Additional Payment -->\n          <div class=\"form-group\">\n            <div class=\"form-input-wrapper\">\n              <input \n                type=\"number\" \n                id=\"additionalPayment\" \n                class=\"form-input\" \n                name=\"additionalPayment\" \n                value=\"${this.formData.additionalPayment}\" \n                min=\"0\" \n                step=\"10\"\n                placeholder=\" \"\n              >\n              <label for=\"additionalPayment\" class=\"form-label\">${t('form.additionalPayment')} (${this.formData.currency || 'USD'})</label>\n            </div>\n            <div class=\"invalid-feedback\" id=\"additionalPayment-error\"></div>\n          </div>\n          \n          <!-- Inflation Rate -->\n          <div class=\"form-group\">\n            <div class=\"form-input-wrapper\">\n              <input \n                type=\"number\" \n                id=\"inflationRate\" \n                class=\"form-input\" \n                name=\"inflationRate\" \n                value=\"${this.formData.inflationRate || 2.5}\" \n                min=\"0\" \n                max=\"20\" \n                step=\"0.1\"\n                placeholder=\" \"\n              >\n              <label for=\"inflationRate\" class=\"form-label\">\n                ${t('form.inflationRate') || 'Inflation Rate'} (%)\n                <span class=\"info-icon\" data-tooltip=\"${t('tooltips.inflationRate') || 'Annual inflation rate used to calculate the real value of future payments.'}\" data-tooltip-position=\"top\">?</span>\n              </label>\n            </div>\n            <div class=\"range-container\">\n              <input \n                type=\"range\" \n                id=\"inflationRate-slider\" \n                class=\"form-slider\" \n                min=\"0\" \n                max=\"20\" \n                step=\"0.1\" \n                value=\"${this.formData.inflationRate || 2.5}\"\n              >\n              <div class=\"range-values\">\n                <span>0%</span>\n                <span>20%</span>\n              </div>\n            </div>\n            <div class=\"invalid-feedback\" id=\"inflationRate-error\"></div>\n          </div>\n          \n          <!-- Calculate Button -->\n          <div class=\"form-group\">\n            <div class=\"form-buttons\">\n              <button type=\"submit\" class=\"form-button\" id=\"calculate-button\">${t('form.calculate')}</button>\n              <button type=\"button\" class=\"form-button secondary\" id=\"reset-button\">${t('form.reset')}</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    `;\n\n    this.container.innerHTML = formHtml;\n  }\n\n  bindEvents() {\n    if (!this.container) return;\n\n    // Get form element\n    const form = this.container.querySelector('#loan-calculator-form');\n    if (!form) return;\n\n    // Form submission\n    form.addEventListener('submit', (e) => {\n      e.preventDefault();\n      this.handleCalculate();\n    });\n\n    // Add ripple effect to calculate button\n    const calculateButton = this.container.querySelector('#calculate-button');\n    if (calculateButton) {\n      calculateButton.addEventListener('click', (e) => {\n        animationManager.createRippleEffect(calculateButton, e);\n      });\n    }\n\n    // Reset button\n    const resetButton = this.container.querySelector('#reset-button');\n    if (resetButton) {\n      resetButton.addEventListener('click', () => this.reset());\n    }\n\n    // Loan type change\n    const loanTypeSelect = this.container.querySelector('#loan-type');\n    if (loanTypeSelect) {\n      loanTypeSelect.addEventListener('change', (e) => {\n        const loanType = e.target.value;\n        this.updateLoanTypeParameters(loanType);\n      });\n    }\n\n    // Sync sliders with input fields\n    this.bindSliderInputSync('principal');\n    this.bindSliderInputSync('downPayment');\n    this.bindSliderInputSync('interestRate');\n    this.bindSliderInputSync('term');\n    this.bindSliderInputSync('inflationRate');\n\n    // Term presets\n    const termPresets = this.container.querySelectorAll('.term-preset');\n    termPresets.forEach((preset) => {\n      preset.addEventListener('click', (e) => {\n        const term = parseInt(e.target.dataset.term, 10);\n        const termInput = this.container.querySelector('#term');\n        const termSlider = this.container.querySelector('#term-slider');\n\n        if (termInput && termSlider) {\n          termInput.value = term;\n          termSlider.value = term;\n\n          // Trigger validation and real-time update\n          this.validateField('term', term);\n          this.handleCalculate();\n        }\n      });\n    });\n\n    // Real-time validation for all inputs\n    const inputs = form.querySelectorAll('input, select');\n    inputs.forEach((input) => {\n      input.addEventListener('input', (e) => {\n        const field = e.target.name || e.target.id;\n        const { value } = e.target;\n\n        this.validateField(field, value);\n\n        // Update down payment max when principal changes\n        if (field === 'principal') {\n          const downPaymentInput = this.container.querySelector('#downPayment');\n          const downPaymentSlider = this.container.querySelector('#downPayment-slider');\n\n          if (downPaymentInput && downPaymentSlider) {\n            const principal = parseFloat(value);\n            downPaymentInput.max = principal;\n            downPaymentSlider.max = principal;\n\n            // Ensure down payment is not greater than principal\n            if (parseFloat(downPaymentInput.value) > principal) {\n              downPaymentInput.value = principal;\n              downPaymentSlider.value = principal;\n\n              // Trigger input event to update formData\n              const inputEvent = new Event('input');\n              downPaymentInput.dispatchEvent(inputEvent);\n            }\n          }\n        }\n\n        // Real-time calculation updates\n        this.handleCalculate();\n      });\n    });\n\n    // Initialize tooltips\n    initTooltips(this.container);\n\n    // Initialize floating labels\n    this.initFloatingLabels();\n  }\n\n  /**\n   * Bind slider and input field to sync with each other\n   * @param {string} fieldName - Name of the field\n   */\n  bindSliderInputSync(fieldName) {\n    const input = this.container.querySelector(`#${fieldName}`);\n    const slider = this.container.querySelector(`#${fieldName}-slider`);\n\n    if (input && slider) {\n      // Update input when slider changes\n      slider.addEventListener('input', (e) => {\n        input.value = e.target.value;\n        this.validateField(fieldName, e.target.value);\n      });\n\n      // Update slider when input changes\n      input.addEventListener('input', (e) => {\n        slider.value = e.target.value;\n      });\n    }\n  }\n\n  /**\n   * Update form parameters based on loan type\n   * @param {string} loanType - Type of loan\n   */\n  updateLoanTypeParameters(loanType) {\n    if (!LOAN_TYPES[loanType]) return;\n\n    const typeDefaults = LOAN_TYPES[loanType];\n\n    // Update principal min/max\n    const principalInput = this.container.querySelector('#principal');\n    const principalSlider = this.container.querySelector('#principal-slider');\n\n    if (principalInput && principalSlider) {\n      principalInput.min = typeDefaults.minAmount;\n      principalInput.max = typeDefaults.maxAmount;\n      principalSlider.min = typeDefaults.minAmount;\n      principalSlider.max = typeDefaults.maxAmount;\n\n      // Update range display\n      const rangeValues = principalSlider.parentElement.querySelector('.range-values');\n      if (rangeValues) {\n        rangeValues.innerHTML = `\n          <span>${formatters.formatCurrency(typeDefaults.minAmount, this.formData.currency || 'USD', this.locale)}</span>\n          <span>${formatters.formatCurrency(typeDefaults.maxAmount, this.formData.currency || 'USD', this.locale)}</span>\n        `;\n      }\n\n      // Adjust value if outside new range\n      const currentValue = parseFloat(principalInput.value);\n      if (currentValue < typeDefaults.minAmount) {\n        principalInput.value = typeDefaults.minAmount;\n        principalSlider.value = typeDefaults.minAmount;\n      } else if (currentValue > typeDefaults.maxAmount) {\n        principalInput.value = typeDefaults.maxAmount;\n        principalSlider.value = typeDefaults.maxAmount;\n      }\n    }\n\n    // Update term default\n    const termInput = this.container.querySelector('#term');\n    const termSlider = this.container.querySelector('#term-slider');\n\n    if (termInput && termSlider) {\n      termInput.value = typeDefaults.defaultTerm;\n      termSlider.value = typeDefaults.defaultTerm;\n    }\n\n    // Update interest rate default\n    const interestRateInput = this.container.querySelector('#interestRate');\n    const interestRateSlider = this.container.querySelector('#interestRate-slider');\n\n    if (interestRateInput && interestRateSlider) {\n      interestRateInput.value = typeDefaults.defaultRate;\n      interestRateSlider.value = typeDefaults.defaultRate;\n    }\n\n    // Update market rates component with new loan type\n    if (this.marketRatesComponent) {\n      this.marketRatesComponent.updateLoanType(loanType);\n      this.marketRatesComponent.updateCurrentRate(typeDefaults.defaultRate);\n    }\n\n    // Trigger calculation with new defaults\n    this.handleCalculate();\n  }\n\n  /**\n   * Validate a single field\n   * @param {string} field - Field name\n   * @param {any} value - Field value\n   * @returns {boolean} True if valid\n   */\n  validateField(field, value) {\n    const validator = this.validators[field];\n    if (!validator) return true;\n\n    let isValid = true;\n    let errorMessage = '';\n\n    try {\n      isValid = validator(value);\n\n      if (!isValid) {\n        // Get appropriate error message based on field and value\n        errorMessage = this.getFieldErrorMessage(field, value);\n      }\n    } catch (error) {\n      isValid = false;\n      errorMessage = `Validation error: ${error.message}`;\n    }\n\n    // Update UI\n    const input = this.container.querySelector(`#${field}`);\n    const errorElement = this.container.querySelector(`#${field}-error`);\n\n    if (input && errorElement) {\n      if (isValid) {\n        input.classList.remove('is-invalid');\n        errorElement.textContent = '';\n      } else {\n        input.classList.add('is-invalid');\n        errorElement.textContent = errorMessage;\n      }\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Get appropriate error message for a field\n   * @param {string} field - Field name\n   * @param {any} value - Field value\n   * @returns {string} Error message\n   */\n  getFieldErrorMessage(field, value) {\n    const input = this.container.querySelector(`#${field}`);\n    const min = input ? parseFloat(input.min) : null;\n    const max = input ? parseFloat(input.max) : null;\n    const numValue = parseFloat(value);\n\n    switch (field) {\n      case 'principal':\n        if (isNaN(numValue) || numValue <= 0) {\n          return 'Please enter a valid loan amount greater than $0';\n        }\n        if (min !== null && numValue < min) {\n          return `Loan amount must be at least $${min.toLocaleString()}`;\n        }\n        if (max !== null && numValue > max) {\n          return `Loan amount cannot exceed $${max.toLocaleString()}`;\n        }\n        return 'Please enter a valid loan amount';\n\n      case 'interestRate':\n        if (isNaN(numValue) || numValue < 0) {\n          return 'Interest rate must be 0% or higher';\n        }\n        if (numValue > 50) {\n          return 'Interest rate seems unusually high. Please verify.';\n        }\n        return 'Please enter a valid interest rate';\n\n      case 'term':\n        if (isNaN(numValue) || numValue <= 0) {\n          return 'Loan term must be greater than 0 months';\n        }\n        if (numValue > 600) {\n          return 'Loan term cannot exceed 600 months (50 years)';\n        }\n        return 'Please enter a valid loan term';\n\n      case 'downPayment':\n        if (isNaN(numValue) || numValue < 0) {\n          return 'Down payment cannot be negative';\n        }\n        if (max !== null && numValue > max) {\n          return 'Down payment cannot exceed the loan amount';\n        }\n        return 'Please enter a valid down payment';\n\n      case 'additionalPayment':\n        if (isNaN(numValue) || numValue < 0) {\n          return 'Additional payment cannot be negative';\n        }\n        return 'Please enter a valid additional payment amount';\n\n      case 'inflationRate':\n        if (isNaN(numValue) || numValue < 0) {\n          return 'Inflation rate cannot be negative';\n        }\n        if (numValue > 20) {\n          return 'Inflation rate seems unusually high. Please verify.';\n        }\n        return 'Please enter a valid inflation rate';\n\n      default:\n        return 'Please enter a valid value';\n    }\n  }\n\n  /**\n   * Validate all form fields\n   * @returns {boolean} True if all fields are valid\n   */\n  validate() {\n    let isValid = true;\n    const form = this.container.querySelector('#loan-calculator-form');\n\n    if (!form) return false;\n\n    // Validate each field\n    const inputs = form.querySelectorAll('input, select');\n    inputs.forEach((input) => {\n      const field = input.name || input.id;\n      const { value } = input;\n\n      if (this.validators[field]) {\n        const fieldValid = this.validateField(field, value);\n        isValid = isValid && fieldValid;\n      }\n    });\n\n    return isValid;\n  }\n\n  /**\n   * Handle form calculation\n   */\n  async handleCalculate() {\n    const formData = this.getFormData();\n\n    // Validate form data before calculation\n    if (!this.validate()) {\n      this.showFormError('Please correct the errors in the form before calculating.');\n      return;\n    }\n\n    // Show enhanced loading with progress steps\n    const calculationSteps = [\n      { id: 'validate', label: 'Validating Input', status: 'completed' },\n      { id: 'calculate', label: 'Calculating Loan', status: 'active' },\n      { id: 'amortization', label: 'Building Schedule', status: 'pending' },\n      { id: 'render', label: 'Rendering Results', status: 'pending' },\n    ];\n\n    loadingManager.showProgressOverlay(calculationSteps, {\n      title: 'Calculating Your Loan',\n      message: 'Please wait while we process your loan calculation...',\n      cancellable: false,\n    });\n\n    // Add enhanced loading state to calculate button\n    const calculateButton = this.container.querySelector('#calculate-button');\n    if (calculateButton) {\n      calculateButton.disabled = true;\n      calculateButton.classList.add('loading');\n      calculateButton.setAttribute('data-original-text', calculateButton.textContent);\n      calculateButton.innerHTML = `\n        <div class=\"loading-spinner-dots\" style=\"display: inline-flex; margin-right: 0.5rem;\">\n          <div class=\"loading-dot\" style=\"width: 6px; height: 6px; margin: 0 2px;\"></div>\n          <div class=\"loading-dot\" style=\"width: 6px; height: 6px; margin: 0 2px;\"></div>\n          <div class=\"loading-dot\" style=\"width: 6px; height: 6px; margin: 0 2px;\"></div>\n        </div>\n        Calculating...\n      `;\n    }\n\n    // Create loan object from form data\n    try {\n      // Update progress\n      loadingManager.updateProgress(25, 'Creating loan object...', 'calculate');\n\n      const loan = Loan.fromJSON(formData);\n\n      // Update market rates component with current interest rate\n      if (this.marketRatesComponent) {\n        this.marketRatesComponent.updateCurrentRate(formData.interestRate);\n      }\n\n      // Update progress\n      loadingManager.updateProgress(50, 'Processing calculation...', 'calculate');\n      loadingManager.updateStepStatus('calculate', 'completed');\n      loadingManager.updateStepStatus('amortization', 'active');\n\n      // Add small delay to show progress animation\n      await new Promise((resolve) => setTimeout(resolve, 300));\n\n      // Update progress\n      loadingManager.updateProgress(75, 'Building amortization schedule...', 'amortization');\n\n      // Call the calculation callback\n      if (typeof this.onCalculate === 'function') {\n        await this.onCalculate(loan);\n      }\n\n      // Complete the process\n      loadingManager.updateProgress(100, 'Finalizing results...', 'render');\n      loadingManager.updateStepStatus('amortization', 'completed');\n      loadingManager.updateStepStatus('render', 'active');\n\n      // Small delay before hiding\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      loadingManager.updateStepStatus('render', 'completed');\n    } catch (error) {\n      console.error('Error calculating loan:', error);\n\n      // Update progress to show error\n      loadingManager.updateStepStatus('calculate', 'error');\n      loadingManager.updateProgress(0, 'Calculation failed', 'calculate');\n\n      // Hide loading after a moment\n      setTimeout(() => {\n        loadingManager.hideProgressOverlay();\n      }, 1500);\n\n      this.showFormError(`Calculation error: ${error.message || 'Unknown error occurred'}`);\n    } finally {\n      // Remove loading state from calculate button\n      if (calculateButton) {\n        calculateButton.disabled = false;\n        calculateButton.classList.remove('loading');\n        const originalText = calculateButton.getAttribute('data-original-text') || 'Calculate';\n        calculateButton.textContent = originalText;\n      }\n\n      // Hide progress overlay after a short delay\n      setTimeout(() => {\n        loadingManager.hideProgressOverlay();\n      }, 800);\n    }\n  }\n\n  /**\n   * Show form error message\n   * @param {string} message - Error message to display\n   */\n  showFormError(message) {\n    // Remove any existing error messages\n    const existingError = this.container.querySelector('.form-error-message');\n    if (existingError) {\n      existingError.remove();\n    }\n\n    // Create error message element\n    const errorContainer = document.createElement('div');\n    errorContainer.className = 'form-error-message';\n    errorContainer.innerHTML = `\n      <div class=\"error-content\">\n        <span class=\"error-icon\">⚠️</span>\n        <span class=\"error-text\">${message}</span>\n        <button class=\"error-close\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\n      </div>\n    `;\n\n    // Insert at the top of the form\n    const form = this.container.querySelector('#loan-calculator-form');\n    if (form) {\n      form.insertBefore(errorContainer, form.firstChild);\n\n      // Auto-remove error message after 8 seconds\n      setTimeout(() => {\n        if (errorContainer.parentNode) {\n          errorContainer.remove();\n        }\n      }, 8000);\n    }\n  }\n\n  /**\n   * Get form data from inputs\n   * @returns {Object} Form data\n   */\n  getFormData() {\n    const form = this.container.querySelector('#loan-calculator-form');\n    if (!form) return this.formData;\n\n    const formData = {\n      ...this.formData,\n    };\n\n    // Get values from form inputs\n    const inputs = form.querySelectorAll('input, select');\n    inputs.forEach((input) => {\n      const field = input.name || input.id;\n      let { value } = input;\n\n      // Convert numeric values\n      if (input.type === 'number' || input.type === 'range') {\n        value = parseFloat(value);\n      }\n\n      // Convert date values\n      if (input.type === 'date') {\n        value = new Date(value);\n      }\n\n      formData[field] = value;\n    });\n\n    this.formData = formData;\n    return formData;\n  }\n\n  /**\n   * Set form data and update UI\n   * @param {Object} data - Form data\n   */\n  setFormData(data) {\n    this.formData = {\n      ...this.formData,\n      ...data,\n    };\n\n    // Update form inputs\n    const form = this.container.querySelector('#loan-calculator-form');\n    if (!form) return;\n\n    Object.entries(data).forEach(([field, value]) => {\n      const input = form.querySelector(`#${field}`);\n      const slider = form.querySelector(`#${field}-slider`);\n\n      if (input) {\n        // Handle date fields\n        if (input.type === 'date' && value instanceof Date) {\n          const [dateString] = value.toISOString().split('T');\n          input.value = dateString;\n        } else {\n          input.value = value;\n        }\n      }\n\n      // Update sliders\n      if (slider) {\n        slider.value = value;\n      }\n    });\n\n    // Validate and calculate\n    this.validate();\n    this.handleCalculate();\n  }\n\n  /**\n   * Reset form to defaults\n   */\n  reset() {\n    const loanType = this.formData.type || 'mortgage';\n    const defaultLoan = Loan.createDefault(loanType);\n\n    // Preserve inflation rate setting\n    const inflationRate = this.formData.inflationRate || 2.5;\n\n    this.setFormData({\n      ...defaultLoan.toJSON(),\n      inflationRate,\n    });\n  }\n\n  /**\n   * Update language and re-render component\n   * @param {string} language - Language code\n   */\n  updateLanguage(language) {\n    if (this.language !== language) {\n      this.language = language;\n      this.locale = formatters.getLocaleFromLanguage(language);\n      this.render();\n      this.bindEvents();\n\n      // Re-initialize market rates with new language\n      this.initMarketRates();\n\n      // Update market rates component language if it exists\n      if (this.marketRatesComponent) {\n        this.marketRatesComponent.updateLanguage(language);\n      }\n    }\n  }\n\n  /**\n   * Update currency format\n   * @param {string} currency - Currency code\n   */\n  updateCurrencyFormat(currency) {\n    if (this.formData.currency !== currency) {\n      this.formData.currency = currency;\n      this.render();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * Initialize floating label behavior\n   */\n  initFloatingLabels() {\n    if (!this.container) return;\n\n    const inputs = this.container.querySelectorAll('.form-input, .form-select');\n\n    inputs.forEach((input) => {\n      const label = input.nextElementSibling;\n      if (!label || !label.classList.contains('form-label')) return;\n\n      // Check if input has value on load\n      this.updateFloatingLabel(input, label);\n\n      // Handle focus events\n      input.addEventListener('focus', () => {\n        label.classList.add('floating');\n      });\n\n      // Handle blur events\n      input.addEventListener('blur', () => {\n        this.updateFloatingLabel(input, label);\n      });\n\n      // Handle input events\n      input.addEventListener('input', () => {\n        this.updateFloatingLabel(input, label);\n      });\n    });\n  }\n\n  /**\n   * Update floating label state based on input value\n   * @param {HTMLElement} input - Input element\n   * @param {HTMLElement} label - Label element\n   */\n  updateFloatingLabel(input, label) {\n    const hasValue = input.value && input.value.trim() !== '';\n    const isSelect = input.tagName.toLowerCase() === 'select';\n    const isDate = input.type === 'date';\n\n    if (hasValue || isSelect || isDate) {\n      label.classList.add('floating');\n    } else {\n      label.classList.remove('floating');\n    }\n  }\n}\n\nexport default CalculatorForm;\n","/**\n * Loan Model\n * Represents a loan with its parameters and calculations\n * Implements requirements 1.1, 1.2, 1.3, 1.5, 1.6, 4.3, 5.5\n */\n\n/**\n * Valid loan types and their default parameters\n */\nexport const LOAN_TYPES = {\n  mortgage: {\n    defaultTerm: 360, // 30 years in months\n    defaultRate: 4.5, // 4.5%\n    minAmount: 10000,\n    maxAmount: 10000000,\n    description: 'Home Mortgage',\n  },\n  auto: {\n    defaultTerm: 60, // 5 years in months\n    defaultRate: 5.0, // 5.0%\n    minAmount: 1000,\n    maxAmount: 200000,\n    description: 'Auto Loan',\n  },\n  personal: {\n    defaultTerm: 36, // 3 years in months\n    defaultRate: 10.0, // 10.0%\n    minAmount: 1000,\n    maxAmount: 50000,\n    description: 'Personal Loan',\n  },\n  student: {\n    defaultTerm: 120, // 10 years in months\n    defaultRate: 5.5, // 5.5%\n    minAmount: 1000,\n    maxAmount: 500000,\n    description: 'Student Loan',\n  },\n};\n\n/**\n * Valid payment frequencies\n */\nexport const PAYMENT_FREQUENCIES = {\n  monthly: {\n    paymentsPerYear: 12,\n    description: 'Monthly',\n  },\n  'bi-weekly': {\n    paymentsPerYear: 26,\n    description: 'Bi-Weekly',\n  },\n  weekly: {\n    paymentsPerYear: 52,\n    description: 'Weekly',\n  },\n};\n\nclass Loan {\n  /**\n   * Create a new loan instance\n   * @param {Object} options - Loan parameters\n   * @param {string} [options.name] - Name for this loan calculation\n   * @param {string} [options.type] - Loan type (mortgage, auto, personal, student)\n   * @param {number} [options.principal] - Principal loan amount\n   * @param {number} [options.interestRate] - Annual interest rate (percentage)\n   * @param {number} [options.term] - Loan term in months\n   * @param {string} [options.paymentFrequency] - Payment frequency (monthly, bi-weekly, weekly)\n   * @param {number} [options.downPayment] - Down payment amount\n   * @param {number} [options.additionalPayment] - Additional payment per period\n   * @param {Date} [options.startDate] - Loan start date\n   */\n  constructor(options = {}) {\n    // If this is a deserialized object, preserve the original ID\n    this.id = options.id || this.generateUniqueId();\n\n    // Basic loan information\n    this.name = options.name || 'Unnamed Calculation';\n    this.type = this.validateLoanType(options.type || 'mortgage');\n\n    // Set default values based on loan type if not provided\n    const typeDefaults = LOAN_TYPES[this.type];\n\n    // Financial parameters\n    this.principal = this.validateNumber(options.principal, typeDefaults.minAmount, typeDefaults.minAmount, typeDefaults.maxAmount);\n    this.interestRate = this.validateNumber(options.interestRate, typeDefaults.defaultRate, 0, 30);\n    this.term = this.validateNumber(options.term, typeDefaults.defaultTerm, 1, 600); // Max 50 years\n    this.paymentFrequency = this.validatePaymentFrequency(options.paymentFrequency || 'monthly');\n    this.downPayment = this.validateNumber(options.downPayment, 0, 0, this.principal);\n    this.additionalPayment = this.validateNumber(options.additionalPayment, 0, 0);\n    this.inflationRate = this.validateNumber(options.inflationRate, 2.5, 0, 20); // Default 2.5% inflation\n\n    // Dates\n    this.startDate = options.startDate instanceof Date ? options.startDate : new Date();\n    this.createdAt = options.createdAt instanceof Date ? options.createdAt : new Date();\n    this.updatedAt = options.updatedAt instanceof Date ? options.updatedAt : new Date();\n\n    // Validate the entire loan object\n    // Validation warnings are stored in this.validate().warnings if needed\n    this.validate();\n  }\n\n  /**\n   * Calculate the total loan amount (principal minus down payment)\n   * @returns {number} Total loan amount\n   */\n  totalLoanAmount() {\n    return Math.max(0, this.principal - this.downPayment);\n  }\n\n  /**\n   * Calculate the total number of payments based on term and payment frequency\n   * @returns {number} Total number of payments\n   */\n  numberOfPayments() {\n    const { paymentsPerYear } = PAYMENT_FREQUENCIES[this.paymentFrequency];\n    return Math.ceil(this.term * paymentsPerYear / 12);\n  }\n\n  /**\n   * Calculate the periodic interest rate based on payment frequency\n   * @returns {number} Periodic interest rate as a decimal\n   */\n  periodicInterestRate() {\n    const { paymentsPerYear } = PAYMENT_FREQUENCIES[this.paymentFrequency];\n    return (this.interestRate / 100) / paymentsPerYear;\n  }\n\n  /**\n   * Calculate the periodic payment amount\n   * @returns {number} Payment amount per period\n   */\n  paymentAmount() {\n    const P = this.totalLoanAmount();\n    const r = this.periodicInterestRate();\n    const n = this.numberOfPayments();\n\n    // Handle edge cases\n    if (P <= 0) return 0;\n    if (r <= 0) return P / n;\n\n    // Standard loan payment formula: P * r * (1 + r)^n / ((1 + r)^n - 1)\n    const paymentAmount = P * r * (1 + r) ** n / ((1 + r) ** n - 1);\n    return paymentAmount;\n  }\n\n  /**\n   * Calculate the total interest paid over the life of the loan\n   * @returns {number} Total interest\n   */\n  totalInterest() {\n    return (this.paymentAmount() * this.numberOfPayments()) - this.totalLoanAmount();\n  }\n\n  /**\n   * Calculate the payoff date\n   * @returns {Date} Expected payoff date\n   */\n  payoffDate() {\n    const payoffDate = new Date(this.startDate);\n\n    switch (this.paymentFrequency) {\n      case 'monthly':\n        payoffDate.setMonth(payoffDate.getMonth() + this.term);\n        break;\n      case 'bi-weekly':\n        payoffDate.setDate(payoffDate.getDate() + Math.ceil(this.numberOfPayments() * 14));\n        break;\n      case 'weekly':\n        payoffDate.setDate(payoffDate.getDate() + Math.ceil(this.numberOfPayments() * 7));\n        break;\n      default:\n        payoffDate.setMonth(payoffDate.getMonth() + this.term);\n        break;\n    }\n\n    return payoffDate;\n  }\n\n  /**\n   * Generate a unique ID for this loan\n   * @returns {string} Unique ID\n   */\n  generateUniqueId() {\n    return `loan_${Date.now()}_${Math.floor(Math.random() * 1000000)}`;\n  }\n\n  /**\n   * Validate loan type\n   * @param {string} type - Loan type to validate\n   * @returns {string} Valid loan type\n   * @throws {Error} If loan type is invalid\n   */\n  validateLoanType(type) {\n    if (!LOAN_TYPES[type]) {\n      const validTypes = Object.keys(LOAN_TYPES).join(', ');\n      throw new Error(`Invalid loan type: ${type}. Valid types are: ${validTypes}`);\n    }\n    return type;\n  }\n\n  /**\n   * Validate payment frequency\n   * @param {string} frequency - Payment frequency to validate\n   * @returns {string} Valid payment frequency\n   * @throws {Error} If payment frequency is invalid\n   */\n  validatePaymentFrequency(frequency) {\n    if (!PAYMENT_FREQUENCIES[frequency]) {\n      const validFrequencies = Object.keys(PAYMENT_FREQUENCIES).join(', ');\n      throw new Error(`Invalid payment frequency: ${frequency}. Valid frequencies are: ${validFrequencies}`);\n    }\n    return frequency;\n  }\n\n  /**\n   * Validate a numeric value\n   * @param {number} value - Value to validate\n   * @param {number} defaultValue - Default value if invalid\n   * @param {number} [min] - Minimum allowed value\n   * @param {number} [max] - Maximum allowed value\n   * @returns {number} Validated number\n   */\n  validateNumber(value, defaultValue, min = null, max = null) {\n    // Convert to number if string\n    const num = typeof value === 'string' ? parseFloat(value) : value;\n\n    // Check if it's a valid number\n    if (isNaN(num) || typeof num !== 'number') {\n      return defaultValue;\n    }\n\n    // Apply min/max constraints\n    if (min !== null && num < min) return min;\n    if (max !== null && num > max) return max;\n\n    return num;\n  }\n\n  /**\n   * Validate the entire loan object\n   * @returns {Object} Validation result with isValid flag and warnings array\n   */\n  validate() {\n    const warnings = [];\n\n    // Check principal amount\n    if (this.principal <= 0) {\n      warnings.push('Principal amount must be greater than zero');\n    }\n\n    // Check interest rate\n    if (this.interestRate < 0) {\n      warnings.push('Interest rate cannot be negative');\n    } else if (this.interestRate > 20) {\n      warnings.push('Warning: Interest rate is unusually high');\n    }\n\n    // Check term\n    if (this.term <= 0) {\n      warnings.push('Loan term must be greater than zero');\n    }\n\n    // Check down payment\n    if (this.downPayment < 0) {\n      warnings.push('Down payment cannot be negative');\n    } else if (this.downPayment >= this.principal) {\n      warnings.push('Down payment cannot be greater than or equal to the principal');\n    }\n\n    // Check additional payment\n    if (this.additionalPayment < 0) {\n      warnings.push('Additional payment cannot be negative');\n    } else if (this.additionalPayment > this.paymentAmount() && this.paymentAmount() > 0) {\n      warnings.push('Additional payment is greater than the regular payment');\n    }\n\n    return {\n      isValid: warnings.length === 0,\n      warnings,\n    };\n  }\n\n  /**\n   * Update loan parameters\n   * @param {Object} updates - Parameters to update\n   * @returns {Loan} Updated loan instance\n   */\n  update(updates = {}) {\n    // Ensure we have a fresh timestamp that's definitely newer\n    const now = new Date();\n\n    // Create a new loan with merged parameters\n    const updatedLoan = new Loan({\n      ...this.toJSON(),\n      ...updates,\n      // Force the updatedAt to be a new Date instance\n      updatedAt: now,\n    });\n\n    // Copy the ID to maintain identity\n    updatedLoan.id = this.id;\n    updatedLoan.createdAt = this.createdAt;\n\n    // Ensure the updatedAt is definitely newer by adding a small delay if needed\n    if (updatedLoan.updatedAt <= this.updatedAt) {\n      updatedLoan.updatedAt = new Date(this.updatedAt.getTime() + 1);\n    }\n\n    return updatedLoan;\n  }\n\n  /**\n   * Convert loan to JSON for storage\n   * @returns {Object} JSON representation\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      type: this.type,\n      principal: this.principal,\n      interestRate: this.interestRate,\n      term: this.term,\n      paymentFrequency: this.paymentFrequency,\n      downPayment: this.downPayment,\n      additionalPayment: this.additionalPayment,\n      inflationRate: this.inflationRate,\n      startDate: this.startDate.toISOString(),\n      createdAt: this.createdAt.toISOString(),\n      updatedAt: this.updatedAt.toISOString(),\n    };\n  }\n\n  /**\n   * Calculate the impact of additional payments on the loan\n   * Implements requirement 1.5\n   * @param {number} additionalPayment - Additional payment amount per period\n   * @returns {Object} Impact of additional payments including time saved and interest saved\n   */\n  calculateAdditionalPaymentImpact(additionalPayment = this.additionalPayment) {\n    // Create a baseline loan with no additional payments\n    const baselineLoan = this.update({ additionalPayment: 0 });\n\n    // Create a loan with the specified additional payment\n    const enhancedLoan = this.update({ additionalPayment });\n\n    // Dynamically import AmortizationSchedule to avoid circular dependency\n    return import('./amortization.model').then(({ AmortizationSchedule }) => {\n      // Calculate amortization schedules for both loans\n      const baselineSchedule = new AmortizationSchedule(baselineLoan);\n      const enhancedSchedule = new AmortizationSchedule(enhancedLoan);\n\n      // Calculate time saved\n      const baselinePayments = baselineSchedule.payments.length;\n      const enhancedPayments = enhancedSchedule.payments.length;\n      const paymentsSaved = baselinePayments - enhancedPayments;\n\n      // Calculate interest saved\n      const baselineInterest = baselineSchedule.totalInterest();\n      const enhancedInterest = enhancedSchedule.totalInterest();\n      const interestSaved = baselineInterest - enhancedInterest;\n\n      // Calculate time saved in months/years\n      let timeSavedMonths = 0;\n      let timeSavedYears = 0;\n\n      switch (this.paymentFrequency) {\n        case 'monthly':\n          timeSavedMonths = paymentsSaved;\n          break;\n        case 'bi-weekly':\n          timeSavedMonths = Math.round(paymentsSaved * 12 / 26);\n          break;\n        case 'weekly':\n          timeSavedMonths = Math.round(paymentsSaved * 12 / 52);\n          break;\n        default:\n          timeSavedMonths = paymentsSaved;\n          break;\n      }\n\n      timeSavedYears = Math.floor(timeSavedMonths / 12);\n      timeSavedMonths %= 12;\n\n      // Calculate new payoff date\n      const newPayoffDate = enhancedSchedule.payoffDate();\n\n      return {\n        paymentsSaved,\n        interestSaved,\n        timeSavedMonths,\n        timeSavedYears,\n        newPayoffDate,\n        originalTerm: this.term,\n        newTerm: this.term - timeSavedMonths - (timeSavedYears * 12),\n        originalPayment: baselineLoan.paymentAmount(),\n        newPayment: enhancedLoan.paymentAmount() + additionalPayment,\n        originalTotalInterest: baselineInterest,\n        newTotalInterest: enhancedInterest,\n      };\n    });\n  }\n\n  /**\n   * Calculate refinance comparison between current loan and new options\n   * Implements requirement 5.5\n   * @param {Object} newLoanOptions - Options for the new loan\n   * @param {number} [newLoanOptions.principal] - New loan principal (defaults to current remaining balance)\n   * @param {number} newLoanOptions.interestRate - New interest rate\n   * @param {number} [newLoanOptions.term] - New loan term in months\n   * @param {string} [newLoanOptions.paymentFrequency] - New payment frequency\n   * @param {number} [newLoanOptions.closingCosts] - Closing costs for refinancing\n   * @param {number} [newLoanOptions.additionalPayment] - Additional payment for new loan\n   * @returns {Object} Refinance comparison results\n   */\n  calculateRefinance(newLoanOptions) {\n    if (!newLoanOptions.interestRate && newLoanOptions.interestRate !== 0) {\n      throw new Error('New interest rate is required for refinance calculation');\n    }\n\n    // Return a promise that resolves with the refinance calculation\n    return import('./amortization.model').then(({ AmortizationSchedule }) => {\n      // Create amortization schedule for current loan to get current balance\n      const currentSchedule = new AmortizationSchedule(this);\n      const currentBalance = currentSchedule.payments.length > 0\n        ? currentSchedule.payments[0].balance : this.totalLoanAmount();\n\n      // Set up new loan options with defaults\n      const refinanceOptions = {\n        principal: newLoanOptions.principal || currentBalance,\n        interestRate: newLoanOptions.interestRate,\n        term: newLoanOptions.term || this.term,\n        paymentFrequency: newLoanOptions.paymentFrequency || this.paymentFrequency,\n        additionalPayment: newLoanOptions.additionalPayment || 0,\n        startDate: new Date(),\n        name: 'Refinance Option',\n      };\n\n      // Create new loan\n      const newLoan = new Loan(refinanceOptions);\n      const newSchedule = new AmortizationSchedule(newLoan);\n\n      // Calculate remaining payments and interest on current loan\n      const remainingPayments = currentSchedule.payments.length;\n      const remainingInterest = currentSchedule.totalInterest();\n\n      // Calculate new payments and interest\n      const newPayments = newSchedule.payments.length;\n      const newInterest = newSchedule.totalInterest();\n\n      // Calculate monthly savings\n      const oldPayment = this.paymentAmount();\n      const newPayment = newLoan.paymentAmount();\n      const monthlySavings = oldPayment - newPayment;\n\n      // Calculate total cost comparison\n      const closingCosts = newLoanOptions.closingCosts || 0;\n      const currentTotalCost = remainingInterest + currentBalance;\n      const newTotalCost = newInterest + refinanceOptions.principal + closingCosts;\n      const lifetimeSavings = currentTotalCost - newTotalCost;\n\n      // Calculate break-even point in months\n      const breakEvenMonths = monthlySavings > 0\n        ? Math.ceil(closingCosts / monthlySavings) : Infinity;\n\n      return {\n        currentLoan: {\n          payment: oldPayment,\n          remainingBalance: currentBalance,\n          remainingPayments,\n          remainingInterest,\n          totalCost: currentTotalCost,\n        },\n        newLoan: {\n          payment: newPayment,\n          principal: refinanceOptions.principal,\n          term: refinanceOptions.term,\n          interestRate: refinanceOptions.interestRate,\n          totalPayments: newPayments,\n          totalInterest: newInterest,\n          totalCost: newTotalCost,\n        },\n        comparison: {\n          monthlySavings,\n          lifetimeSavings,\n          closingCosts,\n          breakEvenMonths,\n          isWorthwhile: lifetimeSavings > 0 && breakEvenMonths < newPayments,\n        },\n        refinanceLoan: newLoan,\n      };\n    });\n  }\n\n  /**\n   * Create a loan instance from JSON data\n   * @param {Object} json - JSON data\n   * @returns {Loan} New loan instance\n   */\n  static fromJSON(json) {\n    if (!json) return new Loan();\n\n    // Parse dates from ISO strings\n    const parsedJson = {\n      ...json,\n      startDate: json.startDate ? new Date(json.startDate) : new Date(),\n      createdAt: json.createdAt ? new Date(json.createdAt) : new Date(),\n      updatedAt: json.updatedAt ? new Date(json.updatedAt) : new Date(),\n    };\n\n    // Create a new loan with the parsed data\n    const loan = new Loan(parsedJson);\n\n    // Ensure the ID is preserved exactly as it was in the JSON\n    if (json.id) {\n      loan.id = json.id;\n    }\n\n    return loan;\n  }\n\n  /**\n   * Create a loan with default values for the specified loan type\n   * @param {string} type - Loan type\n   * @returns {Loan} New loan with default values\n   */\n  static createDefault(type = 'mortgage') {\n    if (!LOAN_TYPES[type]) {\n      throw new Error(`Invalid loan type: ${type}`);\n    }\n\n    const defaults = LOAN_TYPES[type];\n\n    return new Loan({\n      name: `New ${defaults.description}`,\n      type,\n      principal: defaults.minAmount * 2,\n      interestRate: defaults.defaultRate,\n      term: defaults.defaultTerm,\n      paymentFrequency: 'monthly',\n      downPayment: 0,\n      additionalPayment: 0,\n      startDate: new Date(),\n    });\n  }\n\n  /**\n   * Calculate the affordable loan amount based on a desired payment\n   * Implements requirement 1.6\n   * @param {Object} options - Calculation options\n   * @param {number} options.desiredPayment - Desired payment amount\n   * @param {number} [options.interestRate] - Interest rate (defaults to current loan rate)\n   * @param {number} [options.term] - Loan term in months (defaults to current loan term)\n   * @param {string} [options.paymentFrequency] - Payment frequency (defaults to current frequency)\n   * @param {number} [options.downPayment] - Down payment amount (defaults to current down payment)\n   * @returns {Object} Affordable loan details\n   */\n  static calculateAffordableLoan(options) {\n    if (!options.desiredPayment || options.desiredPayment <= 0) {\n      throw new Error('Desired payment must be greater than zero');\n    }\n\n    // Extract parameters with defaults\n    const { desiredPayment } = options;\n    const interestRate = options.interestRate || 4.5;\n    const term = options.term || 360;\n    const paymentFrequency = options.paymentFrequency || 'monthly';\n    const downPayment = options.downPayment || 0;\n\n    // Create a temporary loan to access the payment calculation methods\n    const tempLoan = new Loan({\n      principal: 100000, // Arbitrary starting value\n      interestRate,\n      term,\n      paymentFrequency,\n      downPayment: 0, // We'll handle down payment separately\n    });\n\n    // Get the periodic interest rate\n    const r = tempLoan.periodicInterestRate();\n    const n = tempLoan.numberOfPayments();\n\n    // Handle edge cases\n    let affordablePrincipal = 0;\n\n    if (r <= 0) {\n      // For zero interest, it's just payment * number of payments\n      affordablePrincipal = desiredPayment * n;\n    } else {\n      // Rearrange the standard loan formula to solve for principal:\n      // P = payment * ((1+r)^n - 1) / (r * (1+r)^n)\n      affordablePrincipal = desiredPayment * ((1 + r) ** n - 1) / (r * (1 + r) ** n);\n    }\n\n    // Add down payment to get total purchase price\n    const totalPurchasePrice = affordablePrincipal + downPayment;\n\n    // Create a loan with the calculated principal\n    const affordableLoan = new Loan({\n      principal: totalPurchasePrice,\n      interestRate,\n      term,\n      paymentFrequency,\n      downPayment,\n      name: 'Affordable Loan',\n    });\n\n    return {\n      affordablePrincipal,\n      totalPurchasePrice,\n      downPayment,\n      monthlyPayment: affordableLoan.paymentAmount(),\n      totalInterest: affordableLoan.totalInterest(),\n      loan: affordableLoan,\n    };\n  }\n}\n\nexport default Loan;\n\n// Note: AmortizationSchedule is imported dynamically in methods that need it\n// to avoid circular dependency issues\n","/**\n * Guidance Manager Component\n * Provides tooltips and guidance for the loan calculator\n * Implements requirement 5.2\n */\n\nimport { getTranslation } from '../utils/translations.js';\nimport { initTooltips, createGuidancePanel, createTutorial } from '../utils/tooltips.js';\n\nclass GuidanceManager {\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('guidance-container');\n    this.language = options.language || 'en';\n    this.calculatorForm = options.calculatorForm;\n    this.resultsDisplay = options.resultsDisplay;\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    this.render();\n    this.bindEvents();\n\n    // Initialize tooltips throughout the application\n    this.initializeTooltips();\n  }\n\n  /**\n   * Render the guidance manager component\n   */\n  render() {\n    if (!this.container) return;\n\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    const guidanceHtml = `\n      <div class=\"guidance-manager\">\n        <button id=\"show-tutorial\" class=\"guidance-button\" data-tooltip=\"${t('tooltips.startTutorial')}\" data-tooltip-position=\"bottom\">\n          <span class=\"guidance-icon\">🔍</span>\n          <span class=\"guidance-text\">${t('guidance.tutorial')}</span>\n        </button>\n        <button id=\"show-guidance\" class=\"guidance-button\" data-tooltip=\"${t('tooltips.showGuidance')}\" data-tooltip-position=\"bottom\">\n          <span class=\"guidance-icon\">💡</span>\n          <span class=\"guidance-text\">${t('guidance.help')}</span>\n        </button>\n      </div>\n    `;\n\n    this.container.innerHTML = guidanceHtml;\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    if (!this.container) return;\n\n    // Tutorial button\n    const tutorialButton = this.container.querySelector('#show-tutorial');\n    if (tutorialButton) {\n      tutorialButton.addEventListener('click', () => this.startTutorial());\n    }\n\n    // Guidance button\n    const guidanceButton = this.container.querySelector('#show-guidance');\n    if (guidanceButton) {\n      guidanceButton.addEventListener('click', () => this.showGuidance());\n    }\n\n    // Initialize tooltips on the guidance buttons\n    initTooltips(this.container);\n  }\n\n  /**\n   * Initialize tooltips throughout the application\n   */\n  initializeTooltips() {\n    // Initialize tooltips on all elements with data-tooltip attribute\n    initTooltips(document);\n\n    // Add tooltips to form fields if calculator form exists\n    if (this.calculatorForm && this.calculatorForm.container) {\n      this.addFormTooltips();\n    }\n\n    // Add tooltips to results if results display exists\n    if (this.resultsDisplay && this.resultsDisplay.container) {\n      this.addResultsTooltips();\n    }\n  }\n\n  /**\n   * Add tooltips to form fields\n   */\n  addFormTooltips() {\n    const t = (key) => getTranslation(key, this.language);\n    const formContainer = this.calculatorForm.container;\n\n    // Add tooltips to form labels\n    const addTooltipToField = (fieldId, tooltipKey, position = 'top') => {\n      const label = formContainer.querySelector(`label[for=\"${fieldId}\"]`);\n      if (label) {\n        // Check if info icon already exists\n        if (!label.querySelector('.info-icon')) {\n          const infoIcon = document.createElement('span');\n          infoIcon.className = 'info-icon';\n          infoIcon.textContent = '?';\n          infoIcon.setAttribute('data-tooltip', t(tooltipKey));\n          infoIcon.setAttribute('data-tooltip-position', position);\n          label.appendChild(infoIcon);\n        }\n      }\n    };\n\n    // Add tooltips to all form fields\n    addTooltipToField('loan-type', 'tooltips.loanType');\n    addTooltipToField('principal', 'tooltips.loanAmount');\n    addTooltipToField('interestRate', 'tooltips.interestRate');\n    addTooltipToField('term', 'tooltips.loanTerm');\n    addTooltipToField('downPayment', 'tooltips.downPayment');\n    addTooltipToField('additionalPayment', 'tooltips.additionalPayment');\n    addTooltipToField('paymentFrequency', 'tooltips.paymentFrequency');\n    addTooltipToField('startDate', 'tooltips.startDate');\n\n    // Initialize tooltips\n    initTooltips(formContainer);\n  }\n\n  /**\n   * Add tooltips to results\n   */\n  addResultsTooltips() {\n    const t = (key) => getTranslation(key, this.language);\n    const resultsContainer = this.resultsDisplay.container;\n\n    // Add tooltips to result items\n    const addTooltipToResult = (selector, tooltipKey, position = 'top') => {\n      const element = resultsContainer.querySelector(selector);\n      if (element) {\n        // Check if info icon already exists\n        if (!element.querySelector('.info-icon')) {\n          const infoIcon = document.createElement('span');\n          infoIcon.className = 'info-icon';\n          infoIcon.textContent = '?';\n          infoIcon.setAttribute('data-tooltip', t(tooltipKey));\n          infoIcon.setAttribute('data-tooltip-position', position);\n          element.appendChild(infoIcon);\n        }\n      }\n    };\n\n    // Add tooltips to all result items\n    addTooltipToResult('.monthly-payment-label', 'tooltips.monthlyPayment');\n    addTooltipToResult('.total-payment-label', 'tooltips.totalPayment');\n    addTooltipToResult('.total-interest-label', 'tooltips.totalInterest');\n    addTooltipToResult('.payoff-date-label', 'tooltips.payoffDate');\n    addTooltipToResult('.interest-savings-label', 'tooltips.interestSavings');\n\n    // Initialize tooltips\n    initTooltips(resultsContainer);\n  }\n\n  /**\n   * Start interactive tutorial\n   */\n  startTutorial() {\n    const t = (key) => getTranslation(key, this.language);\n\n    // Define tutorial steps\n    const tutorialSteps = [\n      {\n        selector: '#loan-type',\n        title: t('tutorial.loanTypeTitle'),\n        content: t('tutorial.loanTypeContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '#principal',\n        title: t('tutorial.loanAmountTitle'),\n        content: t('tutorial.loanAmountContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '#interestRate',\n        title: t('tutorial.interestRateTitle'),\n        content: t('tutorial.interestRateContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '#term',\n        title: t('tutorial.loanTermTitle'),\n        content: t('tutorial.loanTermContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '.term-presets',\n        title: t('tutorial.termPresetsTitle'),\n        content: t('tutorial.termPresetsContent'),\n        position: 'top',\n      },\n      {\n        selector: '#additionalPayment',\n        title: t('tutorial.additionalPaymentTitle'),\n        content: t('tutorial.additionalPaymentContent'),\n        position: 'top',\n      },\n      {\n        selector: '#calculate-button',\n        title: t('tutorial.calculateTitle'),\n        content: t('tutorial.calculateContent'),\n        position: 'top',\n      },\n      {\n        selector: '.results-summary',\n        title: t('tutorial.resultsTitle'),\n        content: t('tutorial.resultsContent'),\n        position: 'bottom',\n      },\n      {\n        selector: '#amortization-table-container',\n        title: t('tutorial.amortizationTitle'),\n        content: t('tutorial.amortizationContent'),\n        position: 'top',\n      },\n      {\n        selector: '#charts-container',\n        title: t('tutorial.chartsTitle'),\n        content: t('tutorial.chartsContent'),\n        position: 'top',\n      },\n    ];\n\n    // Start tutorial\n    createTutorial(tutorialSteps, () => {\n      // Show completion message\n      this.showGuidancePanel(\n        t('tutorial.completedTitle'),\n        t('tutorial.completedContent'),\n        'tutorial-completed',\n      );\n    });\n  }\n\n  /**\n   * Show guidance panel\n   */\n  showGuidance() {\n    const t = (key) => getTranslation(key, this.language);\n\n    // Create guidance content\n    const guidanceContent = `\n      <div class=\"guidance-sections\">\n        <div class=\"guidance-section\">\n          <h4>${t('guidance.interpretingResultsTitle')}</h4>\n          <p>${t('guidance.interpretingResultsContent')}</p>\n        </div>\n        \n        <div class=\"guidance-section\">\n          <h4>${t('guidance.affordabilityTitle')}</h4>\n          <p>${t('guidance.affordabilityContent')}</p>\n          <ul>\n            <li>${t('guidance.affordabilityTip1')}</li>\n            <li>${t('guidance.affordabilityTip2')}</li>\n            <li>${t('guidance.affordabilityTip3')}</li>\n          </ul>\n        </div>\n        \n        <div class=\"guidance-section\">\n          <h4>${t('guidance.additionalPaymentsTitle')}</h4>\n          <p>${t('guidance.additionalPaymentsContent')}</p>\n        </div>\n        \n        <div class=\"guidance-section\">\n          <h4>${t('guidance.refinanceTitle')}</h4>\n          <p>${t('guidance.refinanceContent')}</p>\n          <ul>\n            <li>${t('guidance.refinanceTip1')}</li>\n            <li>${t('guidance.refinanceTip2')}</li>\n            <li>${t('guidance.refinanceTip3')}</li>\n          </ul>\n        </div>\n      </div>\n    `;\n\n    // Show guidance panel\n    this.showGuidancePanel(\n      t('guidance.title'),\n      guidanceContent,\n      'loan-guidance',\n    );\n  }\n\n  /**\n   * Show guidance panel with custom content\n   * @param {string} title - Panel title\n   * @param {string} content - Panel content\n   * @param {string} id - Panel ID\n   */\n  showGuidancePanel(title, content, id) {\n    // Find or create guidance panel container\n    let panelContainer = document.getElementById('guidance-panels-container');\n\n    if (!panelContainer) {\n      panelContainer = document.createElement('div');\n      panelContainer.id = 'guidance-panels-container';\n      document.body.appendChild(panelContainer);\n    }\n\n    // Create guidance panel\n    createGuidancePanel(panelContainer, title, content, id);\n  }\n\n  /**\n   * Update language and re-render component\n   * @param {string} language - Language code\n   */\n  updateLanguage(language) {\n    if (this.language !== language) {\n      this.language = language;\n      this.render();\n      this.bindEvents();\n      this.initializeTooltips();\n    }\n  }\n}\n\nexport default GuidanceManager;\n","/**\n * Results Display Component\n * Displays loan calculation results\n * Implements requirements 2.1, 2.3\n */\n\nimport * as formatters from '../utils/formatters.js';\nimport Charts from './charts.js';\nimport loadingManager from '../utils/loading-manager.js';\nimport animationManager from '../utils/animation-manager.js';\n\nclass ResultsDisplay {\n  /**\n   * Create a new results display component\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement} [options.container] - Container element\n   * @param {Object} [options.formatters] - Custom formatters\n   */\n  constructor(options = {}) {\n    // Handle both container and containerId options\n    this.container = options.container\n                    || (options.containerId ? document.getElementById(options.containerId) : null)\n                    || document.getElementById('results-display');\n\n    this.formatters = {\n      currency: formatters.formatCurrency,\n      percentage: formatters.formatPercentage,\n      number: formatters.formatNumber,\n      date: formatters.formatDate,\n      duration: formatters.formatDuration,\n      ...options.formatters,\n    };\n\n    // Store onSave callback if provided\n    this.onSave = options.onSave || null;\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    if (!this.container) {\n      console.error('Results display container not found');\n      return;\n    }\n\n    // Create initial structure\n    this.container.innerHTML = `\n      <div class=\"results-display\">\n        <div class=\"results-header\">\n          <h2>Loan Summary</h2>\n          <div class=\"results-actions\">\n            <button class=\"btn-save\" id=\"save-calculation\">Save</button>\n            <button class=\"btn-export\" id=\"export-calculation\">Export</button>\n          </div>\n        </div>\n        <div class=\"results-content\">\n          <div class=\"results-summary\" id=\"results-summary\"></div>\n          <div class=\"results-breakdown\" id=\"results-breakdown\"></div>\n          <div class=\"results-charts\" id=\"charts-container\"></div>\n        </div>\n      </div>\n    `;\n\n    // Initialize charts component\n    this.charts = new Charts({\n      container: this.container.querySelector('#charts-container'),\n    });\n\n    // Initialize event listeners\n    this._initEventListeners();\n  }\n\n  /**\n   * Initialize event listeners\n   * @private\n   */\n  _initEventListeners() {\n    const saveButton = this.container.querySelector('#save-calculation');\n    const exportButton = this.container.querySelector('#export-calculation');\n\n    if (saveButton) {\n      saveButton.addEventListener('click', () => {\n        // Use the onSave callback if provided\n        if (typeof this.onSave === 'function' && this._currentLoan && this._currentAmortizationSchedule) {\n          this.onSave(this._currentLoan, this._currentAmortizationSchedule);\n        } else {\n          console.log('Save calculation clicked, but no onSave handler or loan data available');\n        }\n      });\n    }\n\n    if (exportButton) {\n      exportButton.addEventListener('click', () => {\n        // This will be implemented in a future task\n        console.log('Export calculation clicked');\n      });\n    }\n  }\n\n  /**\n   * Render calculation results\n   * @param {Object} calculationResults - Calculation results object\n   * @param {Loan} calculationResults.loan - Loan object\n   * @param {AmortizationSchedule} [calculationResults.amortizationSchedule] - Amortization schedule\n   * @param {Object} [calculationResults.inflationAdjusted] - Inflation-adjusted payment data\n   * @param {Array} [calculationResults.comparisonScenarios] - Array of comparison scenarios\n   */\n  render(calculationResults) {\n    if (!this.container || !calculationResults || !calculationResults.loan) {\n      return;\n    }\n\n    // Hide any skeleton loading\n    this.hideLoading();\n\n    const {\n      loan, amortizationSchedule, inflationAdjusted, comparisonScenarios,\n    } = calculationResults;\n\n    // Store current loan and amortization schedule for save functionality\n    this._currentLoan = loan;\n    this._currentAmortizationSchedule = amortizationSchedule;\n\n    // Prepare summary data\n    const summary = {\n      loanAmount: loan.totalLoanAmount,\n      paymentAmount: loan.paymentAmount,\n      totalInterest: amortizationSchedule ? amortizationSchedule.totalInterest : loan.totalInterest,\n      totalPayment: amortizationSchedule ? amortizationSchedule.totalPayment : (loan.paymentAmount * loan.numberOfPayments),\n      term: loan.term,\n      interestRate: loan.interestRate,\n      paymentFrequency: loan.paymentFrequency,\n      payoffDate: amortizationSchedule ? amortizationSchedule.payoffDate : loan.payoffDate,\n      numberOfPayments: loan.numberOfPayments,\n      inflationRate: loan.inflationRate,\n      inflationAdjusted: inflationAdjusted ? {\n        totalPayment: inflationAdjusted.summary.totalInflationAdjustedPayment,\n        totalInterest: inflationAdjusted.summary.totalInflationAdjustedInterest,\n        savingsFromInflation: inflationAdjusted.summary.savingsFromInflation,\n      } : null,\n    };\n\n    // Prepare payment breakdown data\n    const breakdown = {\n      principal: loan.totalLoanAmount,\n      interest: summary.totalInterest,\n      total: summary.totalPayment,\n      interestRatio: summary.totalInterest / summary.totalPayment,\n      principalRatio: loan.totalLoanAmount / summary.totalPayment,\n    };\n\n    // Display results\n    this.displaySummary(summary);\n    this.displayPaymentBreakdown(breakdown);\n\n    // Render charts if we have amortization schedule\n    if (this.charts && amortizationSchedule) {\n      // Clear any existing charts\n      this.charts.clear();\n\n      // Render principal vs interest chart\n      this.charts.renderPrincipalVsInterestChart({ loan, amortizationSchedule });\n\n      // Render payment breakdown pie chart\n      this.charts.renderPaymentBreakdownPieChart({ loan, amortizationSchedule });\n\n      // Render comparison chart if we have comparison scenarios\n      if (comparisonScenarios && comparisonScenarios.length > 0) {\n        // Add current calculation as first scenario if not already included\n        const scenarios = [{\n          id: 'current',\n          name: loan.name || 'Current Calculation',\n          loan,\n          amortizationSchedule,\n        }];\n\n        // Add other scenarios\n        comparisonScenarios.forEach((scenario) => {\n          if (scenario.id !== 'current') {\n            scenarios.push(scenario);\n          }\n        });\n\n        // Only render if we have at least 2 scenarios\n        if (scenarios.length >= 2) {\n          this.charts.renderComparisonChart(scenarios);\n        }\n      }\n    }\n\n    // Show the results container\n    this.container.style.display = 'block';\n\n    // Animate results reveal with enhanced staggered effect\n    this._animateResultsReveal(summary, breakdown, amortizationSchedule);\n  }\n\n  /**\n   * Display loan summary information\n   * @param {Object} summary - Summary data\n   */\n  displaySummary(summary) {\n    const summaryContainer = this.container.querySelector('#results-summary');\n    if (!summaryContainer) return;\n\n    // Format values\n    const formattedValues = {\n      loanAmount: this.formatters.currency(summary.loanAmount),\n      paymentAmount: this.formatters.currency(summary.paymentAmount),\n      totalInterest: this.formatters.currency(summary.totalInterest),\n      totalPayment: this.formatters.currency(summary.totalPayment),\n      term: this.formatters.duration(summary.term),\n      interestRate: this.formatters.percentage(summary.interestRate / 100),\n      payoffDate: this.formatters.date(summary.payoffDate),\n      numberOfPayments: summary.numberOfPayments,\n    };\n\n    // Format inflation-adjusted values if available\n    let inflationSection = '';\n    if (summary.inflationAdjusted && summary.inflationRate > 0) {\n      const inflationValues = {\n        inflationRate: this.formatters.percentage(summary.inflationRate / 100),\n        totalAdjustedPayment: this.formatters.currency(summary.inflationAdjusted.totalPayment),\n        savingsFromInflation: this.formatters.currency(summary.inflationAdjusted.savingsFromInflation),\n        savingsPercentage: this.formatters.percentage(summary.inflationAdjusted.savingsFromInflation / summary.totalPayment),\n      };\n\n      inflationSection = `\n        <div class=\"inflation-section\">\n          <h3>Inflation-Adjusted Values (${inflationValues.inflationRate} inflation)</h3>\n          <div class=\"summary-grid\">\n            <div class=\"summary-item\">\n              <div class=\"summary-label\">Inflation-Adjusted Total Payment</div>\n              <div class=\"summary-value\">${inflationValues.totalAdjustedPayment}</div>\n            </div>\n            <div class=\"summary-item highlight\">\n              <div class=\"summary-label\">Real Savings Due to Inflation</div>\n              <div class=\"summary-value\">${inflationValues.savingsFromInflation} (${inflationValues.savingsPercentage})</div>\n            </div>\n          </div>\n        </div>\n      `;\n    }\n\n    // Get payment frequency description\n    const paymentFrequencyMap = {\n      monthly: 'Monthly',\n      'bi-weekly': 'Bi-Weekly',\n      weekly: 'Weekly',\n    };\n\n    const paymentFrequency = paymentFrequencyMap[summary.paymentFrequency] || 'Monthly';\n\n    // Create summary HTML\n    const summaryHtml = `\n      <div class=\"summary-grid\">\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">${paymentFrequency} Payment</div>\n          <div class=\"summary-value highlight\">${formattedValues.paymentAmount}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Loan Amount</div>\n          <div class=\"summary-value\">${formattedValues.loanAmount}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Total Interest</div>\n          <div class=\"summary-value\">${formattedValues.totalInterest}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Total Payment</div>\n          <div class=\"summary-value\">${formattedValues.totalPayment}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Loan Term</div>\n          <div class=\"summary-value\">${formattedValues.term}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Interest Rate</div>\n          <div class=\"summary-value\">${formattedValues.interestRate}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Number of Payments</div>\n          <div class=\"summary-value\">${formattedValues.numberOfPayments}</div>\n        </div>\n        <div class=\"summary-item\">\n          <div class=\"summary-label\">Payoff Date</div>\n          <div class=\"summary-value\">${formattedValues.payoffDate}</div>\n        </div>\n      </div>\n      ${inflationSection}\n    `;\n\n    summaryContainer.innerHTML = summaryHtml;\n\n    // Add interest rate indicator\n    this._addInterestRateIndicator(summary.interestRate);\n  }\n\n  /**\n   * Add visual indicator for interest rate\n   * @param {number} interestRate - Interest rate\n   * @private\n   */\n  _addInterestRateIndicator(interestRate) {\n    const interestRateElement = this.container.querySelector('.summary-item:nth-child(6) .summary-value');\n    if (!interestRateElement) return;\n\n    // Remove any existing indicators\n    interestRateElement.classList.remove('rate-low', 'rate-medium', 'rate-high');\n\n    // Add indicator based on rate\n    if (interestRate < 4) {\n      interestRateElement.classList.add('rate-low');\n      interestRateElement.setAttribute('title', 'This is a low interest rate');\n    } else if (interestRate < 7) {\n      interestRateElement.classList.add('rate-medium');\n      interestRateElement.setAttribute('title', 'This is an average interest rate');\n    } else {\n      interestRateElement.classList.add('rate-high');\n      interestRateElement.setAttribute('title', 'This is a high interest rate');\n    }\n  }\n\n  /**\n   * Display payment breakdown with visual indicators\n   * @param {Object} breakdown - Payment breakdown data\n   */\n  displayPaymentBreakdown(breakdown) {\n    const breakdownContainer = this.container.querySelector('#results-breakdown');\n    if (!breakdownContainer) return;\n\n    // Format values\n    const formattedValues = {\n      principal: this.formatters.currency(breakdown.principal),\n      interest: this.formatters.currency(breakdown.interest),\n      total: this.formatters.currency(breakdown.total),\n      interestPercentage: this.formatters.percentage(breakdown.interestRatio),\n      principalPercentage: this.formatters.percentage(breakdown.principalRatio),\n    };\n\n    // Calculate percentages for visual representation\n    const principalPercent = Math.round(breakdown.principalRatio * 100);\n    const interestPercent = Math.round(breakdown.interestRatio * 100);\n\n    // Create breakdown HTML\n    const breakdownHtml = `\n      <h3>Payment Breakdown</h3>\n      <div class=\"breakdown-chart\">\n        <div class=\"breakdown-bar\">\n          <div class=\"breakdown-principal\" style=\"width: ${principalPercent}%\" title=\"Principal: ${formattedValues.principalPercentage}\">\n            <span class=\"breakdown-label\">Principal</span>\n          </div>\n          <div class=\"breakdown-interest\" style=\"width: ${interestPercent}%\" title=\"Interest: ${formattedValues.interestPercentage}\">\n            <span class=\"breakdown-label\">Interest</span>\n          </div>\n        </div>\n        <div class=\"breakdown-legend\">\n          <div class=\"legend-item\">\n            <div class=\"legend-color principal-color\"></div>\n            <div class=\"legend-label\">Principal: ${formattedValues.principal} (${formattedValues.principalPercentage})</div>\n          </div>\n          <div class=\"legend-item\">\n            <div class=\"legend-color interest-color\"></div>\n            <div class=\"legend-label\">Interest: ${formattedValues.interest} (${formattedValues.interestPercentage})</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"breakdown-total\">\n        <span>Total Payment: ${formattedValues.total}</span>\n      </div>\n    `;\n\n    breakdownContainer.innerHTML = breakdownHtml;\n  }\n\n  /**\n   * Show skeleton loading for results\n   */\n  showLoading() {\n    if (!this.container) return;\n\n    // Show skeleton for summary\n    const summaryContainer = this.container.querySelector('#results-summary');\n    if (summaryContainer) {\n      this.summarySkeleton = loadingManager.showSkeleton(summaryContainer, 'results', { items: 8 });\n    }\n\n    // Show skeleton for breakdown\n    const breakdownContainer = this.container.querySelector('#results-breakdown');\n    if (breakdownContainer) {\n      this.breakdownSkeleton = loadingManager.showSkeleton(breakdownContainer, 'results', { items: 3 });\n    }\n\n    // Show skeleton for charts\n    const chartsContainer = this.container.querySelector('#charts-container');\n    if (chartsContainer) {\n      this.chartsSkeleton = loadingManager.showSkeleton(chartsContainer, 'chart', { title: true, legend: true });\n    }\n\n    // Show the results container\n    this.container.style.display = 'block';\n  }\n\n  /**\n   * Hide skeleton loading\n   */\n  hideLoading() {\n    if (this.summarySkeleton) {\n      loadingManager.hideSkeleton(this.summarySkeleton);\n      this.summarySkeleton = null;\n    }\n\n    if (this.breakdownSkeleton) {\n      loadingManager.hideSkeleton(this.breakdownSkeleton);\n      this.breakdownSkeleton = null;\n    }\n\n    if (this.chartsSkeleton) {\n      loadingManager.hideSkeleton(this.chartsSkeleton);\n      this.chartsSkeleton = null;\n    }\n  }\n\n  /**\n   * Clear all results\n   */\n  clear() {\n    if (!this.container) return;\n\n    // Hide any active skeleton loading\n    this.hideLoading();\n\n    const summaryContainer = this.container.querySelector('#results-summary');\n    const breakdownContainer = this.container.querySelector('#results-breakdown');\n\n    if (summaryContainer) {\n      summaryContainer.innerHTML = '';\n    }\n\n    if (breakdownContainer) {\n      breakdownContainer.innerHTML = '';\n    }\n\n    // Clear charts if they exist\n    if (this.charts) {\n      this.charts.clear();\n    }\n\n    // Hide the results container\n    this.container.style.display = 'none';\n  }\n\n  /**\n   * Update results with new calculation\n   * @param {Object} calculationResults - Calculation results object\n   */\n  update(calculationResults) {\n    this.render(calculationResults);\n  }\n\n  /**\n   * Update results with loan and amortization schedule\n   * @param {Loan} loan - Loan object\n   * @param {AmortizationSchedule} amortizationSchedule - Amortization schedule\n   * @param {Object} [inflationAdjusted] - Inflation-adjusted payment data\n   */\n  updateResults(loan, amortizationSchedule, inflationAdjusted = null) {\n    this.render({\n      loan,\n      amortizationSchedule,\n      inflationAdjusted,\n    });\n  }\n\n  /**\n   * Animate results reveal with enhanced effects\n   * @param {Object} summary - Summary data\n   * @param {Object} breakdown - Breakdown data\n   * @param {Object} amortizationSchedule - Amortization schedule\n   * @private\n   */\n  _animateResultsReveal(summary, breakdown, amortizationSchedule) {\n    animationManager.respectfulAnimate(() => {\n      // First, ensure all elements start in hidden state\n      const allElements = this.container.querySelectorAll('.summary-item, .breakdown-chart, .chart-item, .results-header');\n      allElements.forEach((el) => {\n        el.style.opacity = '0';\n        el.style.transform = 'translateY(30px)';\n      });\n\n      // Animate header first\n      animationManager.queueAnimation(() => {\n        const header = this.container.querySelector('.results-header');\n        if (header) {\n          header.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';\n          header.style.opacity = '1';\n          header.style.transform = 'translateY(0)';\n        }\n      }, 100);\n\n      // Animate summary items with stagger\n      animationManager.queueAnimation(() => {\n        animationManager.animateResultsReveal(this.container.querySelector('#results-summary'), {\n          stagger: true,\n          delay: 0,\n        });\n      }, 300);\n\n      // Animate breakdown with scale effect\n      animationManager.queueAnimation(() => {\n        const breakdownContainer = this.container.querySelector('#results-breakdown');\n        if (breakdownContainer) {\n          // Animate the breakdown title first\n          const title = breakdownContainer.querySelector('h3');\n          if (title) {\n            title.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';\n            title.style.opacity = '1';\n            title.style.transform = 'translateY(0)';\n          }\n\n          // Then animate the breakdown chart with scale\n          setTimeout(() => {\n            const chart = breakdownContainer.querySelector('.breakdown-chart');\n            if (chart) {\n              chart.style.transition = 'all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55)';\n              chart.style.opacity = '1';\n              chart.style.transform = 'translateY(0) scale(1)';\n              chart.style.transformOrigin = 'center';\n              \n              // Animate progress bars\n              this._animateProgressBars(chart);\n            }\n          }, 200);\n\n          // Animate legend items\n          setTimeout(() => {\n            const legendItems = breakdownContainer.querySelectorAll('.legend-item');\n            legendItems.forEach((item, index) => {\n              setTimeout(() => {\n                item.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';\n                item.style.opacity = '1';\n                item.style.transform = 'translateX(0)';\n              }, index * 100);\n            });\n          }, 400);\n        }\n      }, 800);\n\n      // Animate charts with delay\n      if (this.charts && amortizationSchedule) {\n        animationManager.queueAnimation(() => {\n          animationManager.animateChartReveal(this.container.querySelector('#charts-container'), {\n            delay: 0,\n          });\n        }, 1400);\n      }\n\n      // Add subtle micro-interactions after main animation\n      animationManager.queueAnimation(() => {\n        this._addMicroInteractions();\n      }, 2000);\n\n    }, () => {\n      // Fallback for reduced motion - just show everything immediately\n      const elements = this.container.querySelectorAll('.summary-item, .breakdown-chart, .chart-item, .results-header');\n      elements.forEach((el) => {\n        el.style.opacity = '1';\n        el.style.transform = 'none';\n      });\n    });\n  }\n\n  /**\n   * Animate progress bars with smooth fill effect\n   * @param {HTMLElement} container - Container element\n   * @private\n   */\n  _animateProgressBars(container) {\n    const principalBar = container.querySelector('.breakdown-principal');\n    const interestBar = container.querySelector('.breakdown-interest');\n\n    if (principalBar) {\n      const targetWidth = principalBar.style.width;\n      principalBar.style.width = '0%';\n      setTimeout(() => {\n        principalBar.style.transition = 'width 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n        principalBar.style.width = targetWidth;\n      }, 100);\n    }\n\n    if (interestBar) {\n      const targetWidth = interestBar.style.width;\n      interestBar.style.width = '0%';\n      setTimeout(() => {\n        interestBar.style.transition = 'width 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n        interestBar.style.width = targetWidth;\n      }, 300);\n    }\n  }\n\n  /**\n   * Add subtle micro-interactions to result elements\n   * @private\n   */\n  _addMicroInteractions() {\n    // Add hover animations to summary items\n    animationManager.addHoverAnimations(this.container, '.summary-item');\n\n    // Add number counter animations for highlighted values\n    const highlightedValues = this.container.querySelectorAll('.summary-item.highlight .summary-value');\n    highlightedValues.forEach((element) => {\n      // Extract numeric value for animation\n      const text = element.textContent;\n      const numericMatch = text.match(/[\\d,]+\\.?\\d*/);\n      if (numericMatch) {\n        const numericValue = parseFloat(numericMatch[0].replace(/,/g, ''));\n        if (!isNaN(numericValue)) {\n          // Animate from 0 to the actual value\n          animationManager.animateNumber(element, 0, numericValue, {\n            duration: 1500,\n            formatter: (num) => {\n              // Preserve the original formatting\n              const formatted = num.toLocaleString();\n              return text.replace(/[\\d,]+\\.?\\d*/, formatted);\n            },\n          });\n        }\n      }\n    });\n\n    // Add ripple effects to action buttons\n    const actionButtons = this.container.querySelectorAll('.btn-save, .btn-export');\n    actionButtons.forEach((button) => {\n      button.addEventListener('click', (event) => {\n        animationManager.createRippleEffect(button, event);\n      });\n    });\n\n    // Add subtle pulse animation to interest rate indicators\n    const rateIndicators = this.container.querySelectorAll('.rate-low, .rate-medium, .rate-high');\n    rateIndicators.forEach((indicator) => {\n      indicator.addEventListener('mouseenter', () => {\n        indicator.style.animation = 'numberPulse 0.6s cubic-bezier(0.4, 0, 0.2, 1)';\n      });\n      \n      indicator.addEventListener('animationend', () => {\n        indicator.style.animation = '';\n      });\n    });\n  }\n}\n\nexport default ResultsDisplay;\n","/**\n * Amortization Schedule Model\n * Represents a loan amortization schedule with payment details\n * Implements requirements 1.1, 1.3, 4.3\n */\n\nclass AmortizationSchedule {\n  /**\n   * Create a new amortization schedule for a loan\n   * @param {Loan} loan - The loan to create a schedule for\n   * @param {boolean} [autoGenerate=true] - Whether to automatically generate the schedule\n   */\n  constructor(loan, autoGenerate = true) {\n    this.loan = loan;\n    this.payments = [];\n    this.isGenerating = false;\n    this.generationProgress = 0;\n\n    // Generate the schedule when the object is created (unless disabled)\n    if (autoGenerate) {\n      this.generateSchedule();\n    }\n  }\n\n  /**\n   * Generate the amortization schedule for the loan asynchronously\n   * @param {Object} options - Options for schedule generation\n   * @param {boolean} [options.includeAdditionalPayments=true] - Whether to include additional payments in the calculation\n   * @param {Function} [options.onProgress] - Progress callback function\n   * @param {number} [options.timeout=5000] - Timeout in milliseconds\n   * @returns {Promise<Array>} Promise that resolves to array of Payment objects\n   */\n  async generateScheduleAsync(options = {}) {\n    const includeAdditionalPayments = options.includeAdditionalPayments !== false;\n    const onProgress = options.onProgress || (() => {});\n    const timeout = options.timeout || 5000;\n    const batchSize = options.batchSize || 50; // Process payments in batches\n\n    // Set generation state\n    this.isGenerating = true;\n    this.generationProgress = 0;\n\n    try {\n      // Clear existing payments\n      this.payments = [];\n\n      // Validate loan parameters\n      const loanAmount = this.loan.totalLoanAmount();\n      if (!loanAmount || loanAmount <= 0) {\n        throw new Error('Loan amount must be greater than zero.');\n      }\n\n      if (loanAmount > 100000000) { // 100 million limit\n        throw new Error('Loan amount is too large. Please enter a reasonable loan amount.');\n      }\n\n      const { interestRate } = this.loan;\n      if (interestRate == null || interestRate < 0 || interestRate > 50) {\n        throw new Error('Interest rate must be between 0% and 50%.');\n      }\n\n      const { term } = this.loan;\n      if (!term || term <= 0 || term > 600) { // 50 years max\n        throw new Error('Loan term must be between 1 and 600 months.');\n      }\n\n      // Get loan parameters\n      const principal = this.loan.totalLoanAmount();\n      const periodicRate = this.loan.periodicInterestRate();\n      const regularPayment = this.loan.paymentAmount();\n      const additionalPayment = includeAdditionalPayments ? this.loan.additionalPayment : 0;\n      const maxPayments = this.loan.numberOfPayments() * 2; // Safety limit\n\n      // Validate calculated values\n      if (isNaN(periodicRate) || periodicRate < 0) {\n        throw new Error('Invalid interest rate calculation. Please check your interest rate.');\n      }\n\n      if (isNaN(regularPayment) || regularPayment <= 0) {\n        throw new Error('Invalid payment calculation. Please check your loan parameters.');\n      }\n\n      if (regularPayment <= principal * periodicRate) {\n        throw new Error('Monthly payment is too low to cover interest. Please increase the payment amount or reduce the loan amount.');\n      }\n\n      // Initialize variables for the schedule calculation\n      let balance = principal;\n      let paymentNumber = 1;\n      const currentDate = new Date(this.loan.startDate);\n      const paymentInterval = this.getPaymentInterval();\n\n      // Set up timeout\n      const startTime = Date.now();\n\n      // Generate payments until the balance is paid off\n      while (balance > 0 && paymentNumber <= maxPayments) {\n        // Check for timeout\n        if (Date.now() - startTime > timeout) {\n          throw new Error(`Calculation timeout after ${timeout}ms. The loan parameters may be invalid.`);\n        }\n\n        // Calculate interest for this period\n        const interestPayment = balance * periodicRate;\n\n        // Calculate principal for this period (ensure we don't overpay)\n        const totalPayment = Math.min(regularPayment + additionalPayment, balance + interestPayment);\n        const principalPayment = totalPayment - interestPayment;\n\n        // Update balance\n        balance = Math.max(0, balance - principalPayment);\n\n        // Create payment object\n        const payment = new Payment(\n          paymentNumber,\n          new Date(currentDate),\n          totalPayment,\n          principalPayment,\n          interestPayment,\n          balance,\n        );\n\n        // Add to payments array\n        this.payments.push(payment);\n\n        // Update progress\n        const estimatedTotalPayments = Math.min(this.loan.numberOfPayments(), maxPayments);\n        this.generationProgress = Math.min(95, (paymentNumber / estimatedTotalPayments) * 100);\n\n        // Process in batches to avoid blocking the UI\n        if (paymentNumber % batchSize === 0) {\n          onProgress(this.generationProgress, `Processing payment ${paymentNumber}...`);\n          // Yield control back to the event loop\n          await new Promise((resolve) => setTimeout(resolve, 0));\n        }\n\n        // Increment payment number\n        paymentNumber++;\n\n        // Advance date to next payment\n        this.advanceDate(currentDate, paymentInterval);\n\n        // If we're down to a very small balance, just pay it off\n        if (balance > 0 && balance < 0.01) {\n          balance = 0;\n        }\n      }\n\n      // Check if we hit the safety limit\n      if (paymentNumber > maxPayments && balance > 0) {\n        throw new Error('Maximum payment limit reached. Please check your loan parameters.');\n      }\n\n      // Complete\n      this.isGenerating = false;\n      this.generationProgress = 100;\n      onProgress(100, 'Complete');\n\n      return this.payments;\n    } catch (error) {\n      this.isGenerating = false;\n      this.generationProgress = 0;\n      throw error;\n    }\n  }\n\n  /**\n   * Generate the amortization schedule for the loan (synchronous version)\n   * @param {Object} options - Options for schedule generation\n   * @param {boolean} [options.includeAdditionalPayments=true] - Whether to include additional payments in the calculation\n   * @returns {Array} Array of Payment objects\n   */\n  generateSchedule(options = {}) {\n    const includeAdditionalPayments = options.includeAdditionalPayments !== false;\n\n    // Clear existing payments\n    this.payments = [];\n\n    // If loan amount is zero, return empty schedule\n    if (this.loan.totalLoanAmount() <= 0) {\n      return this.payments;\n    }\n\n    // Get loan parameters\n    const principal = this.loan.totalLoanAmount();\n    const periodicRate = this.loan.periodicInterestRate();\n    const regularPayment = this.loan.paymentAmount();\n    const additionalPayment = includeAdditionalPayments ? this.loan.additionalPayment : 0;\n\n    // Initialize variables for the schedule calculation\n    let balance = principal;\n    let paymentNumber = 1;\n    const currentDate = new Date(this.loan.startDate);\n\n    // Calculate payment interval based on frequency\n    const paymentInterval = this.getPaymentInterval();\n\n    // Generate payments until the balance is paid off\n    while (balance > 0) {\n      // Calculate interest for this period\n      const interestPayment = balance * periodicRate;\n\n      // Calculate principal for this period (ensure we don't overpay)\n      const totalPayment = Math.min(regularPayment + additionalPayment, balance + interestPayment);\n      const principalPayment = totalPayment - interestPayment;\n\n      // Update balance\n      balance = Math.max(0, balance - principalPayment);\n\n      // Create payment object\n      const payment = new Payment(\n        paymentNumber,\n        new Date(currentDate),\n        totalPayment,\n        principalPayment,\n        interestPayment,\n        balance,\n      );\n\n      // Add to payments array\n      this.payments.push(payment);\n\n      // Increment payment number\n      paymentNumber++;\n\n      // Advance date to next payment\n      this.advanceDate(currentDate, paymentInterval);\n\n      // Safety check to prevent infinite loops\n      if (paymentNumber > this.loan.numberOfPayments() * 2) {\n        // Maximum payment count exceeded, possible calculation error\n        break;\n      }\n\n      // If we're down to a very small balance, just pay it off\n      if (balance > 0 && balance < 0.01) {\n        balance = 0;\n      }\n    }\n\n    return this.payments;\n  }\n\n  /**\n   * Get the payment interval in days based on payment frequency\n   * @returns {Object} Object with days and type properties\n   */\n  getPaymentInterval() {\n    switch (this.loan.paymentFrequency) {\n      case 'weekly':\n        return { days: 7, type: 'days' };\n      case 'bi-weekly':\n        return { days: 14, type: 'days' };\n      case 'monthly':\n        return { days: 1, type: 'months' };\n      default:\n        return { days: 1, type: 'months' };\n    }\n  }\n\n  /**\n   * Advance a date by the specified interval\n   * @param {Date} date - Date to advance (modified in place)\n   * @param {Object} interval - Interval object with days and type properties\n   */\n  advanceDate(date, interval) {\n    if (interval.type === 'days') {\n      date.setDate(date.getDate() + interval.days);\n    } else if (interval.type === 'months') {\n      date.setMonth(date.getMonth() + interval.days);\n    }\n  }\n\n  /**\n   * Calculate the total interest paid over the life of the loan\n   * @returns {number} Total interest\n   */\n  totalInterest() {\n    return this.payments.reduce((sum, payment) => sum + payment.interest, 0);\n  }\n\n  /**\n   * Calculate the total amount paid over the life of the loan\n   * @returns {number} Total payment\n   */\n  totalPayment() {\n    return this.payments.reduce((sum, payment) => sum + payment.amount, 0);\n  }\n\n  /**\n   * Get the payoff date (date of the last payment)\n   * @returns {Date} Payoff date\n   */\n  payoffDate() {\n    if (this.payments.length === 0) {\n      return new Date(this.loan.startDate);\n    }\n\n    return new Date(this.payments[this.payments.length - 1].date);\n  }\n\n  /**\n   * Convert the amortization schedule to JSON for storage\n   * @returns {Object} JSON representation\n   */\n  toJSON() {\n    return {\n      loanId: this.loan.id,\n      payments: this.payments.map((payment) => payment.toJSON()),\n    };\n  }\n\n  /**\n   * Create an amortization schedule from JSON data\n   * @param {Object} json - JSON data\n   * @param {Loan} loan - Associated loan object\n   * @returns {AmortizationSchedule} New amortization schedule\n   */\n  static fromJSON(json, loan) {\n    if (!json || !json.payments || !Array.isArray(json.payments)) {\n      return new AmortizationSchedule(loan);\n    }\n\n    const schedule = new AmortizationSchedule(loan);\n    // Override the auto-generated schedule with the stored one\n    schedule.payments = json.payments.map((paymentJson) => Payment.fromJSON(paymentJson));\n    return schedule;\n  }\n}\n\n/**\n * Payment class representing a single payment in an amortization schedule\n */\nclass Payment {\n  /**\n   * Create a new payment\n   * @param {number} number - Payment number in sequence\n   * @param {Date} date - Date of payment\n   * @param {number} amount - Total payment amount\n   * @param {number} principal - Principal portion of payment\n   * @param {number} interest - Interest portion of payment\n   * @param {number} balance - Remaining balance after payment\n   */\n  constructor(number, date, amount, principal, interest, balance) {\n    this.number = number;\n    this.date = date;\n    this.amount = amount;\n    this.principal = principal;\n    this.interest = interest;\n    this.balance = balance;\n  }\n\n  /**\n   * Get the month of the payment (1-12)\n   * @returns {number} Month number\n   */\n  month() {\n    return this.date.getMonth() + 1; // JavaScript months are 0-indexed\n  }\n\n  /**\n   * Get the year of the payment\n   * @returns {number} Year\n   */\n  year() {\n    return this.date.getFullYear();\n  }\n\n  /**\n   * Get the cumulative principal paid so far (not implemented yet)\n   * This would require knowledge of previous payments\n   * @returns {number} Cumulative principal\n   */\n  cumulativePrincipal() {\n    // This would be implemented when we have access to previous payments\n    return this.principal;\n  }\n\n  /**\n   * Get the cumulative interest paid so far (not implemented yet)\n   * This would require knowledge of previous payments\n   * @returns {number} Cumulative interest\n   */\n  cumulativeInterest() {\n    // This would be implemented when we have access to previous payments\n    return this.interest;\n  }\n\n  /**\n   * Convert payment to JSON for storage\n   * @returns {Object} JSON representation\n   */\n  toJSON() {\n    return {\n      number: this.number,\n      date: this.date.toISOString(),\n      amount: this.amount,\n      principal: this.principal,\n      interest: this.interest,\n      balance: this.balance,\n    };\n  }\n\n  /**\n   * Create a payment from JSON data\n   * @param {Object} json - JSON data\n   * @returns {Payment} New payment instance\n   */\n  static fromJSON(json) {\n    if (!json) return null;\n\n    return new Payment(\n      json.number,\n      new Date(json.date),\n      json.amount,\n      json.principal,\n      json.interest,\n      json.balance,\n    );\n  }\n}\n\nexport { AmortizationSchedule, Payment };\n","/**\n * Charts Component\n * Creates interactive charts for loan data visualization\n * Implements requirement 2.3\n */\n\nimport { Chart } from 'chart.js/auto';\nimport animationManager from '../utils/animation-manager.js';\n\nclass Charts {\n  /**\n   * Create a new charts component\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement} [options.container] - Container element\n   * @param {Object} [options.colorScheme] - Custom color scheme\n   */\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('charts-container');\n    this.colorScheme = options.colorScheme || {\n      principal: '#007bff',\n      interest: '#dc3545',\n      balance: '#28a745',\n      comparison: ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e'],\n    };\n\n    this.chartInstances = {\n      principalVsInterest: null,\n      paymentBreakdown: null,\n      comparison: null,\n    };\n\n    this.theme = 'light';\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    if (!this.container) {\n      console.error('Charts container not found');\n      return;\n    }\n\n    // Create chart containers if they don't exist\n    this._createChartContainers();\n\n    // Register event listeners\n    this._initEventListeners();\n  }\n\n  /**\n   * Create chart containers if they don't exist\n   * @private\n   */\n  _createChartContainers() {\n    // Check if containers already exist\n    if (!this.container.querySelector('#principal-interest-chart')) {\n      const principalInterestContainer = document.createElement('div');\n      principalInterestContainer.id = 'principal-interest-chart';\n      principalInterestContainer.className = 'chart-container';\n      principalInterestContainer.innerHTML = `\n        <div class=\"chart-title\">Principal vs. Interest Over Time</div>\n        <canvas></canvas>\n        <div class=\"chart-legend\"></div>\n      `;\n      this.container.appendChild(principalInterestContainer);\n    }\n\n    if (!this.container.querySelector('#payment-breakdown-chart')) {\n      const paymentBreakdownContainer = document.createElement('div');\n      paymentBreakdownContainer.id = 'payment-breakdown-chart';\n      paymentBreakdownContainer.className = 'chart-container';\n      paymentBreakdownContainer.innerHTML = `\n        <div class=\"chart-title\">Payment Breakdown</div>\n        <canvas></canvas>\n        <div class=\"chart-legend\"></div>\n      `;\n      this.container.appendChild(paymentBreakdownContainer);\n    }\n\n    if (!this.container.querySelector('#comparison-chart')) {\n      const comparisonContainer = document.createElement('div');\n      comparisonContainer.id = 'comparison-chart';\n      comparisonContainer.className = 'chart-container';\n      comparisonContainer.style.display = 'none'; // Hidden by default\n      comparisonContainer.innerHTML = `\n        <div class=\"chart-title\">Loan Comparison</div>\n        <canvas></canvas>\n        <div class=\"chart-legend\"></div>\n      `;\n      this.container.appendChild(comparisonContainer);\n    }\n\n    if (!this.container.querySelector('#inflation-impact-chart')) {\n      const inflationImpactContainer = document.createElement('div');\n      inflationImpactContainer.id = 'inflation-impact-chart';\n      inflationImpactContainer.className = 'chart-container';\n      inflationImpactContainer.style.display = 'none'; // Hidden by default\n      inflationImpactContainer.innerHTML = `\n        <div class=\"chart-title\">Inflation Impact on Payments</div>\n        <canvas></canvas>\n        <div class=\"chart-legend\"></div>\n      `;\n      this.container.appendChild(inflationImpactContainer);\n    }\n  }\n\n  /**\n   * Initialize event listeners\n   * @private\n   */\n  _initEventListeners() {\n    // Add responsive behavior for charts\n    window.addEventListener('resize', () => {\n      this._resizeCharts();\n    });\n  }\n\n  /**\n   * Resize charts when window size changes\n   * @private\n   */\n  _resizeCharts() {\n    // Update chart sizes if they exist\n    Object.values(this.chartInstances).forEach((chart) => {\n      if (chart) {\n        chart.resize();\n      }\n    });\n  }\n\n  /**\n   * Render principal vs interest chart\n   * @param {Object} data - Calculation data\n   * @param {Loan} data.loan - Loan object\n   * @param {AmortizationSchedule} data.amortizationSchedule - Amortization schedule\n   */\n  renderPrincipalVsInterestChart(data) {\n    if (!this.container || !data || !data.loan || !data.amortizationSchedule) {\n      return;\n    }\n\n    const chartContainer = this.container.querySelector('#principal-interest-chart');\n    if (!chartContainer) return;\n\n    // Show the chart container\n    chartContainer.style.display = 'block';\n\n    // Get the canvas element\n    const canvas = chartContainer.querySelector('canvas');\n    if (!canvas) return;\n\n    // Prepare data for the chart\n    const { loan, amortizationSchedule } = data;\n    const { payments } = amortizationSchedule;\n\n    // We'll sample the payments to avoid too many data points\n    // For loans with many payments, we'll sample to have around 60 data points\n    const sampleInterval = Math.max(1, Math.floor(payments.length / 60));\n    const sampledPayments = payments.filter((_, index) => index % sampleInterval === 0 || index === payments.length - 1);\n\n    // Prepare datasets\n    const labels = sampledPayments.map((payment) => payment.number);\n    const principalData = sampledPayments.map((payment) => payment.principal);\n    const interestData = sampledPayments.map((payment) => payment.interest);\n    const balanceData = sampledPayments.map((payment) => payment.balance);\n\n    // Destroy previous chart if it exists\n    if (this.chartInstances.principalVsInterest) {\n      this.chartInstances.principalVsInterest.destroy();\n    }\n\n    // Create the chart\n    this.chartInstances.principalVsInterest = new Chart(canvas, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [\n          {\n            label: 'Principal',\n            data: principalData,\n            backgroundColor: this.colorScheme.principal,\n            borderColor: this.colorScheme.principal,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n          {\n            label: 'Interest',\n            data: interestData,\n            backgroundColor: this.colorScheme.interest,\n            borderColor: this.colorScheme.interest,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n          {\n            label: 'Remaining Balance',\n            data: balanceData,\n            backgroundColor: this.colorScheme.balance,\n            borderColor: this.colorScheme.balance,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            mode: 'index',\n            intersect: false,\n            callbacks: {\n              label(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += new Intl.NumberFormat('en-US', {\n                    style: 'currency',\n                    currency: 'USD',\n                  }).format(context.parsed.y);\n                }\n                return label;\n              },\n            },\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              boxWidth: 12,\n              padding: 15,\n            },\n          },\n          title: {\n            display: false,\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Payment Number',\n            },\n            ticks: {\n              maxTicksLimit: 10,\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Amount ($)',\n            },\n            ticks: {\n              callback(value) {\n                return new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD',\n                  maximumFractionDigits: 0,\n                }).format(value);\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Apply theme\n    this._applyChartTheme(this.chartInstances.principalVsInterest);\n\n    // Animate chart reveal\n    this._animateChartReveal(chartContainer, 'principal-interest');\n  }\n\n  /**\n   * Render payment breakdown pie chart\n   * @param {Object} data - Calculation data\n   * @param {Loan} data.loan - Loan object\n   * @param {AmortizationSchedule} data.amortizationSchedule - Amortization schedule\n   */\n  renderPaymentBreakdownPieChart(data) {\n    if (!this.container || !data || !data.loan || !data.amortizationSchedule) {\n      return;\n    }\n\n    const chartContainer = this.container.querySelector('#payment-breakdown-chart');\n    if (!chartContainer) return;\n\n    // Show the chart container\n    chartContainer.style.display = 'block';\n\n    // Get the canvas element\n    const canvas = chartContainer.querySelector('canvas');\n    if (!canvas) return;\n\n    // Prepare data for the chart\n    const { loan, amortizationSchedule } = data;\n    const principal = loan.totalLoanAmount;\n    const interest = amortizationSchedule.totalInterest;\n\n    // Destroy previous chart if it exists\n    if (this.chartInstances.paymentBreakdown) {\n      this.chartInstances.paymentBreakdown.destroy();\n    }\n\n    // Create the chart\n    this.chartInstances.paymentBreakdown = new Chart(canvas, {\n      type: 'pie',\n      data: {\n        labels: ['Principal', 'Interest'],\n        datasets: [{\n          data: [principal, interest],\n          backgroundColor: [\n            this.colorScheme.principal,\n            this.colorScheme.interest,\n          ],\n          borderColor: [\n            this.theme === 'dark' ? '#2c3034' : '#ffffff',\n            this.theme === 'dark' ? '#2c3034' : '#ffffff',\n          ],\n          borderWidth: 1,\n        }],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label(context) {\n                const label = context.label || '';\n                const value = context.raw;\n                const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                const percentage = Math.round((value / total) * 100);\n\n                return `${label}: ${new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD',\n                }).format(value)} (${percentage}%)`;\n              },\n            },\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              boxWidth: 12,\n              padding: 15,\n            },\n          },\n        },\n      },\n    });\n\n    // Apply theme\n    this._applyChartTheme(this.chartInstances.paymentBreakdown);\n\n    // Animate chart reveal\n    this._animateChartReveal(chartContainer, 'payment-breakdown');\n  }\n\n  /**\n   * Render comparison chart for multiple loan scenarios\n   * @param {Array} scenarios - Array of loan scenarios\n   */\n  renderComparisonChart(scenarios) {\n    if (!this.container || !scenarios || scenarios.length < 2) {\n      return;\n    }\n\n    const chartContainer = this.container.querySelector('#comparison-chart');\n    if (!chartContainer) return;\n\n    // Show the chart container\n    chartContainer.style.display = 'block';\n\n    // Get the canvas element\n    const canvas = chartContainer.querySelector('canvas');\n    if (!canvas) return;\n\n    // Prepare data for the chart\n    const labels = ['Monthly Payment', 'Total Interest', 'Total Payment'];\n    const datasets = scenarios.map((scenario, index) => {\n      const { loan, amortizationSchedule } = scenario;\n      const monthlyPayment = loan.paymentAmount;\n      const totalInterest = amortizationSchedule ? amortizationSchedule.totalInterest : loan.totalInterest;\n      const totalPayment = amortizationSchedule ? amortizationSchedule.totalPayment : (loan.paymentAmount * loan.numberOfPayments);\n\n      return {\n        label: scenario.name || `Scenario ${index + 1}`,\n        data: [monthlyPayment, totalInterest, totalPayment],\n        backgroundColor: this.colorScheme.comparison[index % this.colorScheme.comparison.length],\n        borderColor: this.theme === 'dark' ? '#2c3034' : '#ffffff',\n        borderWidth: 1,\n      };\n    });\n\n    // Destroy previous chart if it exists\n    if (this.chartInstances.comparison) {\n      this.chartInstances.comparison.destroy();\n    }\n\n    // Create the chart\n    this.chartInstances.comparison = new Chart(canvas, {\n      type: 'bar',\n      data: {\n        labels,\n        datasets,\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += new Intl.NumberFormat('en-US', {\n                    style: 'currency',\n                    currency: 'USD',\n                  }).format(context.parsed.y);\n                }\n                return label;\n              },\n            },\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              boxWidth: 12,\n              padding: 15,\n            },\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Metrics',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Amount ($)',\n            },\n            ticks: {\n              callback(value) {\n                return new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD',\n                  maximumFractionDigits: 0,\n                }).format(value);\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Apply theme\n    this._applyChartTheme(this.chartInstances.comparison);\n  }\n\n  /**\n   * Update chart theme\n   * @param {string} theme - Theme name ('light' or 'dark')\n   */\n  updateChartTheme(theme) {\n    if (theme !== 'light' && theme !== 'dark') {\n      return;\n    }\n\n    this.theme = theme;\n\n    // Update all charts\n    Object.values(this.chartInstances).forEach((chart) => {\n      if (chart) {\n        this._applyChartTheme(chart);\n      }\n    });\n  }\n\n  /**\n   * Apply theme to a chart\n   * @param {Chart} chart - Chart instance\n   * @private\n   */\n  _applyChartTheme(chart) {\n    if (!chart) return;\n\n    const isDark = this.theme === 'dark';\n    const textColor = isDark ? '#e9ecef' : '#212529';\n    const gridColor = isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';\n\n    // Update chart options\n    if (chart.options.scales) {\n      // For line and bar charts\n      Object.values(chart.options.scales).forEach((scale) => {\n        if (scale.ticks) {\n          scale.ticks.color = textColor;\n        }\n        if (scale.title) {\n          scale.title.color = textColor;\n        }\n        if (scale.grid) {\n          scale.grid.color = gridColor;\n        }\n      });\n    }\n\n    // Update legend\n    if (chart.options.plugins && chart.options.plugins.legend) {\n      chart.options.plugins.legend.labels.color = textColor;\n    }\n\n    // Update border colors for pie/doughnut charts\n    if (chart.config.type === 'pie' || chart.config.type === 'doughnut') {\n      chart.data.datasets.forEach((dataset) => {\n        dataset.borderColor = isDark ? '#2c3034' : '#ffffff';\n      });\n    }\n\n    // Update the chart\n    chart.update();\n  }\n\n  /**\n   * Render inflation impact chart\n   * @param {Object} data - Calculation data\n   * @param {Loan} data.loan - Loan object\n   * @param {AmortizationSchedule} data.amortizationSchedule - Amortization schedule\n   * @param {Object} data.inflationAdjusted - Inflation-adjusted payment data\n   */\n  renderInflationImpactChart(data) {\n    if (!this.container || !data || !data.loan || !data.amortizationSchedule || !data.inflationAdjusted) {\n      return;\n    }\n\n    const chartContainer = this.container.querySelector('#inflation-impact-chart');\n    if (!chartContainer) return;\n\n    // Show the chart container\n    chartContainer.style.display = 'block';\n\n    // Get the canvas element\n    const canvas = chartContainer.querySelector('canvas');\n    if (!canvas) return;\n\n    // Prepare data for the chart\n    const { loan, amortizationSchedule, inflationAdjusted } = data;\n    const { payments } = inflationAdjusted;\n\n    // We'll sample the payments to avoid too many data points\n    // For loans with many payments, we'll sample to have around 60 data points\n    const sampleInterval = Math.max(1, Math.floor(payments.length / 60));\n    const sampledPayments = payments.filter((_, index) => index % sampleInterval === 0 || index === payments.length - 1);\n\n    // Prepare datasets\n    const labels = sampledPayments.map((payment) => payment.number);\n    const nominalPayments = sampledPayments.map((payment) => payment.originalAmount);\n    const inflationAdjustedPayments = sampledPayments.map((payment) => payment.inflationAdjustedAmount);\n\n    // Destroy previous chart if it exists\n    if (this.chartInstances.inflationImpact) {\n      this.chartInstances.inflationImpact.destroy();\n    }\n\n    // Create the chart\n    this.chartInstances.inflationImpact = new Chart(canvas, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [\n          {\n            label: 'Nominal Payment',\n            data: nominalPayments,\n            backgroundColor: this.colorScheme.principal,\n            borderColor: this.colorScheme.principal,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n          {\n            label: 'Inflation-Adjusted Payment',\n            data: inflationAdjustedPayments,\n            backgroundColor: this.colorScheme.balance,\n            borderColor: this.colorScheme.balance,\n            borderWidth: 2,\n            fill: false,\n            tension: 0.1,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            mode: 'index',\n            intersect: false,\n            callbacks: {\n              label(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += new Intl.NumberFormat('en-US', {\n                    style: 'currency',\n                    currency: 'USD',\n                  }).format(context.parsed.y);\n                }\n                return label;\n              },\n            },\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              boxWidth: 12,\n              padding: 15,\n            },\n          },\n          title: {\n            display: true,\n            text: `Inflation Rate: ${inflationAdjusted.summary.inflationRate}%`,\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Payment Number',\n            },\n            ticks: {\n              maxTicksLimit: 10,\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Payment Amount ($)',\n            },\n            ticks: {\n              callback(value) {\n                return new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD',\n                  maximumFractionDigits: 0,\n                }).format(value);\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Apply theme\n    this._applyChartTheme(this.chartInstances.inflationImpact);\n\n    // Add summary information below the chart\n    const legendContainer = chartContainer.querySelector('.chart-legend');\n    if (legendContainer) {\n      const savings = inflationAdjusted.summary.savingsFromInflation;\n      const originalTotal = inflationAdjusted.summary.totalOriginalPayment;\n      const adjustedTotal = inflationAdjusted.summary.totalInflationAdjustedPayment;\n      const savingsPercentage = (savings / originalTotal) * 100;\n\n      legendContainer.innerHTML = `\n        <div class=\"inflation-summary\">\n          <div class=\"summary-item\">\n            <span class=\"label\">Total Nominal Payments:</span>\n            <span class=\"value\">${new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(originalTotal)}</span>\n          </div>\n          <div class=\"summary-item\">\n            <span class=\"label\">Total Inflation-Adjusted Payments:</span>\n            <span class=\"value\">${new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(adjustedTotal)}</span>\n          </div>\n          <div class=\"summary-item highlight\">\n            <span class=\"label\">Real Savings Due to Inflation:</span>\n            <span class=\"value\">${new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(savings)} (${savingsPercentage.toFixed(1)}%)</span>\n          </div>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Clear all charts\n   */\n  clear() {\n    // Destroy all chart instances\n    Object.keys(this.chartInstances).forEach((key) => {\n      if (this.chartInstances[key]) {\n        this.chartInstances[key].destroy();\n        this.chartInstances[key] = null;\n      }\n    });\n\n    // Hide chart containers\n    const containers = [\n      '#principal-interest-chart',\n      '#payment-breakdown-chart',\n      '#comparison-chart',\n      '#inflation-impact-chart',\n    ];\n\n    containers.forEach((selector) => {\n      const container = this.container.querySelector(selector);\n      if (container) {\n        container.style.display = 'none';\n      }\n    });\n  }\n\n  /**\n   * Animate chart reveal with scale and fade effect\n   * @param {HTMLElement} chartContainer - Chart container element\n   * @param {string} chartType - Type of chart for specific animations\n   * @private\n   */\n  _animateChartReveal(chartContainer, chartType) {\n    if (!chartContainer) return;\n\n    animationManager.respectfulAnimate(() => {\n      // Set initial state\n      chartContainer.style.opacity = '0';\n      chartContainer.style.transform = 'scale(0.9) translateY(20px)';\n      chartContainer.style.transition = 'all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55)';\n\n      // Animate reveal\n      setTimeout(() => {\n        chartContainer.style.opacity = '1';\n        chartContainer.style.transform = 'scale(1) translateY(0)';\n      }, 100);\n\n      // Add chart-specific animations\n      setTimeout(() => {\n        this._addChartSpecificAnimations(chartContainer, chartType);\n      }, 700);\n\n    }, () => {\n      // Fallback for reduced motion\n      chartContainer.style.opacity = '1';\n      chartContainer.style.transform = 'none';\n    });\n  }\n\n  /**\n   * Add chart-specific animations and interactions\n   * @param {HTMLElement} chartContainer - Chart container element\n   * @param {string} chartType - Type of chart\n   * @private\n   */\n  _addChartSpecificAnimations(chartContainer, chartType) {\n    // Add hover effects to chart container\n    chartContainer.addEventListener('mouseenter', () => {\n      if (!animationManager.prefersReducedMotion()) {\n        chartContainer.style.transform = 'scale(1.02)';\n        chartContainer.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.15)';\n        chartContainer.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n      }\n    });\n\n    chartContainer.addEventListener('mouseleave', () => {\n      if (!animationManager.prefersReducedMotion()) {\n        chartContainer.style.transform = 'scale(1)';\n        chartContainer.style.boxShadow = '';\n      }\n    });\n\n    // Add specific animations based on chart type\n    switch (chartType) {\n      case 'principal-interest':\n        this._animatePrincipalInterestChart(chartContainer);\n        break;\n      case 'payment-breakdown':\n        this._animatePaymentBreakdownChart(chartContainer);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Add specific animations for principal vs interest chart\n   * @param {HTMLElement} chartContainer - Chart container element\n   * @private\n   */\n  _animatePrincipalInterestChart(chartContainer) {\n    // Add subtle pulse animation to highlight the crossover point\n    const canvas = chartContainer.querySelector('canvas');\n    if (canvas && this.chartInstances.principalVsInterest) {\n      // Add a subtle glow effect that pulses occasionally\n      setInterval(() => {\n        if (!animationManager.prefersReducedMotion() && Math.random() < 0.1) {\n          canvas.style.filter = 'drop-shadow(0 0 8px rgba(59, 130, 246, 0.3))';\n          setTimeout(() => {\n            canvas.style.filter = '';\n          }, 1000);\n        }\n      }, 5000);\n    }\n  }\n\n  /**\n   * Add specific animations for payment breakdown chart\n   * @param {HTMLElement} chartContainer - Chart container element\n   * @private\n   */\n  _animatePaymentBreakdownChart(chartContainer) {\n    // Add rotation animation on hover for pie chart\n    const canvas = chartContainer.querySelector('canvas');\n    if (canvas) {\n      chartContainer.addEventListener('mouseenter', () => {\n        if (!animationManager.prefersReducedMotion()) {\n          canvas.style.transform = 'rotate(2deg)';\n          canvas.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n        }\n      });\n\n      chartContainer.addEventListener('mouseleave', () => {\n        if (!animationManager.prefersReducedMotion()) {\n          canvas.style.transform = 'rotate(0deg)';\n        }\n      });\n    }\n  }\n}\n\nexport default Charts;\n","/**\n * Financial Glossary Component\n * Provides a searchable glossary of financial terms\n * Implements requirement 5.1\n */\n\nimport { getTranslation } from '../utils/translations.js';\nimport { addKeyboardNavigation, announceToScreenReader } from '../utils/accessibility.js';\n\nclass FinancialGlossary {\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('glossary-container');\n    this.language = options.language || 'en';\n    this.isOpen = false;\n    this.terms = this.getGlossaryTerms();\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    this.render();\n    this.bindEvents();\n  }\n\n  /**\n   * Render the glossary component\n   */\n  render() {\n    if (!this.container) return;\n\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    // Create glossary button\n    const glossaryButtonHtml = `\n      <button id=\"glossary-toggle\" class=\"glossary-toggle\" aria-label=\"${t('glossary.openGlossary')}\">\n        <span class=\"glossary-icon\">📚</span>\n        <span class=\"glossary-text\">${t('glossary.title')}</span>\n      </button>\n    `;\n\n    // Create glossary modal\n    const glossaryModalHtml = `\n      <div id=\"glossary-modal\" class=\"glossary-modal\" aria-hidden=\"true\" role=\"dialog\" aria-labelledby=\"glossary-title\">\n        <div class=\"glossary-content\">\n          <div class=\"glossary-header\">\n            <h2 id=\"glossary-title\">${t('glossary.title')}</h2>\n            <button id=\"glossary-close\" class=\"glossary-close\" aria-label=\"${t('glossary.close')}\">×</button>\n          </div>\n          <div class=\"glossary-search\">\n            <input \n              type=\"text\" \n              id=\"glossary-search-input\" \n              class=\"glossary-search-input\" \n              placeholder=\"${t('glossary.searchPlaceholder')}\" \n              aria-label=\"${t('glossary.search')}\"\n            >\n          </div>\n          <div class=\"glossary-terms\" id=\"glossary-terms-list\">\n            ${this.renderTermsList()}\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Add to container\n    this.container.innerHTML = glossaryButtonHtml + glossaryModalHtml;\n  }\n\n  /**\n   * Render the list of glossary terms\n   * @returns {string} HTML for the terms list\n   */\n  renderTermsList(searchTerm = '') {\n    // Get translations based on current language\n    const t = (key) => getTranslation(key, this.language);\n\n    // Filter terms based on search\n    const filteredTerms = searchTerm\n      ? this.terms.filter((term) => term.term.toLowerCase().includes(searchTerm.toLowerCase())\n          || term.definition.toLowerCase().includes(searchTerm.toLowerCase()))\n      : this.terms;\n\n    // Sort terms alphabetically\n    filteredTerms.sort((a, b) => a.term.localeCompare(b.term));\n\n    // Group terms by first letter\n    const groupedTerms = filteredTerms.reduce((acc, term) => {\n      const firstLetter = term.term.charAt(0).toUpperCase();\n      if (!acc[firstLetter]) {\n        acc[firstLetter] = [];\n      }\n      acc[firstLetter].push(term);\n      return acc;\n    }, {});\n\n    // Generate HTML\n    let html = '';\n\n    if (filteredTerms.length === 0) {\n      html = `<p class=\"glossary-no-results\">${t('glossary.noResults')}</p>`;\n    } else {\n      Object.keys(groupedTerms).sort().forEach((letter) => {\n        html += `\n          <div class=\"glossary-letter-group\">\n            <h3 class=\"glossary-letter\">${letter}</h3>\n            <dl class=\"glossary-definitions\">\n              ${groupedTerms[letter].map((term) => `\n                <div class=\"glossary-term\">\n                  <dt>${term.term}</dt>\n                  <dd>${term.definition}</dd>\n                </div>\n              `).join('')}\n            </dl>\n          </div>\n        `;\n      });\n    }\n\n    return html;\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    if (!this.container) return;\n\n    // Toggle button\n    const toggleButton = this.container.querySelector('#glossary-toggle');\n    if (toggleButton) {\n      toggleButton.addEventListener('click', () => this.toggleGlossary());\n    }\n\n    // Close button\n    const closeButton = this.container.querySelector('#glossary-close');\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.closeGlossary());\n    }\n\n    // Search input\n    const searchInput = this.container.querySelector('#glossary-search-input');\n    if (searchInput) {\n      searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));\n    }\n\n    // Close on click outside\n    const modal = this.container.querySelector('#glossary-modal');\n    if (modal) {\n      modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n          this.closeGlossary();\n        }\n      });\n    }\n\n    // Close on escape key\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape' && this.isOpen) {\n        this.closeGlossary();\n      }\n    });\n\n    // Add keyboard navigation\n    const modalContent = this.container.querySelector('.glossary-content');\n    if (modalContent) {\n      addKeyboardNavigation(modalContent);\n    }\n  }\n\n  /**\n   * Toggle glossary visibility\n   */\n  toggleGlossary() {\n    if (this.isOpen) {\n      this.closeGlossary();\n    } else {\n      this.openGlossary();\n    }\n  }\n\n  /**\n   * Open the glossary\n   */\n  openGlossary() {\n    const modal = this.container.querySelector('#glossary-modal');\n    const toggleButton = this.container.querySelector('#glossary-toggle');\n\n    if (modal && toggleButton) {\n      modal.classList.add('open');\n      modal.setAttribute('aria-hidden', 'false');\n      toggleButton.setAttribute('aria-expanded', 'true');\n\n      // Focus on search input\n      const searchInput = this.container.querySelector('#glossary-search-input');\n      if (searchInput) {\n        setTimeout(() => searchInput.focus(), 100);\n      }\n\n      this.isOpen = true;\n\n      // Announce to screen readers\n      announceToScreenReader(getTranslation('glossary.opened', this.language));\n    }\n  }\n\n  /**\n   * Close the glossary\n   */\n  closeGlossary() {\n    const modal = this.container.querySelector('#glossary-modal');\n    const toggleButton = this.container.querySelector('#glossary-toggle');\n\n    if (modal && toggleButton) {\n      modal.classList.remove('open');\n      modal.setAttribute('aria-hidden', 'true');\n      toggleButton.setAttribute('aria-expanded', 'false');\n\n      // Return focus to toggle button\n      toggleButton.focus();\n\n      this.isOpen = false;\n\n      // Announce to screen readers\n      announceToScreenReader(getTranslation('glossary.closed', this.language));\n    }\n  }\n\n  /**\n   * Handle search input\n   * @param {string} searchTerm - Search term\n   */\n  handleSearch(searchTerm) {\n    const termsList = this.container.querySelector('#glossary-terms-list');\n    if (termsList) {\n      termsList.innerHTML = this.renderTermsList(searchTerm);\n\n      // Announce search results to screen readers\n      const t = (key) => getTranslation(key, this.language);\n      const filteredTerms = this.terms.filter((term) => term.term.toLowerCase().includes(searchTerm.toLowerCase())\n        || term.definition.toLowerCase().includes(searchTerm.toLowerCase()));\n\n      announceToScreenReader(\n        t('glossary.searchResults').replace('{count}', filteredTerms.length),\n      );\n    }\n  }\n\n  /**\n   * Update language and re-render component\n   * @param {string} language - Language code\n   */\n  updateLanguage(language) {\n    if (this.language !== language) {\n      this.language = language;\n      this.terms = this.getGlossaryTerms();\n      this.render();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * Get glossary terms based on current language\n   * @returns {Array} Array of term objects\n   */\n  getGlossaryTerms() {\n    // Terms are the same for all languages, but could be translated in the future\n    return [\n      {\n        term: 'Amortization',\n        definition: 'The process of spreading out a loan into a series of fixed payments over time. Each payment is allocated between the principal and the interest.',\n      },\n      {\n        term: 'Annual Percentage Rate (APR)',\n        definition: 'The yearly cost of a loan, including interest and fees, expressed as a percentage.',\n      },\n      {\n        term: 'Balloon Payment',\n        definition: 'A large payment due at the end of a loan term, common in certain mortgage and auto loans.',\n      },\n      {\n        term: 'Collateral',\n        definition: 'An asset that a borrower offers as a way for a lender to secure the loan. If the borrower stops making payments, the lender can seize the collateral.',\n      },\n      {\n        term: 'Compound Interest',\n        definition: 'Interest calculated on both the initial principal and the accumulated interest from previous periods.',\n      },\n      {\n        term: 'Down Payment',\n        definition: 'An initial upfront payment made when purchasing an expensive item such as a home or car using a loan.',\n      },\n      {\n        term: 'Equity',\n        definition: 'The difference between the current market value of an asset and the amount owed on it.',\n      },\n      {\n        term: 'Fixed-Rate Loan',\n        definition: 'A loan where the interest rate remains the same throughout the term of the loan.',\n      },\n      {\n        term: 'Grace Period',\n        definition: 'A set period of time after a payment due date during which a late fee will not be charged.',\n      },\n      {\n        term: 'Interest',\n        definition: 'The cost of borrowing money, typically expressed as an annual percentage rate.',\n      },\n      {\n        term: 'Loan Term',\n        definition: 'The period of time during which a borrower makes monthly payments towards a loan.',\n      },\n      {\n        term: 'Loan-to-Value (LTV) Ratio',\n        definition: 'The ratio of a loan amount to the value of the asset purchased, typically expressed as a percentage.',\n      },\n      {\n        term: 'Mortgage',\n        definition: 'A loan used to purchase real estate, where the property serves as collateral.',\n      },\n      {\n        term: 'Principal',\n        definition: 'The original amount of money borrowed in a loan, or the amount still owed, not including interest.',\n      },\n      {\n        term: 'Refinancing',\n        definition: 'The process of replacing an existing loan with a new loan, typically with better terms.',\n      },\n      {\n        term: 'Simple Interest',\n        definition: 'Interest calculated only on the principal amount, not on accumulated interest.',\n      },\n      {\n        term: 'Underwriting',\n        definition: 'The process a lender uses to determine if the risk of offering a loan to a particular borrower under certain parameters is acceptable.',\n      },\n      {\n        term: 'Variable-Rate Loan',\n        definition: 'A loan where the interest rate can change over time, based on an underlying benchmark or index.',\n      },\n      {\n        term: 'Debt-to-Income Ratio',\n        definition: 'A personal finance measure that compares the amount of debt you have to your overall income.',\n      },\n      {\n        term: 'Escrow',\n        definition: 'An account held by a third party on behalf of two other parties in a transaction.',\n      },\n      {\n        term: 'Foreclosure',\n        definition: 'The legal process by which a lender takes control of a property, evicts the homeowner, and sells the home after the homeowner is unable to make full principal and interest payments on their mortgage.',\n      },\n      {\n        term: 'Origination Fee',\n        definition: 'A fee charged by a lender for processing a new loan application, often expressed as a percentage of the loan amount.',\n      },\n      {\n        term: 'Points',\n        definition: 'Fees paid to the lender at closing in exchange for a reduced interest rate. One point equals one percent of the loan amount.',\n      },\n      {\n        term: 'Prepayment Penalty',\n        definition: 'A fee charged by some lenders when a borrower pays off a loan before the end of the loan term.',\n      },\n      {\n        term: 'Private Mortgage Insurance (PMI)',\n        definition: 'Insurance that protects the lender if a borrower stops making payments on a loan. PMI is typically required for loans with a down payment of less than 20%.',\n      },\n    ];\n  }\n}\n\nexport default FinancialGlossary;\n","/**\n * Settings Panel Component\n * Manages application settings and preferences\n * Implements requirements 2.5, 6.3, 6.4\n */\n\nclass SettingsPanel {\n  /**\n   * Create a new settings panel\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement|string} [options.container] - Container element or ID\n   * @param {Function} [options.onThemeChange] - Callback when theme changes\n   * @param {Function} [options.onLanguageChange] - Callback when language changes\n   * @param {Function} [options.onCurrencyChange] - Callback when currency format changes\n   */\n  constructor(options = {}) {\n    this.container = typeof options.container === 'string'\n      ? document.getElementById(options.container)\n      : options.container || document.getElementById('settings-container');\n\n    this.onThemeChange = options.onThemeChange || (() => {});\n    this.onLanguageChange = options.onLanguageChange || (() => {});\n    this.onCurrencyChange = options.onCurrencyChange || (() => {});\n\n    // Default settings\n    this.settings = {\n      theme: 'light',\n      language: 'en',\n      currency: 'USD',\n    };\n\n    // Available options\n    this.availableLanguages = [\n      { code: 'en', name: 'English' },\n      { code: 'es', name: 'Español' },\n    ];\n\n    this.availableCurrencies = [\n      { code: 'USD', symbol: '$', name: 'US Dollar' },\n      { code: 'EUR', symbol: '€', name: 'Euro' },\n      { code: 'GBP', symbol: '£', name: 'British Pound' },\n      { code: 'JPY', symbol: '¥', name: 'Japanese Yen' },\n      { code: 'CAD', symbol: 'C$', name: 'Canadian Dollar' },\n      { code: 'AUD', symbol: 'A$', name: 'Australian Dollar' },\n      { code: 'MXN', symbol: 'MX$', name: 'Mexican Peso' },\n    ];\n\n    // Storage key for settings\n    this.storageKey = 'loan-calculator-settings';\n\n    // Initialize\n    this.init();\n  }\n\n  /**\n   * Initialize the settings panel\n   */\n  init() {\n    // Load saved settings\n    this.loadSettings();\n\n    // Apply current settings\n    this.applyTheme(this.settings.theme);\n\n    // Render the panel\n    this.render();\n\n    console.log('Settings Panel component initialized');\n  }\n\n  /**\n   * Render the settings panel\n   */\n  render() {\n    if (!this.container) {\n      console.error('Settings panel container not found');\n      return;\n    }\n\n    // Create the settings panel structure\n    const panel = document.createElement('div');\n    panel.className = 'settings-panel';\n\n    // Create settings toggle button\n    const toggleButton = document.createElement('button');\n    toggleButton.className = 'settings-toggle';\n    toggleButton.setAttribute('aria-label', 'Open settings');\n    toggleButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n        <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>\n      </svg>\n    `;\n\n    // Create dropdown container\n    const dropdown = document.createElement('div');\n    dropdown.className = 'settings-dropdown';\n    dropdown.setAttribute('aria-hidden', 'true');\n\n    // Add theme toggle section\n    const themeSection = document.createElement('div');\n    themeSection.className = 'settings-section';\n    themeSection.appendChild(this.createThemeToggle());\n    dropdown.appendChild(themeSection);\n\n    // Add language selector section\n    const languageSection = document.createElement('div');\n    languageSection.className = 'settings-section';\n    languageSection.appendChild(this.createLanguageSelector());\n    dropdown.appendChild(languageSection);\n\n    // Add currency selector section\n    const currencySection = document.createElement('div');\n    currencySection.className = 'settings-section';\n    currencySection.appendChild(this.createCurrencySelector());\n    dropdown.appendChild(currencySection);\n\n    // Add toggle button and dropdown to panel\n    panel.appendChild(toggleButton);\n    panel.appendChild(dropdown);\n\n    // Add panel to container\n    this.container.innerHTML = '';\n    this.container.appendChild(panel);\n\n    // Add event listener for toggle button\n    toggleButton.addEventListener('click', () => {\n      const isActive = dropdown.classList.contains('active');\n      dropdown.classList.toggle('active');\n      dropdown.setAttribute('aria-hidden', isActive ? 'true' : 'false');\n      toggleButton.setAttribute('aria-label', isActive ? 'Open settings' : 'Close settings');\n    });\n\n    // Close dropdown when clicking outside\n    document.addEventListener('click', (event) => {\n      if (!panel.contains(event.target) && dropdown.classList.contains('active')) {\n        dropdown.classList.remove('active');\n        dropdown.setAttribute('aria-hidden', 'true');\n        toggleButton.setAttribute('aria-label', 'Open settings');\n      }\n    });\n  }\n\n  /**\n   * Create theme toggle element\n   * @returns {HTMLElement} Theme toggle section\n   */\n  createThemeToggle() {\n    const section = document.createElement('div');\n\n    const heading = document.createElement('h3');\n    heading.textContent = 'Theme';\n    section.appendChild(heading);\n\n    const toggleContainer = document.createElement('div');\n    toggleContainer.className = 'theme-toggle';\n\n    const lightLabel = document.createElement('span');\n    lightLabel.textContent = 'Light';\n\n    const toggleSwitch = document.createElement('label');\n    toggleSwitch.className = 'toggle-switch';\n\n    const checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.checked = this.settings.theme === 'dark';\n    checkbox.setAttribute('aria-label', 'Toggle dark theme');\n\n    const slider = document.createElement('span');\n    slider.className = 'toggle-slider';\n\n    const darkLabel = document.createElement('span');\n    darkLabel.textContent = 'Dark';\n\n    toggleSwitch.appendChild(checkbox);\n    toggleSwitch.appendChild(slider);\n\n    toggleContainer.appendChild(lightLabel);\n    toggleContainer.appendChild(toggleSwitch);\n    toggleContainer.appendChild(darkLabel);\n\n    section.appendChild(toggleContainer);\n\n    // Add event listener\n    checkbox.addEventListener('change', () => {\n      const newTheme = checkbox.checked ? 'dark' : 'light';\n      this.settings.theme = newTheme;\n      this.saveSettings();\n      this.applyTheme(newTheme);\n      this.onThemeChange(newTheme);\n    });\n\n    return section;\n  }\n\n  /**\n   * Create language selector element\n   * @returns {HTMLElement} Language selector section\n   */\n  createLanguageSelector() {\n    const section = document.createElement('div');\n\n    const heading = document.createElement('h3');\n    heading.textContent = 'Language';\n    section.appendChild(heading);\n\n    const select = document.createElement('select');\n    select.className = 'settings-select';\n    select.setAttribute('aria-label', 'Select language');\n\n    // Add language options\n    this.availableLanguages.forEach((lang) => {\n      const option = document.createElement('option');\n      option.value = lang.code;\n      option.textContent = lang.name;\n      option.selected = this.settings.language === lang.code;\n      select.appendChild(option);\n    });\n\n    section.appendChild(select);\n\n    // Add event listener\n    select.addEventListener('change', () => {\n      const newLanguage = select.value;\n      this.settings.language = newLanguage;\n      this.saveSettings();\n      this.onLanguageChange(newLanguage);\n    });\n\n    return section;\n  }\n\n  /**\n   * Create currency selector element\n   * @returns {HTMLElement} Currency selector section\n   */\n  createCurrencySelector() {\n    const section = document.createElement('div');\n\n    const heading = document.createElement('h3');\n    heading.textContent = 'Currency';\n    section.appendChild(heading);\n\n    const select = document.createElement('select');\n    select.className = 'settings-select';\n    select.setAttribute('aria-label', 'Select currency');\n\n    // Add currency options\n    this.availableCurrencies.forEach((currency) => {\n      const option = document.createElement('option');\n      option.value = currency.code;\n      option.textContent = `${currency.symbol} - ${currency.name}`;\n      option.selected = this.settings.currency === currency.code;\n      select.appendChild(option);\n    });\n\n    section.appendChild(select);\n\n    // Add event listener\n    select.addEventListener('change', () => {\n      const newCurrency = select.value;\n      this.settings.currency = newCurrency;\n      this.saveSettings();\n      this.onCurrencyChange(newCurrency);\n    });\n\n    return section;\n  }\n\n  /**\n   * Apply theme to the document\n   * @param {string} theme - Theme name ('light' or 'dark')\n   */\n  applyTheme(theme) {\n    if (theme === 'dark') {\n      document.body.classList.add('dark-theme');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.body.classList.remove('dark-theme');\n      localStorage.setItem('theme', 'light');\n    }\n\n    // Dispatch a custom event for other components to react to theme change\n    const themeChangeEvent = new CustomEvent('themechange', {\n      detail: { theme },\n    });\n    document.dispatchEvent(themeChangeEvent);\n  }\n\n  /**\n   * Load settings from local storage\n   */\n  loadSettings() {\n    try {\n      const savedSettings = localStorage.getItem(this.storageKey);\n      if (savedSettings) {\n        const parsedSettings = JSON.parse(savedSettings);\n        this.settings = {\n          ...this.settings,\n          ...parsedSettings,\n        };\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    }\n  }\n\n  /**\n   * Save settings to local storage\n   */\n  saveSettings() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.settings));\n    } catch (error) {\n      console.error('Error saving settings:', error);\n    }\n  }\n\n  /**\n   * Get current settings\n   * @returns {Object} Current settings object\n   */\n  getSettings() {\n    return { ...this.settings };\n  }\n\n  /**\n   * Update settings\n   * @param {Object} newSettings - New settings to apply\n   */\n  updateSettings(newSettings) {\n    this.settings = {\n      ...this.settings,\n      ...newSettings,\n    };\n\n    // Apply theme if it changed\n    if (newSettings.theme) {\n      this.applyTheme(newSettings.theme);\n    }\n\n    this.saveSettings();\n  }\n}\n\nexport default SettingsPanel;\n","/**\n * Saved Calculations Manager Component\n * Provides UI for viewing, loading, deleting, and comparing saved calculations\n * Implements requirements 1.4, 3.2, 3.3\n */\n\nimport CalculationManagerService from '../services/calculation-manager.service.js';\n\nclass SavedCalculationsManager {\n  /**\n   * Create a new saved calculations manager\n   * @param {Object} options - Configuration options\n   * @param {string} [options.containerId] - ID of the container element\n   * @param {CalculationManagerService} [options.calculationManager] - Calculation manager service\n   * @param {Function} [options.onLoadCalculation] - Callback when a calculation is loaded\n   * @param {Function} [options.onCompareCalculations] - Callback when calculations are compared\n   */\n  constructor(options = {}) {\n    this.containerId = options.containerId || 'saved-calculations-container';\n    this.calculationManager = options.calculationManager || new CalculationManagerService();\n    this.onLoadCalculation = options.onLoadCalculation || (() => {});\n    this.onCompareCalculations = options.onCompareCalculations || (() => {});\n\n    this.container = null;\n    this.calculationsList = null;\n    this.comparisonView = null;\n    this.isComparisonMode = false;\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the component\n   */\n  initialize() {\n    // Find or create the container\n    this.container = document.getElementById(this.containerId);\n    if (!this.container) {\n      console.error(`Container with ID \"${this.containerId}\" not found`);\n      return;\n    }\n\n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Render the component\n   */\n  render() {\n    // Clear the container\n    this.container.innerHTML = '';\n\n    // Create the main structure\n    const template = `\n      <div class=\"saved-calculations-manager\">\n        <div class=\"saved-calculations-header\">\n          <h2>Saved Calculations</h2>\n          <div class=\"saved-calculations-actions\">\n            <button id=\"compare-button\" class=\"btn btn-secondary\" disabled>Compare Selected</button>\n            <button id=\"clear-selection-button\" class=\"btn btn-outline-secondary\" disabled>Clear Selection</button>\n          </div>\n        </div>\n        \n        <div class=\"saved-calculations-content\">\n          <div id=\"saved-calculations-list\" class=\"saved-calculations-list\">\n            <p class=\"empty-state-message\">No saved calculations yet. Save a calculation to see it here.</p>\n          </div>\n          \n          <div id=\"comparison-view\" class=\"comparison-view\" style=\"display: none;\">\n            <div class=\"comparison-header\">\n              <h3>Comparison</h3>\n              <button id=\"close-comparison-button\" class=\"btn btn-outline-secondary\">Close</button>\n            </div>\n            <div id=\"comparison-content\" class=\"comparison-content\"></div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.container.innerHTML = template;\n\n    // Store references to elements\n    this.calculationsList = document.getElementById('saved-calculations-list');\n    this.comparisonView = document.getElementById('comparison-view');\n    this.comparisonContent = document.getElementById('comparison-content');\n    this.compareButton = document.getElementById('compare-button');\n    this.clearSelectionButton = document.getElementById('clear-selection-button');\n\n    // Load saved calculations\n    this.loadCalculations();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  attachEventListeners() {\n    // Compare button\n    const compareButton = document.getElementById('compare-button');\n    if (compareButton) {\n      compareButton.addEventListener('click', () => this.showComparison());\n    }\n\n    // Clear selection button\n    const clearSelectionButton = document.getElementById('clear-selection-button');\n    if (clearSelectionButton) {\n      clearSelectionButton.addEventListener('click', () => this.clearSelection());\n    }\n\n    // Close comparison button\n    const closeComparisonButton = document.getElementById('close-comparison-button');\n    if (closeComparisonButton) {\n      closeComparisonButton.addEventListener('click', () => this.hideComparison());\n    }\n  }\n\n  /**\n   * Load and display saved calculations\n   */\n  loadCalculations() {\n    const calculations = this.calculationManager.getAllCalculations();\n\n    if (calculations.length === 0) {\n      // Show empty state\n      this.calculationsList.innerHTML = `\n        <p class=\"empty-state-message\">No saved calculations yet. Save a calculation to see it here.</p>\n      `;\n      return;\n    }\n\n    // Clear the list\n    this.calculationsList.innerHTML = '';\n\n    // Create a card for each calculation\n    calculations.forEach((calc) => {\n      const card = this.createCalculationCard(calc);\n      this.calculationsList.appendChild(card);\n    });\n\n    // Update button states\n    this.updateButtonStates();\n  }\n\n  /**\n   * Create a card element for a calculation\n   * @param {Object} calculation - Calculation object\n   * @returns {HTMLElement} Card element\n   */\n  createCalculationCard(calculation) {\n    const { loan, savedAt, isSelected } = calculation;\n\n    // Format currency\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    });\n\n    const card = document.createElement('div');\n    card.className = `calculation-card ${isSelected ? 'selected' : ''}`;\n    card.dataset.id = loan.id;\n\n    card.innerHTML = `\n      <div class=\"calculation-card-header\">\n        <h3 class=\"calculation-name\">${loan.name || 'Unnamed Calculation'}</h3>\n        <div class=\"calculation-date\">${calculation.formattedDate}</div>\n      </div>\n      \n      <div class=\"calculation-card-content\">\n        <div class=\"calculation-details\">\n          <div class=\"detail-row\">\n            <span class=\"detail-label\">Loan Amount:</span>\n            <span class=\"detail-value\">${formatter.format(loan.totalLoanAmount)}</span>\n          </div>\n          <div class=\"detail-row\">\n            <span class=\"detail-label\">Interest Rate:</span>\n            <span class=\"detail-value\">${loan.interestRate}%</span>\n          </div>\n          <div class=\"detail-row\">\n            <span class=\"detail-label\">Term:</span>\n            <span class=\"detail-value\">${loan.term} months</span>\n          </div>\n          <div class=\"detail-row\">\n            <span class=\"detail-label\">Payment:</span>\n            <span class=\"detail-value\">${formatter.format(loan.paymentAmount)}</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"calculation-card-actions\">\n        <button class=\"btn btn-primary load-btn\">Load</button>\n        <button class=\"btn btn-outline-danger delete-btn\">Delete</button>\n        <div class=\"select-calculation\">\n          <input type=\"checkbox\" id=\"select-${loan.id}\" class=\"select-checkbox\" ${isSelected ? 'checked' : ''}>\n          <label for=\"select-${loan.id}\">Select for comparison</label>\n        </div>\n      </div>\n    `;\n\n    // Add event listeners\n    const loadBtn = card.querySelector('.load-btn');\n    loadBtn.addEventListener('click', () => this.loadCalculation(loan.id));\n\n    const deleteBtn = card.querySelector('.delete-btn');\n    deleteBtn.addEventListener('click', () => this.deleteCalculation(loan.id));\n\n    const selectCheckbox = card.querySelector('.select-checkbox');\n    selectCheckbox.addEventListener('change', (e) => {\n      if (e.target.checked) {\n        this.selectCalculation(loan.id, card);\n      } else {\n        this.deselectCalculation(loan.id, card);\n      }\n    });\n\n    return card;\n  }\n\n  /**\n   * Load a calculation\n   * @param {string} id - Calculation ID\n   */\n  loadCalculation(id) {\n    const calculation = this.calculationManager.getCalculation(id);\n    if (calculation) {\n      this.onLoadCalculation(calculation);\n    }\n  }\n\n  /**\n   * Delete a calculation\n   * @param {string} id - Calculation ID\n   */\n  deleteCalculation(id) {\n    if (confirm('Are you sure you want to delete this calculation?')) {\n      const success = this.calculationManager.deleteCalculation(id);\n      if (success) {\n        this.loadCalculations();\n      }\n    }\n  }\n\n  /**\n   * Select a calculation for comparison\n   * @param {string} id - Calculation ID\n   * @param {HTMLElement} card - Card element\n   */\n  selectCalculation(id, card) {\n    const success = this.calculationManager.selectCalculation(id);\n\n    if (!success) {\n      // If selection failed (e.g., max comparisons reached), uncheck the checkbox\n      const checkbox = card.querySelector('.select-checkbox');\n      checkbox.checked = false;\n\n      alert(`You can only select up to ${this.calculationManager.maxComparisons} calculations for comparison.`);\n      return;\n    }\n\n    // Add selected class to card\n    card.classList.add('selected');\n\n    // Update button states\n    this.updateButtonStates();\n  }\n\n  /**\n   * Deselect a calculation\n   * @param {string} id - Calculation ID\n   * @param {HTMLElement} card - Card element\n   */\n  deselectCalculation(id, card) {\n    this.calculationManager.deselectCalculation(id);\n\n    // Remove selected class from card\n    card.classList.remove('selected');\n\n    // Update button states\n    this.updateButtonStates();\n  }\n\n  /**\n   * Clear all selected calculations\n   */\n  clearSelection() {\n    this.calculationManager.clearSelection();\n\n    // Update UI\n    const selectedCards = this.calculationsList.querySelectorAll('.calculation-card.selected');\n    selectedCards.forEach((card) => {\n      card.classList.remove('selected');\n      const checkbox = card.querySelector('.select-checkbox');\n      checkbox.checked = false;\n    });\n\n    // Update button states\n    this.updateButtonStates();\n  }\n\n  /**\n   * Update button states based on selection\n   */\n  updateButtonStates() {\n    const selectedCount = this.calculationManager.selectedCalculations.length;\n\n    // Compare button\n    this.compareButton.disabled = selectedCount < 2;\n\n    // Clear selection button\n    this.clearSelectionButton.disabled = selectedCount === 0;\n  }\n\n  /**\n   * Show comparison view\n   */\n  showComparison() {\n    const result = this.calculationManager.compareCalculations();\n\n    if (!result.success) {\n      alert(result.message);\n      return;\n    }\n\n    // Switch to comparison mode\n    this.isComparisonMode = true;\n    this.calculationsList.style.display = 'none';\n    this.comparisonView.style.display = 'block';\n\n    // Render comparison\n    this.renderComparison(result.comparison);\n\n    // Notify parent component\n    this.onCompareCalculations(result.comparison);\n  }\n\n  /**\n   * Hide comparison view\n   */\n  hideComparison() {\n    // Switch back to list mode\n    this.isComparisonMode = false;\n    this.calculationsList.style.display = 'block';\n    this.comparisonView.style.display = 'none';\n  }\n\n  /**\n   * Render comparison view\n   * @param {Object} comparison - Comparison data\n   */\n  renderComparison(comparison) {\n    const { calculations, metrics, differences } = comparison;\n\n    // Format currency\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    });\n\n    // Create table header\n    let tableHtml = `\n      <table class=\"comparison-table\">\n        <thead>\n          <tr>\n            <th>Metric</th>\n            ${metrics.map((m) => `<th>${m.name || 'Unnamed'}</th>`).join('')}\n          </tr>\n        </thead>\n        <tbody>\n    `;\n\n    // Add rows for each metric\n    const metricRows = [\n      { label: 'Loan Amount', key: 'loanAmount', format: (val) => formatter.format(val) },\n      { label: 'Interest Rate', key: 'interestRate', format: (val) => `${val}%` },\n      { label: 'Term', key: 'term', format: (val) => `${val} months` },\n      { label: 'Payment Frequency', key: 'paymentFrequency', format: (val) => val },\n      { label: 'Payment Amount', key: 'paymentAmount', format: (val) => formatter.format(val) },\n      { label: 'Total Interest', key: 'totalInterest', format: (val) => formatter.format(val) },\n      { label: 'Total Payment', key: 'totalPayment', format: (val) => formatter.format(val) },\n    ];\n\n    metricRows.forEach((row) => {\n      tableHtml += `\n        <tr>\n          <td>${row.label}</td>\n          ${metrics.map((m) => `<td>${row.format(m[row.key])}</td>`).join('')}\n        </tr>\n      `;\n    });\n\n    // Add difference rows if there are multiple calculations\n    if (metrics.length > 1) {\n      tableHtml += `\n        <tr class=\"comparison-separator\">\n          <td colspan=\"${metrics.length + 1}\">Differences (compared to ${metrics[0].name || 'first calculation'})</td>\n        </tr>\n      `;\n\n      // Skip the first calculation (baseline)\n      for (let i = 1; i < metrics.length; i++) {\n        const metric = metrics[i];\n        const diff = differences[metric.id];\n\n        if (diff) {\n          tableHtml += `\n            <tr>\n              <td>Monthly Payment Difference</td>\n              ${Array(i).fill('<td></td>').join('')}\n              <td class=\"${diff.paymentDifference < 0 ? 'positive' : 'negative'}\">${formatter.format(diff.paymentDifference)}</td>\n              ${Array(metrics.length - i - 1).fill('<td></td>').join('')}\n            </tr>\n            <tr>\n              <td>Total Interest Difference</td>\n              ${Array(i).fill('<td></td>').join('')}\n              <td class=\"${diff.interestDifference < 0 ? 'positive' : 'negative'}\">${formatter.format(diff.interestDifference)}</td>\n              ${Array(metrics.length - i - 1).fill('<td></td>').join('')}\n            </tr>\n            <tr>\n              <td>Total Payment Difference</td>\n              ${Array(i).fill('<td></td>').join('')}\n              <td class=\"${diff.totalPaymentDifference < 0 ? 'positive' : 'negative'}\">${formatter.format(diff.totalPaymentDifference)}</td>\n              ${Array(metrics.length - i - 1).fill('<td></td>').join('')}\n            </tr>\n          `;\n        }\n      }\n    }\n\n    tableHtml += `\n        </tbody>\n      </table>\n    `;\n\n    this.comparisonContent.innerHTML = tableHtml;\n  }\n\n  /**\n   * Refresh the component\n   */\n  refresh() {\n    this.loadCalculations();\n  }\n}\n\nexport default SavedCalculationsManager;\n"],"names":["constructor","options","this","container","document","getElementById","language","currentLoanType","loanType","currentRate","onRateSelect","marketRatesData","mortgage","average","min","max","trend","lastUpdated","Date","auto","personal","student","init","render","bindEvents","t","key","getTranslation","ratesData","locale","formatters","formattedDate","toLocaleDateString","year","month","day","trendIcon","getTrendIcon","marketRatesHtml","toFixed","getRateComparisonClass","formatRateDifference","innerHTML","useAverageRateButton","querySelector","addEventListener","averageRate","difference","Math","abs","updateLoanType","LOAN_TYPES","updateCurrentRate","rate","updateLanguage","onCalculate","validators","principal","interestRate","term","downPayment","additionalPayment","inflationRate","formData","Loan","createDefault","toJSON","undefined","marketRatesComponent","initMarketRates","handleCalculate","marketRatesContainer","MarketRates","type","interestRateInput","interestRateSlider","value","formHtml","Object","entries","map","translationKey","description","join","minAmount","maxAmount","currency","PAYMENT_FREQUENCIES","paymentFrequency","startDate","toISOString","split","form","e","preventDefault","calculateButton","animationManager","createRippleEffect","resetButton","reset","loanTypeSelect","target","updateLoanTypeParameters","bindSliderInputSync","querySelectorAll","forEach","preset","parseInt","dataset","termInput","termSlider","validateField","input","field","name","id","downPaymentInput","downPaymentSlider","parseFloat","inputEvent","Event","dispatchEvent","initTooltips","initFloatingLabels","fieldName","slider","typeDefaults","principalInput","principalSlider","rangeValues","parentElement","currentValue","defaultTerm","defaultRate","validator","isValid","errorMessage","getFieldErrorMessage","error","message","errorElement","classList","remove","textContent","add","numValue","isNaN","toLocaleString","validate","fieldValid","getFormData","showFormError","loadingManager","showProgressOverlay","label","status","title","cancellable","disabled","setAttribute","updateProgress","loan","fromJSON","updateStepStatus","Promise","resolve","setTimeout","hideProgressOverlay","originalText","getAttribute","existingError","errorContainer","createElement","className","insertBefore","firstChild","parentNode","setFormData","data","dateString","defaultLoan","updateCurrencyFormat","nextElementSibling","contains","updateFloatingLabel","hasValue","trim","isSelect","tagName","toLowerCase","isDate","monthly","paymentsPerYear","weekly","generateUniqueId","validateLoanType","validateNumber","validatePaymentFrequency","createdAt","updatedAt","totalLoanAmount","numberOfPayments","ceil","periodicInterestRate","paymentAmount","P","r","n","totalInterest","payoffDate","setMonth","getMonth","setDate","getDate","now","floor","random","validTypes","keys","Error","frequency","validFrequencies","defaultValue","num","warnings","push","length","update","updates","updatedLoan","getTime","calculateAdditionalPaymentImpact","baselineLoan","enhancedLoan","then","AmortizationSchedule","baselineSchedule","enhancedSchedule","paymentsSaved","payments","baselineInterest","enhancedInterest","interestSaved","timeSavedMonths","timeSavedYears","round","newPayoffDate","originalTerm","newTerm","originalPayment","newPayment","originalTotalInterest","newTotalInterest","calculateRefinance","newLoanOptions","currentSchedule","currentBalance","balance","refinanceOptions","newLoan","newSchedule","remainingPayments","remainingInterest","newPayments","newInterest","oldPayment","monthlySavings","closingCosts","currentTotalCost","newTotalCost","lifetimeSavings","breakEvenMonths","Infinity","currentLoan","payment","remainingBalance","totalCost","totalPayments","comparison","isWorthwhile","refinanceLoan","json","parsedJson","defaults","calculateAffordableLoan","desiredPayment","tempLoan","affordablePrincipal","totalPurchasePrice","affordableLoan","monthlyPayment","calculatorForm","resultsDisplay","initializeTooltips","guidanceHtml","tutorialButton","startTutorial","guidanceButton","showGuidance","addFormTooltips","addResultsTooltips","formContainer","addTooltipToField","fieldId","tooltipKey","position","infoIcon","appendChild","resultsContainer","addTooltipToResult","selector","element","tutorialSteps","content","createTutorial","showGuidancePanel","guidanceContent","panelContainer","body","createGuidancePanel","containerId","percentage","number","date","duration","onSave","charts","Charts","_initEventListeners","saveButton","exportButton","_currentLoan","_currentAmortizationSchedule","calculationResults","hideLoading","amortizationSchedule","inflationAdjusted","comparisonScenarios","summary","loanAmount","totalPayment","totalInflationAdjustedPayment","totalInflationAdjustedInterest","savingsFromInflation","breakdown","interest","total","interestRatio","principalRatio","displaySummary","displayPaymentBreakdown","clear","renderPrincipalVsInterestChart","renderPaymentBreakdownPieChart","scenarios","scenario","renderComparisonChart","style","display","_animateResultsReveal","summaryContainer","formattedValues","inflationSection","inflationValues","totalAdjustedPayment","savingsPercentage","summaryHtml","_addInterestRateIndicator","interestRateElement","breakdownContainer","breakdownHtml","showLoading","summarySkeleton","showSkeleton","items","breakdownSkeleton","chartsContainer","chartsSkeleton","legend","hideSkeleton","updateResults","respectfulAnimate","el","opacity","transform","queueAnimation","header","transition","animateResultsReveal","stagger","delay","chart","transformOrigin","_animateProgressBars","item","index","animateChartReveal","_addMicroInteractions","principalBar","interestBar","targetWidth","width","addHoverAnimations","text","numericMatch","match","numericValue","replace","animateNumber","formatter","formatted","button","event","indicator","animation","autoGenerate","isGenerating","generationProgress","generateSchedule","generateScheduleAsync","includeAdditionalPayments","onProgress","timeout","batchSize","periodicRate","regularPayment","maxPayments","paymentNumber","currentDate","paymentInterval","getPaymentInterval","startTime","interestPayment","principalPayment","Payment","estimatedTotalPayments","advanceDate","days","interval","reduce","sum","amount","loanId","Array","isArray","schedule","paymentJson","getFullYear","cumulativePrincipal","cumulativeInterest","colorScheme","chartInstances","principalVsInterest","paymentBreakdown","theme","_createChartContainers","principalInterestContainer","paymentBreakdownContainer","comparisonContainer","inflationImpactContainer","window","_resizeCharts","values","resize","chartContainer","canvas","sampleInterval","sampledPayments","filter","_","labels","principalData","interestData","balanceData","destroy","Chart","datasets","backgroundColor","borderColor","borderWidth","fill","tension","responsive","maintainAspectRatio","plugins","tooltip","mode","intersect","callbacks","context","parsed","y","Intl","NumberFormat","format","boxWidth","padding","scales","x","ticks","maxTicksLimit","callback","maximumFractionDigits","_applyChartTheme","_animateChartReveal","raw","a","b","updateChartTheme","isDark","textColor","gridColor","scale","color","grid","config","renderInflationImpactChart","nominalPayments","originalAmount","inflationAdjustedPayments","inflationAdjustedAmount","inflationImpact","legendContainer","savings","originalTotal","totalOriginalPayment","adjustedTotal","chartType","_addChartSpecificAnimations","prefersReducedMotion","boxShadow","_animatePrincipalInterestChart","_animatePaymentBreakdownChart","setInterval","isOpen","terms","getGlossaryTerms","glossaryButtonHtml","glossaryModalHtml","renderTermsList","searchTerm","filteredTerms","includes","definition","sort","localeCompare","groupedTerms","acc","firstLetter","charAt","toUpperCase","html","letter","toggleButton","toggleGlossary","closeButton","closeGlossary","searchInput","handleSearch","modal","modalContent","addKeyboardNavigation","openGlossary","focus","announceToScreenReader","termsList","onThemeChange","onLanguageChange","onCurrencyChange","settings","availableLanguages","code","availableCurrencies","symbol","storageKey","loadSettings","applyTheme","panel","dropdown","themeSection","createThemeToggle","languageSection","createLanguageSelector","currencySection","createCurrencySelector","isActive","toggle","section","heading","toggleContainer","lightLabel","toggleSwitch","checkbox","checked","darkLabel","newTheme","saveSettings","select","lang","option","selected","newLanguage","newCurrency","localStorage","setItem","themeChangeEvent","CustomEvent","detail","savedSettings","getItem","parsedSettings","JSON","parse","stringify","getSettings","updateSettings","newSettings","calculationManager","CalculationManagerService","onLoadCalculation","onCompareCalculations","calculationsList","comparisonView","isComparisonMode","initialize","attachEventListeners","comparisonContent","compareButton","clearSelectionButton","loadCalculations","showComparison","clearSelection","closeComparisonButton","hideComparison","calculations","getAllCalculations","calc","card","createCalculationCard","updateButtonStates","calculation","savedAt","isSelected","loadCalculation","deleteCalculation","selectCalculation","deselectCalculation","getCalculation","confirm","alert","maxComparisons","selectedCount","selectedCalculations","result","compareCalculations","success","renderComparison","metrics","differences","tableHtml","m","val","row","i","diff","paymentDifference","interestDifference","totalPaymentDifference","refresh"],"sourceRoot":""}