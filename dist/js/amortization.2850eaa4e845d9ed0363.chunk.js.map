{"version":3,"file":"js/amortization.2850eaa4e845d9ed0363.chunk.js","mappings":"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","sources":["webpack://loan-calculator/./src/js/components/amortization-table.js"],"sourcesContent":["/**\n * Amortization Table Component\n * Displays detailed payment schedule\n * Implements requirement 2.2\n */\n\nimport * as formatters from '../utils/formatters.js';\nimport animationManager from '../utils/animation-manager.js';\n\nclass AmortizationTable {\n  /**\n   * Create a new amortization table component\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement} [options.container] - Container element\n   * @param {Object} [options.formatters] - Custom formatters\n   * @param {number} [options.pageSize] - Number of items per page\n   */\n  constructor(options = {}) {\n    this.container = options.container || document.getElementById('amortization-table');\n    this.formatters = {\n      currency: formatters.formatCurrency,\n      percentage: formatters.formatPercentage,\n      number: formatters.formatNumber,\n      date: formatters.formatDate,\n      ...options.formatters,\n    };\n    this.pageSize = options.pageSize || 12;\n    this.currentPage = 1;\n    this.sortColumn = 'number';\n    this.sortDirection = 'asc';\n    this.filters = {};\n    this.currentData = [];\n\n    this.init();\n  }\n\n  /**\n   * Initialize the component\n   */\n  init() {\n    if (!this.container) {\n      console.error('Amortization table container not found');\n      return;\n    }\n\n    // Create filter controls\n    this.createFilterControls();\n  }\n\n  /**\n   * Create filter controls for the table\n   */\n  createFilterControls() {\n    const filterControls = document.createElement('div');\n    filterControls.className = 'filter-controls';\n    filterControls.innerHTML = `\n      <div class=\"filter-row\">\n        <div class=\"filter-group\">\n          <label for=\"year-filter\">Filter by Year:</label>\n          <select id=\"year-filter\">\n            <option value=\"\">All Years</option>\n          </select>\n        </div>\n        <div class=\"filter-group\">\n          <label for=\"payment-range\">Payment Range:</label>\n          <input type=\"number\" id=\"min-payment\" placeholder=\"Min\" min=\"0\" step=\"100\">\n          <span>to</span>\n          <input type=\"number\" id=\"max-payment\" placeholder=\"Max\" min=\"0\" step=\"100\">\n        </div>\n        <button id=\"apply-filters\" class=\"btn-filter\">Apply Filters</button>\n        <button id=\"reset-filters\" class=\"btn-filter\">Reset</button>\n      </div>\n    `;\n\n    // Add event listeners for filter controls\n    const applyButton = filterControls.querySelector('#apply-filters');\n    const resetButton = filterControls.querySelector('#reset-filters');\n\n    if (applyButton) {\n      applyButton.addEventListener('click', () => this.applyFilters());\n    }\n\n    if (resetButton) {\n      resetButton.addEventListener('click', () => this.resetFilters());\n    }\n\n    // Store filter controls for later use\n    this.filterControls = filterControls;\n  }\n\n  /**\n   * Apply filters to the table data\n   */\n  applyFilters() {\n    if (!this.filterControls) return;\n\n    const yearFilter = this.filterControls.querySelector('#year-filter').value;\n    const minPayment = parseFloat(this.filterControls.querySelector('#min-payment').value) || 0;\n    const maxPayment = parseFloat(this.filterControls.querySelector('#max-payment').value) || Infinity;\n\n    this.filters = {};\n\n    if (yearFilter) {\n      this.filters.year = parseInt(yearFilter);\n    }\n\n    if (minPayment > 0 || maxPayment < Infinity) {\n      this.filters.paymentRange = { min: minPayment, max: maxPayment };\n    }\n\n    // Re-render with current data and new filters\n    if (this.currentData.length > 0) {\n      this.render({ payments: this.currentData });\n    }\n  }\n\n  /**\n   * Reset all filters\n   */\n  resetFilters() {\n    if (!this.filterControls) return;\n\n    // Reset filter form\n    this.filterControls.querySelector('#year-filter').value = '';\n    this.filterControls.querySelector('#min-payment').value = '';\n    this.filterControls.querySelector('#max-payment').value = '';\n\n    // Clear filters object\n    this.filters = {};\n\n    // Re-render with current data\n    if (this.currentData.length > 0) {\n      this.render({ payments: this.currentData });\n    }\n  }\n\n  /**\n   * Update year filter options based on available data\n   * @param {Array} payments - Payment data\n   */\n  updateYearFilterOptions(payments) {\n    if (!this.filterControls) return;\n\n    const yearFilter = this.filterControls.querySelector('#year-filter');\n    if (!yearFilter) return;\n\n    // Clear existing options except the first one\n    while (yearFilter.options.length > 1) {\n      yearFilter.remove(1);\n    }\n\n    // Get unique years from payments\n    const years = [...new Set(payments.map((payment) => payment.date.getFullYear()))].sort();\n\n    // Add year options\n    years.forEach((year) => {\n      const option = document.createElement('option');\n      option.value = year;\n      option.textContent = year;\n      yearFilter.appendChild(option);\n    });\n  }\n\n  /**\n   * Show loading skeleton while data is being processed\n   */\n  showLoadingSkeleton() {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"table-container\">\n        <table class=\"skeleton-table\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Date</th>\n              <th>Payment</th>\n              <th>Principal</th>\n              <th>Interest</th>\n              <th>Remaining Balance</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${Array.from({ length: 8 }, (_, i) => `\n              <tr class=\"skeleton-row\">\n                <td><div class=\"skeleton-cell short\"></div></td>\n                <td><div class=\"skeleton-cell medium\"></div></td>\n                <td><div class=\"skeleton-cell long\"></div></td>\n                <td><div class=\"skeleton-cell long\"></div></td>\n                <td><div class=\"skeleton-cell long\"></div></td>\n                <td><div class=\"skeleton-cell long\"></div></td>\n              </tr>\n            `).join('')}\n          </tbody>\n        </table>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the amortization schedule\n   * @param {Object} amortizationSchedule - Amortization schedule object\n   */\n  render(amortizationSchedule) {\n    if (!this.container) {\n      return;\n    }\n\n    // Show loading skeleton if no data yet\n    if (!amortizationSchedule || !amortizationSchedule.payments || amortizationSchedule.payments.length === 0) {\n      this.showLoadingSkeleton();\n      return;\n    }\n\n    // Store the full data set\n    this.currentData = amortizationSchedule.payments || [];\n\n    // Clear the container\n    this.container.innerHTML = '';\n\n    // Add filter controls\n    this.container.appendChild(this.filterControls);\n\n    // Update year filter options\n    this.updateYearFilterOptions(this.currentData);\n\n    // Create table container\n    const tableContainer = document.createElement('div');\n    tableContainer.className = 'table-container';\n\n    // Create table\n    const table = document.createElement('table');\n    table.className = 'table table-responsive';\n\n    // Create table header\n    const tableHeader = this.createTableHeader();\n    table.appendChild(tableHeader);\n\n    // Filter and sort data\n    const filteredData = this.filterData(this.currentData, this.filters);\n    const sortedData = this.sortData(filteredData, this.sortColumn, this.sortDirection);\n\n    // Paginate data\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    const endIndex = startIndex + this.pageSize;\n    const paginatedData = sortedData.slice(startIndex, endIndex);\n\n    // Create table body\n    const tableBody = this.createTableBody(paginatedData);\n    table.appendChild(tableBody);\n\n    // Add table to container\n    tableContainer.appendChild(table);\n    this.container.appendChild(tableContainer);\n\n    // Create pagination\n    this.createPagination(sortedData.length);\n\n    // Add highlighting for key information\n    this.highlightKeyInformation();\n\n    // Animate table reveal\n    this._animateTableReveal(table, paginatedData.length);\n  }\n\n  /**\n   * Create the table header\n   * @returns {HTMLTableSectionElement} Table header element\n   */\n  createTableHeader() {\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n\n    // Define columns\n    const columns = [\n      { id: 'number', label: '#', sortable: true },\n      { id: 'date', label: 'Date', sortable: true },\n      { id: 'amount', label: 'Payment', sortable: true },\n      { id: 'principal', label: 'Principal', sortable: true },\n      { id: 'interest', label: 'Interest', sortable: true },\n      { id: 'balance', label: 'Remaining Balance', sortable: true },\n    ];\n\n    // Create header cells\n    columns.forEach((column) => {\n      const th = document.createElement('th');\n      th.textContent = column.label;\n\n      if (column.sortable) {\n        th.className = 'sortable';\n\n        // Add sort indicator if this is the current sort column\n        if (column.id === this.sortColumn) {\n          th.classList.add(this.sortDirection === 'asc' ? 'sorted-asc' : 'sorted-desc');\n        }\n\n        // Add click event for sorting\n        th.addEventListener('click', () => {\n          // Toggle direction if already sorting by this column\n          if (this.sortColumn === column.id) {\n            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n          } else {\n            this.sortColumn = column.id;\n            this.sortDirection = 'asc';\n          }\n\n          // Re-render with new sort\n          this.render({ payments: this.currentData });\n        });\n      }\n\n      headerRow.appendChild(th);\n    });\n\n    thead.appendChild(headerRow);\n    return thead;\n  }\n\n  /**\n   * Create the table body\n   * @param {Array} payments - Payment data\n   * @returns {HTMLTableSectionElement} Table body element\n   */\n  createTableBody(payments) {\n    const tbody = document.createElement('tbody');\n\n    if (!payments || payments.length === 0) {\n      const emptyRow = document.createElement('tr');\n      const emptyCell = document.createElement('td');\n      emptyCell.colSpan = 6;\n      emptyCell.textContent = 'No payment data available';\n      emptyCell.className = 'empty-table-message';\n      emptyRow.appendChild(emptyCell);\n      tbody.appendChild(emptyRow);\n      return tbody;\n    }\n\n    // Create rows for each payment\n    payments.forEach((payment) => {\n      const row = document.createElement('tr');\n\n      // Add data cells\n      const cells = [\n        { value: payment.number },\n        { value: this.formatters.date(payment.date) },\n        { value: this.formatters.currency(payment.amount), raw: payment.amount },\n        { value: this.formatters.currency(payment.principal), raw: payment.principal },\n        { value: this.formatters.currency(payment.interest), raw: payment.interest },\n        { value: this.formatters.currency(payment.balance), raw: payment.balance },\n      ];\n\n      cells.forEach((cell, index) => {\n        const td = document.createElement('td');\n        td.textContent = cell.value;\n\n        // Add data attributes for sorting and filtering\n        if (cell.raw !== undefined) {\n          td.setAttribute('data-value', cell.raw);\n        }\n\n        // Add class for the column type\n        const columnTypes = ['number', 'date', 'amount', 'principal', 'interest', 'balance'];\n        td.classList.add(`col-${columnTypes[index]}`);\n\n        row.appendChild(td);\n      });\n\n      // Add data attributes to the row for filtering\n      row.setAttribute('data-payment-number', payment.number);\n      row.setAttribute('data-payment-year', payment.date.getFullYear());\n      row.setAttribute('data-payment-month', payment.date.getMonth() + 1);\n\n      tbody.appendChild(row);\n    });\n\n    return tbody;\n  }\n\n  /**\n   * Create pagination controls\n   * @param {number} totalItems - Total number of items\n   */\n  createPagination(totalItems) {\n    if (!this.container) return;\n\n    // Calculate total pages\n    const totalPages = Math.ceil(totalItems / this.pageSize);\n\n    // Don't show pagination if only one page\n    if (totalPages <= 1) {\n      return;\n    }\n\n    // Create pagination container\n    const pagination = document.createElement('div');\n    pagination.className = 'pagination';\n\n    // Previous button\n    const prevButton = document.createElement('div');\n    prevButton.className = 'pagination-item';\n    prevButton.textContent = '«';\n    prevButton.addEventListener('click', () => {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.render({ payments: this.currentData });\n      }\n    });\n    pagination.appendChild(prevButton);\n\n    // Page numbers\n    const maxVisiblePages = 5;\n    let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));\n    const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n\n    // Adjust start page if we're near the end\n    if (endPage - startPage + 1 < maxVisiblePages) {\n      startPage = Math.max(1, endPage - maxVisiblePages + 1);\n    }\n\n    // First page button if not visible\n    if (startPage > 1) {\n      const firstPageButton = document.createElement('div');\n      firstPageButton.className = 'pagination-item';\n      firstPageButton.textContent = '1';\n      firstPageButton.addEventListener('click', () => {\n        this.currentPage = 1;\n        this.render({ payments: this.currentData });\n      });\n      pagination.appendChild(firstPageButton);\n\n      // Ellipsis if needed\n      if (startPage > 2) {\n        const ellipsis = document.createElement('div');\n        ellipsis.className = 'pagination-ellipsis';\n        ellipsis.textContent = '...';\n        pagination.appendChild(ellipsis);\n      }\n    }\n\n    // Page buttons\n    for (let i = startPage; i <= endPage; i++) {\n      const pageButton = document.createElement('div');\n      pageButton.className = 'pagination-item';\n      if (i === this.currentPage) {\n        pageButton.classList.add('active');\n      }\n      pageButton.textContent = i;\n      pageButton.addEventListener('click', () => {\n        this.currentPage = i;\n        this.render({ payments: this.currentData });\n      });\n      pagination.appendChild(pageButton);\n    }\n\n    // Last page button if not visible\n    if (endPage < totalPages) {\n      // Ellipsis if needed\n      if (endPage < totalPages - 1) {\n        const ellipsis = document.createElement('div');\n        ellipsis.className = 'pagination-ellipsis';\n        ellipsis.textContent = '...';\n        pagination.appendChild(ellipsis);\n      }\n\n      const lastPageButton = document.createElement('div');\n      lastPageButton.className = 'pagination-item';\n      lastPageButton.textContent = totalPages;\n      lastPageButton.addEventListener('click', () => {\n        this.currentPage = totalPages;\n        this.render({ payments: this.currentData });\n      });\n      pagination.appendChild(lastPageButton);\n    }\n\n    // Next button\n    const nextButton = document.createElement('div');\n    nextButton.className = 'pagination-item';\n    nextButton.textContent = '»';\n    nextButton.addEventListener('click', () => {\n      if (this.currentPage < totalPages) {\n        this.currentPage++;\n        this.render({ payments: this.currentData });\n      }\n    });\n    pagination.appendChild(nextButton);\n\n    // Add pagination to container\n    this.container.appendChild(pagination);\n  }\n\n  /**\n   * Sort data by column\n   * @param {Array} data - Data to sort\n   * @param {string} column - Column to sort by\n   * @param {string} direction - Sort direction ('asc' or 'desc')\n   * @returns {Array} Sorted data\n   */\n  sortData(data, column, direction) {\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return [];\n    }\n\n    const sortedData = [...data];\n\n    sortedData.sort((a, b) => {\n      let valueA; let\n        valueB;\n\n      // Get values based on column\n      switch (column) {\n        case 'date':\n          valueA = a.date.getTime();\n          valueB = b.date.getTime();\n          break;\n        case 'number':\n        case 'amount':\n        case 'principal':\n        case 'interest':\n        case 'balance':\n          valueA = a[column];\n          valueB = b[column];\n          break;\n        default:\n          valueA = a.number;\n          valueB = b.number;\n      }\n\n      // Compare values\n      if (valueA < valueB) {\n        return direction === 'asc' ? -1 : 1;\n      }\n      if (valueA > valueB) {\n        return direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n\n    return sortedData;\n  }\n\n  /**\n   * Filter data based on criteria\n   * @param {Array} data - Data to filter\n   * @param {Object} filters - Filter criteria\n   * @returns {Array} Filtered data\n   */\n  filterData(data, filters) {\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return [];\n    }\n\n    if (!filters || Object.keys(filters).length === 0) {\n      return data;\n    }\n\n    return data.filter((payment) => {\n      // Filter by year\n      if (filters.year && payment.date.getFullYear() !== filters.year) {\n        return false;\n      }\n\n      // Filter by payment range\n      if (filters.paymentRange) {\n        const { min, max } = filters.paymentRange;\n        if (payment.amount < min || payment.amount > max) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  /**\n   * Highlight key information in the table\n   */\n  highlightKeyInformation() {\n    if (!this.container) return;\n\n    // Highlight rows with significant principal reduction\n    const rows = this.container.querySelectorAll('tbody tr');\n    rows.forEach((row) => {\n      const principalCell = row.querySelector('.col-principal');\n      const interestCell = row.querySelector('.col-interest');\n\n      if (principalCell && interestCell) {\n        const principal = parseFloat(principalCell.getAttribute('data-value') || 0);\n        const interest = parseFloat(interestCell.getAttribute('data-value') || 0);\n\n        // If principal is significantly higher than interest\n        if (principal > interest * 2) {\n          row.classList.add('highlight-principal');\n          principalCell.setAttribute('title', 'Significant principal reduction');\n        }\n\n        // If interest is higher than principal\n        if (interest > principal) {\n          row.classList.add('highlight-interest');\n          interestCell.setAttribute('title', 'Interest exceeds principal');\n        }\n      }\n    });\n\n    // Highlight milestone payments (e.g., every 12th payment)\n    rows.forEach((row) => {\n      const numberCell = row.querySelector('.col-number');\n      if (numberCell) {\n        const paymentNumber = parseInt(numberCell.textContent);\n        if (paymentNumber % 12 === 0) {\n          row.classList.add('highlight-milestone');\n          row.setAttribute('title', 'Annual milestone payment');\n        }\n      }\n    });\n  }\n\n  /**\n   * Update the table with new amortization schedule\n   * @param {Object} amortizationSchedule - Amortization schedule object\n   */\n  updateTable(amortizationSchedule) {\n    // Reset to first page when updating data\n    this.currentPage = 1;\n\n    // Reset filters\n    this.filters = {};\n\n    // Render with new data\n    this.render(amortizationSchedule);\n  }\n\n  /**\n   * Show error state\n   * @param {string} message - Error message to display\n   */\n  showError(message = 'Failed to load amortization data') {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"component-error\">\n        <div class=\"error-icon\">⚠️</div>\n        <div class=\"error-text\">${message}</div>\n        <button class=\"retry-button\" onclick=\"location.reload()\">Retry</button>\n      </div>\n    `;\n  }\n\n  /**\n   * Clear the table\n   */\n  clear() {\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n\n    // Reset pagination\n    this.currentPage = 1;\n\n    // Clear current data\n    this.currentData = [];\n  }\n\n  /**\n   * Animate table reveal with staggered row animations\n   * @param {HTMLTableElement} table - Table element\n   * @param {number} rowCount - Number of rows to animate\n   * @private\n   */\n  _animateTableReveal(table, rowCount) {\n    animationManager.respectfulAnimate(() => {\n      // First animate the table container\n      const tableContainer = table.closest('.table-container');\n      if (tableContainer) {\n        tableContainer.style.opacity = '0';\n        tableContainer.style.transform = 'translateY(20px)';\n        tableContainer.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';\n        \n        setTimeout(() => {\n          tableContainer.style.opacity = '1';\n          tableContainer.style.transform = 'translateY(0)';\n        }, 100);\n      }\n\n      // Then animate table rows with stagger\n      setTimeout(() => {\n        animationManager.animateTableRows(table, {\n          delay: 200,\n          staggerDelay: 50,\n        });\n      }, 300);\n\n      // Add subtle hover animations after initial reveal\n      setTimeout(() => {\n        this._addTableInteractions(table);\n      }, 300 + (rowCount * 50));\n\n    }, () => {\n      // Fallback for reduced motion\n      const tableContainer = table.closest('.table-container');\n      if (tableContainer) {\n        tableContainer.style.opacity = '1';\n        tableContainer.style.transform = 'none';\n      }\n      \n      const rows = table.querySelectorAll('tbody tr');\n      rows.forEach((row) => {\n        row.style.opacity = '1';\n        row.style.transform = 'none';\n      });\n    });\n  }\n\n  /**\n   * Add interactive animations to table elements\n   * @param {HTMLTableElement} table - Table element\n   * @private\n   */\n  _addTableInteractions(table) {\n    // Add hover effects to table rows\n    const rows = table.querySelectorAll('tbody tr');\n    rows.forEach((row) => {\n      row.addEventListener('mouseenter', () => {\n        if (!animationManager.prefersReducedMotion()) {\n          row.style.transform = 'translateX(4px)';\n          row.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';\n          row.style.transition = 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)';\n        }\n      });\n\n      row.addEventListener('mouseleave', () => {\n        if (!animationManager.prefersReducedMotion()) {\n          row.style.transform = '';\n          row.style.boxShadow = '';\n        }\n      });\n    });\n\n    // Add click animations to sortable headers\n    const sortableHeaders = table.querySelectorAll('th[data-sort]');\n    sortableHeaders.forEach((header) => {\n      header.addEventListener('click', (event) => {\n        if (!animationManager.prefersReducedMotion()) {\n          animationManager.createRippleEffect(header, event);\n        }\n      });\n    });\n\n    // Add smooth transitions to pagination buttons\n    const paginationButtons = this.container.querySelectorAll('.pagination button');\n    paginationButtons.forEach((button) => {\n      button.addEventListener('click', (event) => {\n        if (!animationManager.prefersReducedMotion()) {\n          animationManager.createRippleEffect(button, event);\n        }\n      });\n    });\n  }\n}\n\nexport default AmortizationTable;\n"],"names":["constructor","options","this","container","document","getElementById","formatters","currency","percentage","number","date","pageSize","currentPage","sortColumn","sortDirection","filters","currentData","init","createFilterControls","filterControls","createElement","className","innerHTML","applyButton","querySelector","resetButton","addEventListener","applyFilters","resetFilters","yearFilter","value","minPayment","parseFloat","maxPayment","Infinity","year","parseInt","paymentRange","min","max","length","render","payments","updateYearFilterOptions","remove","Set","map","payment","getFullYear","sort","forEach","option","textContent","appendChild","showLoadingSkeleton","Array","from","_","i","join","amortizationSchedule","tableContainer","table","tableHeader","createTableHeader","filteredData","filterData","sortedData","sortData","startIndex","endIndex","paginatedData","slice","tableBody","createTableBody","createPagination","highlightKeyInformation","_animateTableReveal","thead","headerRow","id","label","sortable","column","th","classList","add","tbody","emptyRow","emptyCell","colSpan","row","amount","raw","principal","interest","balance","cell","index","td","undefined","setAttribute","getMonth","totalItems","totalPages","Math","ceil","pagination","prevButton","startPage","floor","maxVisiblePages","endPage","firstPageButton","ellipsis","pageButton","lastPageButton","nextButton","data","direction","isArray","a","b","valueA","valueB","getTime","Object","keys","filter","rows","querySelectorAll","principalCell","interestCell","getAttribute","numberCell","updateTable","showError","message","clear","rowCount","animationManager","respectfulAnimate","closest","style","opacity","transform","transition","setTimeout","animateTableRows","delay","staggerDelay","_addTableInteractions","prefersReducedMotion","boxShadow","header","event","createRippleEffect","button"],"sourceRoot":""}